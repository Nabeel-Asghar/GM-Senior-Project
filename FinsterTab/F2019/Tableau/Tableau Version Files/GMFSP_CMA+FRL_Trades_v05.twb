<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20183.19.0319.0943                               -->
<workbook source-build='2018.3.5 (20183.19.0319.0943)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='XPH_Forecast+ (GMFSP_db)' inline='true' name='federated.14gxodt0ghhbe21ff04om11g5ee2' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[XPH_Forecast].[tradeDate]' />
              <expression op='[XPH_Pred2].[tradeDate]' />
            </expression>
          </clause>
          <relation join='left' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[XPH_Forecast].[tradeDate]' />
                <expression op='[XPH_Act].[tradeDate]' />
              </expression>
            </clause>
            <relation join='left' type='join'>
              <clause type='join'>
                <expression op='='>
                  <expression op='[XPH_Forecast].[tradeDate]' />
                  <expression op='[XPH_TS].[tradeDate]' />
                </expression>
              </clause>
              <relation connection='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp' name='XPH_Forecast' table='[dbo].[XPH_Forecast]' type='table' />
              <relation connection='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp' name='XPH_TS' table='[dbo].[XPH_TS]' type='table' />
            </relation>
            <relation connection='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp' name='XPH_Act' table='[dbo].[XPH_Act]' type='table' />
          </relation>
          <relation connection='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp' name='XPH_Pred2' table='[dbo].[XPH_Pred2]' type='table' />
        </relation>
        <cols>
          <map key='[CMATradeAction (XPH_Act)]' value='[XPH_Act].[CMATradeAction]' />
          <map key='[CMATradeAction]' value='[XPH_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction (XPH_Act)]' value='[XPH_Act].[FRLTradeAction]' />
          <map key='[FRLTradeAction]' value='[XPH_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction (XPH_Act)]' value='[XPH_Act].[FRL_1K_TradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[XPH_Forecast].[FRL_1K_TradeAction]' />
          <map key='[closePrice (XPH_Act)]' value='[XPH_Act].[closePrice]' />
          <map key='[closePrice (XPH_Pred2)]' value='[XPH_Pred2].[closePrice]' />
          <map key='[closePrice]' value='[XPH_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg (XPH_Pred2)]' value='[XPH_Pred2].[fibExtHighNeg]' />
          <map key='[fibExtHighNeg]' value='[XPH_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos (XPH_Pred2)]' value='[XPH_Pred2].[fibExtHighPos]' />
          <map key='[fibExtHighPos]' value='[XPH_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg (XPH_Pred2)]' value='[XPH_Pred2].[fibExtLowNeg]' />
          <map key='[fibExtLowNeg]' value='[XPH_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos (XPH_Pred2)]' value='[XPH_Pred2].[fibExtLowPos]' />
          <map key='[fibExtLowPos]' value='[XPH_Forecast].[fibExtLowPos]' />
          <map key='[hunOscillator]' value='[XPH_Pred2].[hunOscillator]' />
          <map key='[kHighFibLine]' value='[XPH_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[XPH_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[XPH_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[XPH_Forecast].[kMedFibLine]' />
          <map key='[kPeak]' value='[XPH_TS].[kPeak]' />
          <map key='[kTrough]' value='[XPH_TS].[kTrough]' />
          <map key='[lCMA (XPH_Forecast)]' value='[XPH_Forecast].[lCMA]' />
          <map key='[lCMA]' value='[XPH_TS].[lCMA]' />
          <map key='[lEMA (XPH_TS)]' value='[XPH_TS].[lEMA]' />
          <map key='[lEMA]' value='[XPH_Forecast].[lEMA]' />
          <map key='[lPeak]' value='[XPH_TS].[lPeak]' />
          <map key='[lTrough]' value='[XPH_TS].[lTrough]' />
          <map key='[lagMomentum]' value='[XPH_Forecast].[lagMomentum]' />
          <map key='[mEMA (XPH_TS)]' value='[XPH_TS].[mEMA]' />
          <map key='[mEMA]' value='[XPH_Forecast].[mEMA]' />
          <map key='[momentumA (XPH_Pred2)]' value='[XPH_Pred2].[momentumA]' />
          <map key='[momentumA]' value='[XPH_Forecast].[momentumA]' />
          <map key='[momentumB]' value='[XPH_Pred2].[momentumB]' />
          <map key='[oneKOscillator]' value='[XPH_Pred2].[oneKOscillator]' />
          <map key='[predNextDay (XPH_Pred2)]' value='[XPH_Pred2].[predNextDay]' />
          <map key='[predNextDay]' value='[XPH_Forecast].[predNextDay]' />
          <map key='[sCMA (XPH_Forecast)]' value='[XPH_Forecast].[sCMA]' />
          <map key='[sCMA]' value='[XPH_TS].[sCMA]' />
          <map key='[sEMA (XPH_TS)]' value='[XPH_TS].[sEMA]' />
          <map key='[sEMA]' value='[XPH_Forecast].[sEMA]' />
          <map key='[sPeak (XPH_Pred2)]' value='[XPH_Pred2].[sPeak]' />
          <map key='[sPeak (XPH_TS)]' value='[XPH_TS].[sPeak]' />
          <map key='[sPeak]' value='[XPH_Forecast].[sPeak]' />
          <map key='[sTrough (XPH_Pred2)]' value='[XPH_Pred2].[sTrough]' />
          <map key='[sTrough (XPH_TS)]' value='[XPH_TS].[sTrough]' />
          <map key='[sTrough]' value='[XPH_Forecast].[sTrough]' />
          <map key='[tradeDate (XPH_Act)]' value='[XPH_Act].[tradeDate]' />
          <map key='[tradeDate (XPH_Pred2)]' value='[XPH_Pred2].[tradeDate]' />
          <map key='[tradeDate (XPH_TS)]' value='[XPH_TS].[tradeDate]' />
          <map key='[tradeDate]' value='[XPH_Forecast].[tradeDate]' />
          <map key='[wCMA]' value='[XPH_TS].[wCMA]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA (XPH_Forecast)]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA (XPH_Forecast)]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (XPH_TS)]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[wCMA]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>wCMA</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough (XPH_TS)]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak (XPH_TS)]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lTrough]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>lTrough</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lPeak]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>lPeak</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kTrough]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>kTrough</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kPeak]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>kPeak</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA (XPH_TS)]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA (XPH_TS)]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA (XPH_TS)]</local-name>
            <parent-name>[XPH_TS]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (XPH_Act)]</local-name>
            <parent-name>[XPH_Act]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>39</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice (XPH_Act)]</local-name>
            <parent-name>[XPH_Act]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[CMATradeAction (XPH_Act)]</local-name>
            <parent-name>[XPH_Act]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>41</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[FRLTradeAction (XPH_Act)]</local-name>
            <parent-name>[XPH_Act]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>42</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[FRL_1K_TradeAction (XPH_Act)]</local-name>
            <parent-name>[XPH_Act]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>43</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>45</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumB</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumB]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>momentumB</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>3</remote-type>
            <local-name>[predNextDay (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>51</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos (XPH_Pred2)]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hunOscillator</remote-name>
            <remote-type>5</remote-type>
            <local-name>[hunOscillator]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>hunOscillator</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>oneKOscillator</remote-name>
            <remote-type>5</remote-type>
            <local-name>[oneKOscillator]</local-name>
            <parent-name>[XPH_Pred2]</parent-name>
            <remote-alias>oneKOscillator</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CMATradeAction (XPH Act)' datatype='integer' name='[CMATradeAction (XPH_Act)]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRLTradeAction (XPH Act)' datatype='integer' name='[FRLTradeAction (XPH_Act)]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction (XPH Act)' datatype='integer' name='[FRL_1K_TradeAction (XPH_Act)]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='closePrice (XPH Act)' datatype='real' name='[closePrice (XPH_Act)]' role='measure' type='quantitative' />
      <column caption='closePrice (XPH Pred2)' datatype='real' name='[closePrice (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='fibExtHighNeg (XPH Pred2)' datatype='real' name='[fibExtHighNeg (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='fibExtHighPos (XPH Pred2)' datatype='real' name='[fibExtHighPos (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='fibExtLowNeg (XPH Pred2)' datatype='real' name='[fibExtLowNeg (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='fibExtLowPos (XPH Pred2)' datatype='real' name='[fibExtLowPos (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='Hun Oscillator' datatype='real' name='[hunOscillator]' role='measure' type='quantitative' />
      <column caption='K Peak' datatype='real' name='[kPeak]' role='measure' type='quantitative' />
      <column caption='K Trough' datatype='real' name='[kTrough]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='L Peak' datatype='real' name='[lPeak]' role='measure' type='quantitative' />
      <column caption='L Trough' datatype='real' name='[lTrough]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='momentumA (XPH Pred2)' datatype='real' name='[momentumA (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Momentum B' datatype='real' name='[momentumB]' role='measure' type='quantitative' />
      <column caption='One K Oscillator' datatype='real' name='[oneKOscillator]' role='measure' type='quantitative' />
      <column caption='predNextDay (XPH Pred2)' datatype='integer' name='[predNextDay (XPH_Pred2)]' role='dimension' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='sPeak (XPH Pred2)' datatype='real' name='[sPeak (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='sPeak (XPH TS)' datatype='real' name='[sPeak (XPH_TS)]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='sTrough (XPH Pred2)' datatype='real' name='[sTrough (XPH_Pred2)]' role='measure' type='quantitative' />
      <column caption='sTrough (XPH TS)' datatype='real' name='[sTrough (XPH_TS)]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (XPH Act)' datatype='date' name='[tradeDate (XPH_Act)]' role='dimension' type='ordinal' />
      <column caption='tradeDate (XPH Pred2)' datatype='date' name='[tradeDate (XPH_Pred2)]' role='dimension' type='ordinal' />
      <column caption='tradeDate (XPH TS)' datatype='date' name='[tradeDate (XPH_TS)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column caption='W Cma' datatype='real' name='[wCMA]' role='measure' type='quantitative' />
      <column-instance column='[XPH Buy FRL]' derivation='InOut' name='[io:XPH Buy FRL:nk]' pivot='key' type='nominal' />
      <column-instance column='[XPH Buy]' derivation='InOut' name='[io:XPH Buy:nk]' pivot='key' type='nominal' />
      <column-instance column='[XPH Sell FRL]' derivation='InOut' name='[io:XPH Sell FRL:nk]' pivot='key' type='nominal' />
      <column-instance column='[XPH Sell]' derivation='InOut' name='[io:XPH Sell:nk]' pivot='key' type='nominal' />
      <column-instance column='[FRLTradeAction (XPH_Act)]' derivation='Sum' name='[sum:FRLTradeAction (XPH_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction (XPH_Act)]' derivation='Sum' name='[sum:FRL_1K_TradeAction (XPH_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice (XPH_Act)]' derivation='Sum' name='[sum:closePrice (XPH_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighNeg (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtHighNeg (XPH_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighNeg]' derivation='Sum' name='[sum:fibExtHighNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighPos (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtHighPos (XPH_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighPos]' derivation='Sum' name='[sum:fibExtHighPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowNeg (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtLowNeg (XPH_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowNeg]' derivation='Sum' name='[sum:fibExtLowNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowPos (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtLowPos (XPH_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowPos]' derivation='Sum' name='[sum:fibExtLowPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[kPeak]' derivation='Sum' name='[sum:kPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[kTrough]' derivation='Sum' name='[sum:kTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lCMA]' derivation='Sum' name='[sum:lCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lPeak]' derivation='Sum' name='[sum:lPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lTrough]' derivation='Sum' name='[sum:lTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sCMA]' derivation='Sum' name='[sum:sCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sPeak]' derivation='Sum' name='[sum:sPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sTrough]' derivation='Sum' name='[sum:sTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[wCMA]' derivation='Sum' name='[sum:wCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[XPH Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-06-20 00:00:00#' />
          <groupfilter from='#2014-06-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-06-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-14 00:00:00#' />
          <groupfilter from='#2014-08-26 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-08 00:00:00#' />
          <groupfilter from='#2014-09-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-15 00:00:00#' />
          <groupfilter from='#2014-09-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-20 00:00:00#' />
          <groupfilter from='#2014-10-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-10-28 00:00:00#' />
          <groupfilter from='#2014-11-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-11-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-11-14 00:00:00#' />
          <groupfilter from='#2014-11-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-11-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-19 00:00:00#' />
          <groupfilter from='#2015-10-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-11-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-04 00:00:00#' />
          <groupfilter from='#2015-11-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-11-11 00:00:00#' />
          <groupfilter from='#2015-11-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-11-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-08 00:00:00#' />
          <groupfilter from='#2016-07-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-24 00:00:00#' />
          <groupfilter from='#2016-09-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-21 00:00:00#' />
          <groupfilter from='#2016-09-26 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-28 00:00:00#' />
          <groupfilter from='#2018-01-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-01-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-13 00:00:00#' />
          <groupfilter from='#2018-07-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-19 00:00:00#' />
          <groupfilter from='#2018-07-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-30 00:00:00#' />
          <groupfilter from='#2018-08-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-09 00:00:00#' />
          <groupfilter from='#2018-08-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-18 00:00:00#' />
          <groupfilter from='#2018-09-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-10-08 00:00:00#' />
          <groupfilter from='#2018-10-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-11-07 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[XPH Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-10 00:00:00#' />
          <groupfilter from='#2014-05-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-05-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-06-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-06-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-06-13 00:00:00#' />
          <groupfilter from='#2014-07-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-07-11 00:00:00#' />
          <groupfilter from='#2014-07-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-07-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-08-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-26 00:00:00#' />
          <groupfilter from='#2014-09-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-10-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-16 00:00:00#' />
          <groupfilter from='#2014-11-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-11-14 00:00:00#' />
          <groupfilter from='#2014-12-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-24 00:00:00#' />
          <groupfilter from='#2014-12-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-28 00:00:00#' />
          <groupfilter from='#2015-01-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-02-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-10 00:00:00#' />
          <groupfilter from='#2015-03-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-20 00:00:00#' />
          <groupfilter from='#2015-04-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-26 00:00:00#' />
          <groupfilter from='#2015-06-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-07-02 00:00:00#' />
          <groupfilter from='#2015-07-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-08-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-12 00:00:00#' />
          <groupfilter from='#2015-12-31 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-01-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-08 00:00:00#' />
          <groupfilter from='#2016-06-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-06-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-10 00:00:00#' />
          <groupfilter from='#2016-08-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-22 00:00:00#' />
          <groupfilter from='#2016-08-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-09 00:00:00#' />
          <groupfilter from='#2016-09-26 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-28 00:00:00#' />
          <groupfilter from='#2016-09-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-10-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-02-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-02-28 00:00:00#' />
          <groupfilter from='#2017-03-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-17 00:00:00#' />
          <groupfilter from='#2017-03-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-24 00:00:00#' />
          <groupfilter from='#2017-04-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-05 00:00:00#' />
          <groupfilter from='#2017-04-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-21 00:00:00#' />
          <groupfilter from='#2017-05-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-09 00:00:00#' />
          <groupfilter from='#2017-05-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-30 00:00:00#' />
          <groupfilter from='#2017-06-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-06-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-30 00:00:00#' />
          <groupfilter from='#2017-07-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-07-10 00:00:00#' />
          <groupfilter from='#2017-07-26 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-08-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-07 00:00:00#' />
          <groupfilter from='#2017-09-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-09-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-10 00:00:00#' />
          <groupfilter from='#2017-10-12 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-10-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-29 00:00:00#' />
          <groupfilter from='#2018-01-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-02-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-22 00:00:00#' />
          <groupfilter from='#2018-06-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-20 00:00:00#' />
          <groupfilter from='#2018-08-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-27 00:00:00#' />
          <groupfilter from='#2018-09-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-26 00:00:00#' />
          <groupfilter from='#2018-10-01 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-10-11 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[XPH Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-11-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-11-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-31 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-28 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[XPH Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-09 00:00:00#' />
          <groupfilter from='#2014-04-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-05-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-13 00:00:00#' />
          <groupfilter from='#2014-05-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-06-03 00:00:00#' />
          <groupfilter from='#2014-06-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-06-11 00:00:00#' />
          <groupfilter from='#2014-06-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-07-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-24 00:00:00#' />
          <groupfilter from='#2014-08-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-08 00:00:00#' />
          <groupfilter from='#2014-09-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-08 00:00:00#' />
          <groupfilter from='#2014-10-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-11-04 00:00:00#' />
          <groupfilter from='#2014-11-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-09 00:00:00#' />
          <groupfilter from='#2014-12-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-29 00:00:00#' />
          <groupfilter from='#2015-01-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-14 00:00:00#' />
          <groupfilter from='#2015-01-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-29 00:00:00#' />
          <groupfilter from='#2015-02-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-09 00:00:00#' />
          <groupfilter from='#2015-03-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-20 00:00:00#' />
          <groupfilter from='#2015-04-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-16 00:00:00#' />
          <groupfilter from='#2015-04-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-23 00:00:00#' />
          <groupfilter from='#2015-05-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-05-12 00:00:00#' />
          <groupfilter from='#2015-05-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-05-22 00:00:00#' />
          <groupfilter from='#2015-05-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-11 00:00:00#' />
          <groupfilter from='#2015-06-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-07-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-07-07 00:00:00#' />
          <groupfilter from='#2015-07-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-07-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-09-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-16 00:00:00#' />
          <groupfilter from='#2015-12-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-12-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-03-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-04-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-04-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-05-02 00:00:00#' />
          <groupfilter from='#2016-05-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-06-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-23 00:00:00#' />
          <groupfilter from='#2016-06-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-07-18 00:00:00#' />
          <groupfilter from='#2016-07-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-09 00:00:00#' />
          <groupfilter from='#2016-08-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-23 00:00:00#' />
          <groupfilter from='#2016-09-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-08 00:00:00#' />
          <groupfilter from='#2016-09-12 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-19 00:00:00#' />
          <groupfilter from='#2017-02-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-02-21 00:00:00#' />
          <groupfilter from='#2017-02-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-02-27 00:00:00#' />
          <groupfilter from='#2017-03-01 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-20 00:00:00#' />
          <groupfilter from='#2017-03-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-31 00:00:00#' />
          <groupfilter from='#2017-04-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-12 00:00:00#' />
          <groupfilter from='#2017-04-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-02 00:00:00#' />
          <groupfilter from='#2017-05-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-16 00:00:00#' />
          <groupfilter from='#2017-05-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-26 00:00:00#' />
          <groupfilter from='#2017-05-31 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-06-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-08 00:00:00#' />
          <groupfilter from='#2017-06-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-06-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-05 00:00:00#' />
          <groupfilter from='#2017-07-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-07-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-02 00:00:00#' />
          <groupfilter from='#2017-08-31 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-09-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-27 00:00:00#' />
          <groupfilter from='#2017-09-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-10-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-11-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-11-24 00:00:00#' />
          <groupfilter from='#2017-11-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-01 00:00:00#' />
          <groupfilter from='#2017-12-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-18 00:00:00#' />
          <groupfilter from='#2017-12-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-28 00:00:00#' />
          <groupfilter from='#2018-01-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-01-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-06 00:00:00#' />
          <groupfilter from='#2018-03-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-03-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-04-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-06-01 00:00:00#' />
          <groupfilter from='#2018-06-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-06-20 00:00:00#' />
          <groupfilter from='#2018-07-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-13 00:00:00#' />
          <groupfilter from='#2018-07-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-19 00:00:00#' />
          <groupfilter from='#2018-07-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-22 00:00:00#' />
          <groupfilter from='#2018-08-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-05 00:00:00#' />
          <groupfilter from='#2018-09-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-28 00:00:00#' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.383085' group-percentage='0.308458' measure-ordering='alphabetic' measure-percentage='0.308458' rowDisplayCount='1500' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[io:XPH Buy FRL:nk]&#10;[io:XPH Sell FRL:nk]' type='palette'>
            <map to='#59a14f'>
              <multibucket>
                <bucket>true</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#bab0ac'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#e15759'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>true</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRL_1K_TradeAction (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighNeg (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighPos (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRLTradeAction (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowNeg (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowPos (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lCMA:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:XPH Buy:nk]&#10;[io:XPH Sell:nk]' type='palette'>
            <map to='#59a14f'>
              <multibucket>
                <bucket>true</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#bab0ac'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#e15759'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>true</bucket>
              </multibucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='PFE_Forecast+ (GMFSP_db)' inline='true' name='federated.046umqe1wfsi9o1fkyfn71pmyi6f' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[PFE_Forecast].[tradeDate]' />
              <expression op='[PFE_Pred2].[tradeDate]' />
            </expression>
          </clause>
          <relation join='left' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[PFE_Forecast].[tradeDate]' />
                <expression op='[PFE_Act].[tradeDate]' />
              </expression>
            </clause>
            <relation join='left' type='join'>
              <clause type='join'>
                <expression op='='>
                  <expression op='[PFE_Forecast].[tradeDate]' />
                  <expression op='[PFE_TS].[tradeDate]' />
                </expression>
              </clause>
              <relation connection='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf' name='PFE_Forecast' table='[dbo].[PFE_Forecast]' type='table' />
              <relation connection='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf' name='PFE_TS' table='[dbo].[PFE_TS]' type='table' />
            </relation>
            <relation connection='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf' name='PFE_Act' table='[dbo].[PFE_Act]' type='table' />
          </relation>
          <relation connection='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf' name='PFE_Pred2' table='[dbo].[PFE_Pred2]' type='table' />
        </relation>
        <cols>
          <map key='[CMATradeAction (PFE_Act)]' value='[PFE_Act].[CMATradeAction]' />
          <map key='[CMATradeAction]' value='[PFE_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction (PFE_Act)]' value='[PFE_Act].[FRLTradeAction]' />
          <map key='[FRLTradeAction]' value='[PFE_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction (PFE_Act)]' value='[PFE_Act].[FRL_1K_TradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[PFE_Forecast].[FRL_1K_TradeAction]' />
          <map key='[closePrice (PFE_Act)]' value='[PFE_Act].[closePrice]' />
          <map key='[closePrice (PFE_Pred2)]' value='[PFE_Pred2].[closePrice]' />
          <map key='[closePrice]' value='[PFE_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg (PFE_Pred2)]' value='[PFE_Pred2].[fibExtHighNeg]' />
          <map key='[fibExtHighNeg]' value='[PFE_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos (PFE_Pred2)]' value='[PFE_Pred2].[fibExtHighPos]' />
          <map key='[fibExtHighPos]' value='[PFE_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg (PFE_Pred2)]' value='[PFE_Pred2].[fibExtLowNeg]' />
          <map key='[fibExtLowNeg]' value='[PFE_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos (PFE_Pred2)]' value='[PFE_Pred2].[fibExtLowPos]' />
          <map key='[fibExtLowPos]' value='[PFE_Forecast].[fibExtLowPos]' />
          <map key='[hunOscillator]' value='[PFE_Pred2].[hunOscillator]' />
          <map key='[kHighFibLine]' value='[PFE_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[PFE_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[PFE_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[PFE_Forecast].[kMedFibLine]' />
          <map key='[kPeak]' value='[PFE_TS].[kPeak]' />
          <map key='[kTrough]' value='[PFE_TS].[kTrough]' />
          <map key='[lCMA (PFE_Forecast)]' value='[PFE_Forecast].[lCMA]' />
          <map key='[lCMA]' value='[PFE_TS].[lCMA]' />
          <map key='[lEMA (PFE_TS)]' value='[PFE_TS].[lEMA]' />
          <map key='[lEMA]' value='[PFE_Forecast].[lEMA]' />
          <map key='[lPeak]' value='[PFE_TS].[lPeak]' />
          <map key='[lTrough]' value='[PFE_TS].[lTrough]' />
          <map key='[lagMomentum]' value='[PFE_Forecast].[lagMomentum]' />
          <map key='[mEMA (PFE_TS)]' value='[PFE_TS].[mEMA]' />
          <map key='[mEMA]' value='[PFE_Forecast].[mEMA]' />
          <map key='[momentumA (PFE_Pred2)]' value='[PFE_Pred2].[momentumA]' />
          <map key='[momentumA]' value='[PFE_Forecast].[momentumA]' />
          <map key='[momentumB]' value='[PFE_Pred2].[momentumB]' />
          <map key='[oneKOscillator]' value='[PFE_Pred2].[oneKOscillator]' />
          <map key='[predNextDay (PFE_Pred2)]' value='[PFE_Pred2].[predNextDay]' />
          <map key='[predNextDay]' value='[PFE_Forecast].[predNextDay]' />
          <map key='[sCMA (PFE_Forecast)]' value='[PFE_Forecast].[sCMA]' />
          <map key='[sCMA]' value='[PFE_TS].[sCMA]' />
          <map key='[sEMA (PFE_TS)]' value='[PFE_TS].[sEMA]' />
          <map key='[sEMA]' value='[PFE_Forecast].[sEMA]' />
          <map key='[sPeak (PFE_Pred2)]' value='[PFE_Pred2].[sPeak]' />
          <map key='[sPeak (PFE_TS)]' value='[PFE_TS].[sPeak]' />
          <map key='[sPeak]' value='[PFE_Forecast].[sPeak]' />
          <map key='[sTrough (PFE_Pred2)]' value='[PFE_Pred2].[sTrough]' />
          <map key='[sTrough (PFE_TS)]' value='[PFE_TS].[sTrough]' />
          <map key='[sTrough]' value='[PFE_Forecast].[sTrough]' />
          <map key='[tradeDate (PFE_Act)]' value='[PFE_Act].[tradeDate]' />
          <map key='[tradeDate (PFE_Pred2)]' value='[PFE_Pred2].[tradeDate]' />
          <map key='[tradeDate (PFE_TS)]' value='[PFE_TS].[tradeDate]' />
          <map key='[tradeDate]' value='[PFE_Forecast].[tradeDate]' />
          <map key='[wCMA]' value='[PFE_TS].[wCMA]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA (PFE_Forecast)]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA (PFE_Forecast)]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (PFE_TS)]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[wCMA]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>wCMA</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough (PFE_TS)]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak (PFE_TS)]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lTrough]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>lTrough</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lPeak]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>lPeak</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kTrough]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>kTrough</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kPeak]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>kPeak</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA (PFE_TS)]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA (PFE_TS)]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA (PFE_TS)]</local-name>
            <parent-name>[PFE_TS]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (PFE_Act)]</local-name>
            <parent-name>[PFE_Act]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>39</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice (PFE_Act)]</local-name>
            <parent-name>[PFE_Act]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[CMATradeAction (PFE_Act)]</local-name>
            <parent-name>[PFE_Act]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>41</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[FRLTradeAction (PFE_Act)]</local-name>
            <parent-name>[PFE_Act]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>42</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[FRL_1K_TradeAction (PFE_Act)]</local-name>
            <parent-name>[PFE_Act]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>43</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>45</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumB</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumB]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>momentumB</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>3</remote-type>
            <local-name>[predNextDay (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>51</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos (PFE_Pred2)]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hunOscillator</remote-name>
            <remote-type>5</remote-type>
            <local-name>[hunOscillator]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>hunOscillator</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>oneKOscillator</remote-name>
            <remote-type>5</remote-type>
            <local-name>[oneKOscillator]</local-name>
            <parent-name>[PFE_Pred2]</parent-name>
            <remote-alias>oneKOscillator</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CMATradeAction (PFE Act)' datatype='integer' name='[CMATradeAction (PFE_Act)]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRLTradeAction (PFE Act)' datatype='integer' name='[FRLTradeAction (PFE_Act)]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction (PFE Act)' datatype='integer' name='[FRL_1K_TradeAction (PFE_Act)]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='closePrice (PFE Act)' datatype='real' name='[closePrice (PFE_Act)]' role='measure' type='quantitative' />
      <column caption='closePrice (PFE Pred2)' datatype='real' name='[closePrice (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='fibExtHighNeg (PFE Pred2)' datatype='real' name='[fibExtHighNeg (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='fibExtHighPos (PFE Pred2)' datatype='real' name='[fibExtHighPos (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='fibExtLowNeg (PFE Pred2)' datatype='real' name='[fibExtLowNeg (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='fibExtLowPos (PFE Pred2)' datatype='real' name='[fibExtLowPos (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='Hun Oscillator' datatype='real' name='[hunOscillator]' role='measure' type='quantitative' />
      <column caption='K Peak' datatype='real' name='[kPeak]' role='measure' type='quantitative' />
      <column caption='K Trough' datatype='real' name='[kTrough]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='L Peak' datatype='real' name='[lPeak]' role='measure' type='quantitative' />
      <column caption='L Trough' datatype='real' name='[lTrough]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='momentumA (PFE Pred2)' datatype='real' name='[momentumA (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Momentum B' datatype='real' name='[momentumB]' role='measure' type='quantitative' />
      <column caption='One K Oscillator' datatype='real' name='[oneKOscillator]' role='measure' type='quantitative' />
      <column caption='predNextDay (PFE Pred2)' datatype='integer' name='[predNextDay (PFE_Pred2)]' role='dimension' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='sPeak (PFE Pred2)' datatype='real' name='[sPeak (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='sPeak (PFE TS)' datatype='real' name='[sPeak (PFE_TS)]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='sTrough (PFE Pred2)' datatype='real' name='[sTrough (PFE_Pred2)]' role='measure' type='quantitative' />
      <column caption='sTrough (PFE TS)' datatype='real' name='[sTrough (PFE_TS)]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (PFE Act)' datatype='date' name='[tradeDate (PFE_Act)]' role='dimension' type='ordinal' />
      <column caption='tradeDate (PFE Pred2)' datatype='date' name='[tradeDate (PFE_Pred2)]' role='dimension' type='ordinal' />
      <column caption='tradeDate (PFE TS)' datatype='date' name='[tradeDate (PFE_TS)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column caption='W Cma' datatype='real' name='[wCMA]' role='measure' type='quantitative' />
      <column-instance column='[PFE Buy FRL]' derivation='InOut' name='[io:PFE Buy FRL:nk]' pivot='key' type='nominal' />
      <column-instance column='[PFE Buy]' derivation='InOut' name='[io:PFE Buy:nk]' pivot='key' type='nominal' />
      <column-instance column='[PFE Sell FRL]' derivation='InOut' name='[io:PFE Sell FRL:nk]' pivot='key' type='nominal' />
      <column-instance column='[PFE Sell]' derivation='InOut' name='[io:PFE Sell:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[CMATradeAction (PFE_Act)]' derivation='Sum' name='[sum:CMATradeAction (PFE_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction (PFE_Act)]' derivation='Sum' name='[sum:FRLTradeAction (PFE_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction (PFE_Act)]' derivation='Sum' name='[sum:FRL_1K_TradeAction (PFE_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice (PFE_Act)]' derivation='Sum' name='[sum:closePrice (PFE_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice (PFE_Pred2)]' derivation='Sum' name='[sum:closePrice (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighNeg (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtHighNeg (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighNeg]' derivation='Sum' name='[sum:fibExtHighNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighPos (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtHighPos (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighPos]' derivation='Sum' name='[sum:fibExtHighPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowNeg (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtLowNeg (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowNeg]' derivation='Sum' name='[sum:fibExtLowNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowPos (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtLowPos (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowPos]' derivation='Sum' name='[sum:fibExtLowPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[hunOscillator]' derivation='Sum' name='[sum:hunOscillator:qk]' pivot='key' type='quantitative' />
      <column-instance column='[kPeak]' derivation='Sum' name='[sum:kPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[kTrough]' derivation='Sum' name='[sum:kTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lCMA]' derivation='Sum' name='[sum:lCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lPeak]' derivation='Sum' name='[sum:lPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lTrough]' derivation='Sum' name='[sum:lTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lagMomentum]' derivation='Sum' name='[sum:lagMomentum:qk]' pivot='key' type='quantitative' />
      <column-instance column='[momentumA (PFE_Pred2)]' derivation='Sum' name='[sum:momentumA (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[momentumA]' derivation='Sum' name='[sum:momentumA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[momentumB]' derivation='Sum' name='[sum:momentumB:qk]' pivot='key' type='quantitative' />
      <column-instance column='[oneKOscillator]' derivation='Sum' name='[sum:oneKOscillator:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sCMA]' derivation='Sum' name='[sum:sCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sPeak (PFE_Pred2)]' derivation='Sum' name='[sum:sPeak (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[sPeak (PFE_TS)]' derivation='Sum' name='[sum:sPeak (PFE_TS):qk]' pivot='key' type='quantitative' />
      <column-instance column='[sPeak]' derivation='Sum' name='[sum:sPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sTrough (PFE_Pred2)]' derivation='Sum' name='[sum:sTrough (PFE_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[sTrough (PFE_TS)]' derivation='Sum' name='[sum:sTrough (PFE_TS):qk]' pivot='key' type='quantitative' />
      <column-instance column='[sTrough]' derivation='Sum' name='[sum:sTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[wCMA]' derivation='Sum' name='[sum:wCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[PFE Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-31 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-04 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[PFE Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-23 00:00:00#' />
          <groupfilter from='#2014-09-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-11-24 00:00:00#' />
          <groupfilter from='#2014-12-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-17 00:00:00#' />
          <groupfilter from='#2014-12-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-23 00:00:00#' />
          <groupfilter from='#2015-01-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-02-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-27 00:00:00#' />
          <groupfilter from='#2015-03-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-26 00:00:00#' />
          <groupfilter from='#2015-04-01 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-07 00:00:00#' />
          <groupfilter from='#2015-04-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-22 00:00:00#' />
          <groupfilter from='#2015-04-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-05-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-26 00:00:00#' />
          <groupfilter from='#2015-06-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-09 00:00:00#' />
          <groupfilter from='#2015-06-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-29 00:00:00#' />
          <groupfilter from='#2015-07-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-07-27 00:00:00#' />
          <groupfilter from='#2015-08-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-08-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-30 00:00:00#' />
          <groupfilter from='#2015-11-04 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-11-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-04-12 00:00:00#' />
          <groupfilter from='#2016-04-26 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-05-02 00:00:00#' />
          <groupfilter from='#2016-05-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-05-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-05-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-05-18 00:00:00#' />
          <groupfilter from='#2016-06-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-06-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-28 00:00:00#' />
          <groupfilter from='#2016-08-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-22 00:00:00#' />
          <groupfilter from='#2016-08-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-26 00:00:00#' />
          <groupfilter from='#2016-08-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-19 00:00:00#' />
          <groupfilter from='#2017-03-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-21 00:00:00#' />
          <groupfilter from='#2017-03-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-28 00:00:00#' />
          <groupfilter from='#2017-04-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-13 00:00:00#' />
          <groupfilter from='#2017-04-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-24 00:00:00#' />
          <groupfilter from='#2017-05-01 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-17 00:00:00#' />
          <groupfilter from='#2017-06-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-06-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-17 00:00:00#' />
          <groupfilter from='#2017-09-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-09-28 00:00:00#' />
          <groupfilter from='#2017-10-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-10-18 00:00:00#' />
          <groupfilter from='#2017-10-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-11-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-11-06 00:00:00#' />
          <groupfilter from='#2017-12-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-08 00:00:00#' />
          <groupfilter from='#2017-12-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-29 00:00:00#' />
          <groupfilter from='#2018-01-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-01-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-23 00:00:00#' />
          <groupfilter from='#2018-01-31 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-02-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-08 00:00:00#' />
          <groupfilter from='#2018-03-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-03-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-14 00:00:00#' />
          <groupfilter from='#2018-03-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-03-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-04-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-03 00:00:00#' />
          <groupfilter from='#2018-06-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-06-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-06-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-06-19 00:00:00#' />
          <groupfilter from='#2018-06-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-02 00:00:00#' />
          <groupfilter from='#2018-07-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-08-14 00:00:00#' />
          <groupfilter from='#2018-08-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-26 00:00:00#' />
          <groupfilter from='#2018-10-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-16 00:00:00#' />
          <groupfilter from='#2018-10-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-31 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-11-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-11-06 00:00:00#' />
          <groupfilter from='#2018-11-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-11-16 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[PFE Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-11-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-09-06 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[PFE Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter from='#2014-04-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-04-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-06-24 00:00:00#' />
          <groupfilter from='#2014-07-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-07-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-11 00:00:00#' />
          <groupfilter from='#2014-09-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-01 00:00:00#' />
          <groupfilter from='#2014-10-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-11-21 00:00:00#' />
          <groupfilter from='#2014-11-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-10 00:00:00#' />
          <groupfilter from='#2014-12-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-23 00:00:00#' />
          <groupfilter from='#2015-01-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-26 00:00:00#' />
          <groupfilter from='#2015-02-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-02-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-26 00:00:00#' />
          <groupfilter from='#2015-03-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-04 00:00:00#' />
          <groupfilter from='#2015-03-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-24 00:00:00#' />
          <groupfilter from='#2015-03-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-31 00:00:00#' />
          <groupfilter from='#2015-04-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-11 00:00:00#' />
          <groupfilter from='#2015-05-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-05-22 00:00:00#' />
          <groupfilter from='#2015-05-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-02 00:00:00#' />
          <groupfilter from='#2015-06-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-12 00:00:00#' />
          <groupfilter from='#2015-06-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-26 00:00:00#' />
          <groupfilter from='#2015-07-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-07-21 00:00:00#' />
          <groupfilter from='#2015-07-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-08-05 00:00:00#' />
          <groupfilter from='#2015-08-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-08-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-09-28 00:00:00#' />
          <groupfilter from='#2015-10-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-10-20 00:00:00#' />
          <groupfilter from='#2015-10-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-10-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-01 00:00:00#' />
          <groupfilter from='#2015-12-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-12-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-03-10 00:00:00#' />
          <groupfilter from='#2016-04-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-04-11 00:00:00#' />
          <groupfilter from='#2016-04-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-04-25 00:00:00#' />
          <groupfilter from='#2016-05-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-05-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-05-16 00:00:00#' />
          <groupfilter from='#2016-05-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-06-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-23 00:00:00#' />
          <groupfilter from='#2016-06-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-07-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-12 00:00:00#' />
          <groupfilter from='#2017-01-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-01-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-18 00:00:00#' />
          <groupfilter from='#2017-02-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-06 00:00:00#' />
          <groupfilter from='#2017-03-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-22 00:00:00#' />
          <groupfilter from='#2017-03-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-04-17 00:00:00#' />
          <groupfilter from='#2017-04-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-15 00:00:00#' />
          <groupfilter from='#2017-06-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-06-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-14 00:00:00#' />
          <groupfilter from='#2017-07-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-07-21 00:00:00#' />
          <groupfilter from='#2017-08-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-08-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-16 00:00:00#' />
          <groupfilter from='#2017-08-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-09-22 00:00:00#' />
          <groupfilter from='#2017-09-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-10-13 00:00:00#' />
          <groupfilter from='#2017-10-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-10-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-11-03 00:00:00#' />
          <groupfilter from='#2017-11-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-04 00:00:00#' />
          <groupfilter from='#2017-12-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-19 00:00:00#' />
          <groupfilter from='#2018-01-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-01-05 00:00:00#' />
          <groupfilter from='#2018-01-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-01-22 00:00:00#' />
          <groupfilter from='#2018-01-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-01-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-07 00:00:00#' />
          <groupfilter from='#2018-02-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-02-28 00:00:00#' />
          <groupfilter from='#2018-03-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-03-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-04-04 00:00:00#' />
          <groupfilter from='#2018-04-12 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-04-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-24 00:00:00#' />
          <groupfilter from='#2018-05-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-06-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-06-15 00:00:00#' />
          <groupfilter from='#2018-06-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-06-26 00:00:00#' />
          <groupfilter from='#2018-07-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-18 00:00:00#' />
          <groupfilter from='#2018-07-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-10 00:00:00#' />
          <groupfilter from='#2018-08-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-24 00:00:00#' />
          <groupfilter from='#2018-09-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-25 00:00:00#' />
          <groupfilter from='#2018-09-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-09 00:00:00#' />
          <groupfilter from='#2018-10-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-11-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-11-05 00:00:00#' />
          <groupfilter from='#2018-11-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-11-12 00:00:00#' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.40796' group-percentage='0.293532' measure-ordering='alphabetic' measure-percentage='0.298507' rowDisplayCount='1500' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[io:PFE Buy:nk]&#10;[io:PFE Sell:nk]' type='palette'>
            <map to='#59a14f'>
              <multibucket>
                <bucket>true</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#bab0ac'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#e15759'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>true</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sPeak (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRL_1K_TradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sTrough (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighNeg (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighPos (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sTrough (PFE_TS):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:momentumA (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowNeg (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowPos (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:hunOscillator:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sPeak (PFE_TS):qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:momentumB:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:oneKOscillator:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRLTradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:PFE Buy FRL:nk]&#10;[io:PFE Sell FRL:nk]' type='palette'>
            <map to='#59a14f'>
              <multibucket>
                <bucket>true</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#bab0ac'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#e15759'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>true</bucket>
              </multibucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
    <datasource caption='SPY_Forecast+ (GMFSP_db)' inline='true' name='federated.0kmipzx1cwae6v14kjfpc0e1w2ew' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.0a1rbp114rouih1gfm94b0j0aah5'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[SPY_Forecast].[tradeDate]' />
              <expression op='[SPY_Pred2].[tradeDate]' />
            </expression>
          </clause>
          <relation join='left' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[SPY_Forecast].[tradeDate]' />
                <expression op='[SPY_TS].[tradeDate]' />
              </expression>
            </clause>
            <relation join='left' type='join'>
              <clause type='join'>
                <expression op='='>
                  <expression op='[SPY_Forecast].[tradeDate]' />
                  <expression op='[SPY_Act].[tradeDate]' />
                </expression>
              </clause>
              <relation connection='sqlserver.0a1rbp114rouih1gfm94b0j0aah5' name='SPY_Forecast' table='[dbo].[SPY_Forecast]' type='table' />
              <relation connection='sqlserver.0a1rbp114rouih1gfm94b0j0aah5' name='SPY_Act' table='[dbo].[SPY_Act]' type='table' />
            </relation>
            <relation connection='sqlserver.0a1rbp114rouih1gfm94b0j0aah5' name='SPY_TS' table='[dbo].[SPY_TS]' type='table' />
          </relation>
          <relation connection='sqlserver.0a1rbp114rouih1gfm94b0j0aah5' name='SPY_Pred2' table='[dbo].[SPY_Pred2]' type='table' />
        </relation>
        <cols>
          <map key='[CMATradeAction (SPY_Act)]' value='[SPY_Act].[CMATradeAction]' />
          <map key='[CMATradeAction]' value='[SPY_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction (SPY_Act)]' value='[SPY_Act].[FRLTradeAction]' />
          <map key='[FRLTradeAction]' value='[SPY_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction (SPY_Act)]' value='[SPY_Act].[FRL_1K_TradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[SPY_Forecast].[FRL_1K_TradeAction]' />
          <map key='[closePrice (SPY_Act)]' value='[SPY_Act].[closePrice]' />
          <map key='[closePrice (SPY_Pred2)]' value='[SPY_Pred2].[closePrice]' />
          <map key='[closePrice]' value='[SPY_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg (SPY_Pred2)]' value='[SPY_Pred2].[fibExtHighNeg]' />
          <map key='[fibExtHighNeg]' value='[SPY_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos (SPY_Pred2)]' value='[SPY_Pred2].[fibExtHighPos]' />
          <map key='[fibExtHighPos]' value='[SPY_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg (SPY_Pred2)]' value='[SPY_Pred2].[fibExtLowNeg]' />
          <map key='[fibExtLowNeg]' value='[SPY_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos (SPY_Pred2)]' value='[SPY_Pred2].[fibExtLowPos]' />
          <map key='[fibExtLowPos]' value='[SPY_Forecast].[fibExtLowPos]' />
          <map key='[hunOscillator]' value='[SPY_Pred2].[hunOscillator]' />
          <map key='[kHighFibLine]' value='[SPY_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[SPY_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[SPY_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[SPY_Forecast].[kMedFibLine]' />
          <map key='[kPeak]' value='[SPY_TS].[kPeak]' />
          <map key='[kTrough]' value='[SPY_TS].[kTrough]' />
          <map key='[lCMA (SPY_Forecast)]' value='[SPY_Forecast].[lCMA]' />
          <map key='[lCMA]' value='[SPY_TS].[lCMA]' />
          <map key='[lEMA (SPY_TS)]' value='[SPY_TS].[lEMA]' />
          <map key='[lEMA]' value='[SPY_Forecast].[lEMA]' />
          <map key='[lPeak]' value='[SPY_TS].[lPeak]' />
          <map key='[lTrough]' value='[SPY_TS].[lTrough]' />
          <map key='[lagMomentum]' value='[SPY_Forecast].[lagMomentum]' />
          <map key='[mEMA (SPY_TS)]' value='[SPY_TS].[mEMA]' />
          <map key='[mEMA]' value='[SPY_Forecast].[mEMA]' />
          <map key='[momentumA (SPY_Pred2)]' value='[SPY_Pred2].[momentumA]' />
          <map key='[momentumA]' value='[SPY_Forecast].[momentumA]' />
          <map key='[momentumB]' value='[SPY_Pred2].[momentumB]' />
          <map key='[oneKOscillator]' value='[SPY_Pred2].[oneKOscillator]' />
          <map key='[predNextDay (SPY_Pred2)]' value='[SPY_Pred2].[predNextDay]' />
          <map key='[predNextDay]' value='[SPY_Forecast].[predNextDay]' />
          <map key='[sCMA (SPY_Forecast)]' value='[SPY_Forecast].[sCMA]' />
          <map key='[sCMA]' value='[SPY_TS].[sCMA]' />
          <map key='[sEMA (SPY_TS)]' value='[SPY_TS].[sEMA]' />
          <map key='[sEMA]' value='[SPY_Forecast].[sEMA]' />
          <map key='[sPeak (SPY_Pred2)]' value='[SPY_Pred2].[sPeak]' />
          <map key='[sPeak (SPY_TS)]' value='[SPY_TS].[sPeak]' />
          <map key='[sPeak]' value='[SPY_Forecast].[sPeak]' />
          <map key='[sTrough (SPY_Pred2)]' value='[SPY_Pred2].[sTrough]' />
          <map key='[sTrough (SPY_TS)]' value='[SPY_TS].[sTrough]' />
          <map key='[sTrough]' value='[SPY_Forecast].[sTrough]' />
          <map key='[tradeDate (SPY_Act)]' value='[SPY_Act].[tradeDate]' />
          <map key='[tradeDate (SPY_Pred2)]' value='[SPY_Pred2].[tradeDate]' />
          <map key='[tradeDate (SPY_TS)]' value='[SPY_TS].[tradeDate]' />
          <map key='[tradeDate]' value='[SPY_Forecast].[tradeDate]' />
          <map key='[wCMA]' value='[SPY_TS].[wCMA]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA (SPY_Forecast)]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA (SPY_Forecast)]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (SPY_Act)]</local-name>
            <parent-name>[SPY_Act]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice (SPY_Act)]</local-name>
            <parent-name>[SPY_Act]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[CMATradeAction (SPY_Act)]</local-name>
            <parent-name>[SPY_Act]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[FRLTradeAction (SPY_Act)]</local-name>
            <parent-name>[SPY_Act]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>3</remote-type>
            <local-name>[FRL_1K_TradeAction (SPY_Act)]</local-name>
            <parent-name>[SPY_Act]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (SPY_TS)]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>31</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[wCMA]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>wCMA</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough (SPY_TS)]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak (SPY_TS)]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lTrough]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>lTrough</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lPeak]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>lPeak</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kTrough]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>kTrough</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kPeak]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>kPeak</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA (SPY_TS)]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA (SPY_TS)]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA (SPY_TS)]</local-name>
            <parent-name>[SPY_TS]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>45</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumB</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumB]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>momentumB</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>3</remote-type>
            <local-name>[predNextDay (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>51</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos (SPY_Pred2)]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hunOscillator</remote-name>
            <remote-type>5</remote-type>
            <local-name>[hunOscillator]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>hunOscillator</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>oneKOscillator</remote-name>
            <remote-type>5</remote-type>
            <local-name>[oneKOscillator]</local-name>
            <parent-name>[SPY_Pred2]</parent-name>
            <remote-alias>oneKOscillator</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CMATradeAction (SPY Act)' datatype='integer' name='[CMATradeAction (SPY_Act)]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRLTradeAction (SPY Act)' datatype='integer' name='[FRLTradeAction (SPY_Act)]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction (SPY Act)' datatype='integer' name='[FRL_1K_TradeAction (SPY_Act)]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='closePrice (SPY Act)' datatype='real' name='[closePrice (SPY_Act)]' role='measure' type='quantitative' />
      <column caption='closePrice (SPY Pred2)' datatype='real' name='[closePrice (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='fibExtHighNeg (SPY Pred2)' datatype='real' name='[fibExtHighNeg (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='fibExtHighPos (SPY Pred2)' datatype='real' name='[fibExtHighPos (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='fibExtLowNeg (SPY Pred2)' datatype='real' name='[fibExtLowNeg (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='fibExtLowPos (SPY Pred2)' datatype='real' name='[fibExtLowPos (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='Hun Oscillator' datatype='real' name='[hunOscillator]' role='measure' type='quantitative' />
      <column caption='K Peak' datatype='real' name='[kPeak]' role='measure' type='quantitative' />
      <column caption='K Trough' datatype='real' name='[kTrough]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='L Peak' datatype='real' name='[lPeak]' role='measure' type='quantitative' />
      <column caption='L Trough' datatype='real' name='[lTrough]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='momentumA (SPY Pred2)' datatype='real' name='[momentumA (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Momentum B' datatype='real' name='[momentumB]' role='measure' type='quantitative' />
      <column caption='One K Oscillator' datatype='real' name='[oneKOscillator]' role='measure' type='quantitative' />
      <column caption='predNextDay (SPY Pred2)' datatype='integer' name='[predNextDay (SPY_Pred2)]' role='dimension' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='sPeak (SPY Pred2)' datatype='real' name='[sPeak (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='sPeak (SPY TS)' datatype='real' name='[sPeak (SPY_TS)]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='sTrough (SPY Pred2)' datatype='real' name='[sTrough (SPY_Pred2)]' role='measure' type='quantitative' />
      <column caption='sTrough (SPY TS)' datatype='real' name='[sTrough (SPY_TS)]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (SPY Act)' datatype='date' name='[tradeDate (SPY_Act)]' role='dimension' type='ordinal' />
      <column caption='tradeDate (SPY Pred2)' datatype='date' name='[tradeDate (SPY_Pred2)]' role='dimension' type='ordinal' />
      <column caption='tradeDate (SPY TS)' datatype='date' name='[tradeDate (SPY_TS)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column caption='W Cma' datatype='real' name='[wCMA]' role='measure' type='quantitative' />
      <column-instance column='[SPY Buy FRL]' derivation='InOut' name='[io:SPY Buy FRL:nk]' pivot='key' type='nominal' />
      <column-instance column='[SPY Buy]' derivation='InOut' name='[io:SPY Buy:nk]' pivot='key' type='nominal' />
      <column-instance column='[SPY Sell FRL]' derivation='InOut' name='[io:SPY Sell FRL:nk]' pivot='key' type='nominal' />
      <column-instance column='[SPY Sell]' derivation='InOut' name='[io:SPY Sell:nk]' pivot='key' type='nominal' />
      <column-instance column='[CMATradeAction (SPY_Act)]' derivation='Sum' name='[sum:CMATradeAction (SPY_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction (SPY_Act)]' derivation='Sum' name='[sum:FRLTradeAction (SPY_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction (SPY_Act)]' derivation='Sum' name='[sum:FRL_1K_TradeAction (SPY_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice (SPY_Act)]' derivation='Sum' name='[sum:closePrice (SPY_Act):qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighNeg (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtHighNeg (SPY_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighNeg]' derivation='Sum' name='[sum:fibExtHighNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighPos (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtHighPos (SPY_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighPos]' derivation='Sum' name='[sum:fibExtHighPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowNeg (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtLowNeg (SPY_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowNeg]' derivation='Sum' name='[sum:fibExtLowNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowPos (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtLowPos (SPY_Pred2):qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowPos]' derivation='Sum' name='[sum:fibExtLowPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[kPeak]' derivation='Sum' name='[sum:kPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[kTrough]' derivation='Sum' name='[sum:kTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lCMA]' derivation='Sum' name='[sum:lCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lPeak]' derivation='Sum' name='[sum:lPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lTrough]' derivation='Sum' name='[sum:lTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sCMA]' derivation='Sum' name='[sum:sCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sPeak]' derivation='Sum' name='[sum:sPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sTrough]' derivation='Sum' name='[sum:sTrough:qk]' pivot='key' type='quantitative' />
      <column-instance column='[wCMA]' derivation='Sum' name='[sum:wCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[SPY Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-04-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-04-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-04-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-04-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-10-29 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[SPY Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-28 00:00:00#' />
          <groupfilter from='#2014-05-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-05-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-20 00:00:00#' />
          <groupfilter from='#2014-06-12 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-06-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-06-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-17 00:00:00#' />
          <groupfilter from='#2014-07-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-08-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-15 00:00:00#' />
          <groupfilter from='#2014-09-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-01 00:00:00#' />
          <groupfilter from='#2014-12-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-12-17 00:00:00#' />
          <groupfilter from='#2014-12-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-07 00:00:00#' />
          <groupfilter from='#2015-01-12 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-02-27 00:00:00#' />
          <groupfilter from='#2015-03-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-13 00:00:00#' />
          <groupfilter from='#2015-03-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-31 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-04-30 00:00:00#' />
          <groupfilter from='#2015-05-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-05-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-26 00:00:00#' />
          <groupfilter from='#2015-05-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-02 00:00:00#' />
          <groupfilter from='#2015-06-04 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-15 00:00:00#' />
          <groupfilter from='#2015-06-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-07-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-07-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-07-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-07-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-19 00:00:00#' />
          <groupfilter from='#2015-11-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-11-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-11-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-03 00:00:00#' />
          <groupfilter from='#2015-12-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-12-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-31 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-03-10 00:00:00#' />
          <groupfilter from='#2016-03-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-03-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-04-05 00:00:00#' />
          <groupfilter from='#2016-04-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-04-11 00:00:00#' />
          <groupfilter from='#2016-04-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-04-26 00:00:00#' />
          <groupfilter from='#2016-04-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-05-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-05-13 00:00:00#' />
          <groupfilter from='#2016-05-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-05-19 00:00:00#' />
          <groupfilter from='#2016-06-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-06-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-06-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-07-27 00:00:00#' />
          <groupfilter from='#2016-08-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-22 00:00:00#' />
          <groupfilter from='#2016-08-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-26 00:00:00#' />
          <groupfilter from='#2016-08-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-01 00:00:00#' />
          <groupfilter from='#2016-09-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-07 00:00:00#' />
          <groupfilter from='#2016-10-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-10-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-26 00:00:00#' />
          <groupfilter from='#2016-11-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-12-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-22 00:00:00#' />
          <groupfilter from='#2016-12-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-12-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-23 00:00:00#' />
          <groupfilter from='#2017-01-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-02-02 00:00:00#' />
          <groupfilter from='#2017-03-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-14 00:00:00#' />
          <groupfilter from='#2017-03-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-27 00:00:00#' />
          <groupfilter from='#2017-04-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-07 00:00:00#' />
          <groupfilter from='#2017-04-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-12 00:00:00#' />
          <groupfilter from='#2017-05-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-16 00:00:00#' />
          <groupfilter from='#2017-06-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-06-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-27 00:00:00#' />
          <groupfilter from='#2017-06-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-07-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-31 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-03 00:00:00#' />
          <groupfilter from='#2017-08-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-08-11 00:00:00#' />
          <groupfilter from='#2017-08-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-08-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-09-08 00:00:00#' />
          <groupfilter from='#2017-09-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-09-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-26 00:00:00#' />
          <groupfilter from='#2017-11-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-11-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-11-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-29 00:00:00#' />
          <groupfilter from='#2018-01-30 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-02-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-22 00:00:00#' />
          <groupfilter from='#2018-02-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-03-05 00:00:00#' />
          <groupfilter from='#2018-03-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-03-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-31 00:00:00#' />
          <groupfilter from='#2018-06-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-06-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-20 00:00:00#' />
          <groupfilter from='#2018-07-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-01 00:00:00#' />
          <groupfilter from='#2018-08-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-15 00:00:00#' />
          <groupfilter from='#2018-09-04 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-10 00:00:00#' />
          <groupfilter from='#2018-09-26 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-28 00:00:00#' />
          <groupfilter from='#2018-10-04 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-10-15 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[SPY Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-02-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-02-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-02-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-10-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-01-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-02-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-10-31 00:00:00#' />
        </groupfilter>
      </group>
      <group name='[SPY Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-04-11 00:00:00#' />
          <groupfilter from='#2014-04-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-04-24 00:00:00#' />
          <groupfilter from='#2014-04-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-05-05 00:00:00#' />
          <groupfilter from='#2014-05-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-05-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-05-19 00:00:00#' />
          <groupfilter from='#2014-05-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-06-11 00:00:00#' />
          <groupfilter from='#2014-06-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-06-23 00:00:00#' />
          <groupfilter from='#2014-06-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-07-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-07-09 00:00:00#' />
          <groupfilter from='#2014-07-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-07-16 00:00:00#' />
          <groupfilter from='#2014-07-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-07-25 00:00:00#' />
          <groupfilter from='#2014-08-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-09-11 00:00:00#' />
          <groupfilter from='#2014-09-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-09-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2014-10-08 00:00:00#' />
          <groupfilter from='#2014-10-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-11-28 00:00:00#' />
          <groupfilter from='#2014-12-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-05 00:00:00#' />
          <groupfilter from='#2014-12-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2014-12-29 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-01-09 00:00:00#' />
          <groupfilter from='#2015-01-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-01-26 00:00:00#' />
          <groupfilter from='#2015-02-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-02-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-02 00:00:00#' />
          <groupfilter from='#2015-03-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-03-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-03-30 00:00:00#' />
          <groupfilter from='#2015-04-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-16 00:00:00#' />
          <groupfilter from='#2015-04-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-04-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-04 00:00:00#' />
          <groupfilter from='#2015-05-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-05-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-05-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-03 00:00:00#' />
          <groupfilter from='#2015-06-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-12 00:00:00#' />
          <groupfilter from='#2015-06-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-06-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-06-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-07-01 00:00:00#' />
          <groupfilter from='#2015-07-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-07-21 00:00:00#' />
          <groupfilter from='#2015-07-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-08-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-10 00:00:00#' />
          <groupfilter from='#2015-08-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-08-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-20 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-08-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-09-25 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-09-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-10-19 00:00:00#' />
          <groupfilter from='#2015-10-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-11-06 00:00:00#' />
          <groupfilter from='#2015-11-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-11-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2015-12-17 00:00:00#' />
          <groupfilter from='#2015-12-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2015-12-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-01-07 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-02-09 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-02-10 00:00:00#' />
          <groupfilter from='#2016-03-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-03-07 00:00:00#' />
          <groupfilter from='#2016-03-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-03-22 00:00:00#' />
          <groupfilter from='#2016-03-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-04-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-04-06 00:00:00#' />
          <groupfilter from='#2016-04-12 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-04-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-04-27 00:00:00#' />
          <groupfilter from='#2016-05-10 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-05-12 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-05-16 00:00:00#' />
          <groupfilter from='#2016-05-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-06-09 00:00:00#' />
          <groupfilter from='#2016-06-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-06-23 00:00:00#' />
          <groupfilter from='#2016-06-29 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-07-26 00:00:00#' />
          <groupfilter from='#2016-07-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-01 00:00:00#' />
          <groupfilter from='#2016-08-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-08-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-17 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-08-29 00:00:00#' />
          <groupfilter from='#2016-09-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-08 00:00:00#' />
          <groupfilter from='#2016-09-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-09-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-09-30 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-05 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-06 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-10-10 00:00:00#' />
          <groupfilter from='#2016-10-18 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-10-25 00:00:00#' />
          <groupfilter from='#2016-11-08 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-11-29 00:00:00#' />
          <groupfilter from='#2016-12-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-12-15 00:00:00#' />
          <groupfilter from='#2016-12-19 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2016-12-21 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2016-12-27 00:00:00#' />
          <groupfilter from='#2017-01-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-01-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-18 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-01-20 00:00:00#' />
          <groupfilter from='#2017-01-24 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-01-27 00:00:00#' />
          <groupfilter from='#2017-02-03 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-03-13 00:00:00#' />
          <groupfilter from='#2017-03-15 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-03-17 00:00:00#' />
          <groupfilter from='#2017-03-28 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-04-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-04-10 00:00:00#' />
          <groupfilter from='#2017-04-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-02 00:00:00#' />
          <groupfilter from='#2017-05-04 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-05-11 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-05-16 00:00:00#' />
          <groupfilter from='#2017-05-22 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-06-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-14 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-19 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-23 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-26 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-06-28 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-07-05 00:00:00#' />
          <groupfilter from='#2017-07-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-07-27 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-01 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-02 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-04 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-07 00:00:00#' />
          <groupfilter from='#2017-08-14 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-08-16 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-08-22 00:00:00#' />
          <groupfilter from='#2017-08-25 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-09-07 00:00:00#' />
          <groupfilter from='#2017-09-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-09-20 00:00:00#' />
          <groupfilter from='#2017-09-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-10-24 00:00:00#' />
          <groupfilter from='#2017-10-27 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-11-08 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-11-16 00:00:00#' />
          <groupfilter from='#2017-11-20 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-04 00:00:00#' />
          <groupfilter from='#2017-12-07 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2017-12-22 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2017-12-28 00:00:00#' />
          <groupfilter from='#2018-01-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-01-29 00:00:00#' />
          <groupfilter from='#2018-02-13 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-02-21 00:00:00#' />
          <groupfilter from='#2018-02-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-02-27 00:00:00#' />
          <groupfilter from='#2018-03-06 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-03-13 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-03-22 00:00:00#' />
          <groupfilter from='#2018-04-17 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-04-19 00:00:00#' />
          <groupfilter from='#2018-05-09 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-05-17 00:00:00#' />
          <groupfilter from='#2018-05-21 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-05-24 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-05-30 00:00:00#' />
          <groupfilter from='#2018-06-01 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-06-15 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-07-02 00:00:00#' />
          <groupfilter from='#2018-07-05 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-19 00:00:00#' />
          <groupfilter from='#2018-07-23 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-07-26 00:00:00#' />
          <groupfilter from='#2018-08-02 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-09 00:00:00#' />
          <groupfilter from='#2018-08-16 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-08-31 00:00:00#' />
          <groupfilter from='#2018-09-11 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-09-25 00:00:00#' />
          <groupfilter from='#2018-10-01 00:00:00#' function='range' level='[tdy:tradeDate:qk]' to='#2018-10-03 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-10-10 00:00:00#' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='#2018-11-07 00:00:00#' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.373134' group-percentage='0.308458' measure-ordering='alphabetic' measure-percentage='0.318408' rowDisplayCount='1500' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[io:SPY Buy:nk]&#10;[io:SPY Sell:nk]' type='palette'>
            <map to='#59a14f'>
              <multibucket>
                <bucket>true</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#bab0ac'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#e15759'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>true</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:CMATradeAction (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighNeg (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighPos (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:FRLTradeAction (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowNeg (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowPos (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:FRL_1K_TradeAction (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lCMA:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:SPY Buy FRL:nk]&#10;[io:SPY Sell FRL:nk]' type='palette'>
            <map to='#59a14f'>
              <multibucket>
                <bucket>true</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#bab0ac'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>false</bucket>
              </multibucket>
            </map>
            <map to='#e15759'>
              <multibucket>
                <bucket>false</bucket>
                <bucket>true</bucket>
              </multibucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='PFE_EMA+ (GMFSP_db) ' inline='true' name='federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf (copy)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf (copy)' name='PFE_EMAAction' table='[dbo].[PFE_EMAAction]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentum]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>momentum</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sigLong</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sigLong]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>sigLong</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sigMid</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sigMid]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>sigMid</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EMASignal</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EMASignal]</local-name>
            <parent-name>[PFE_EMAAction]</parent-name>
            <remote-alias>EMASignal</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='EMA Signal' datatype='real' name='[EMASignal]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='L Ema' datatype='real' name='[lEMA]' role='measure' type='quantitative' />
      <column caption='M Ema' datatype='real' name='[mEMA]' role='measure' type='quantitative' />
      <column caption='Momentum' datatype='real' name='[momentum]' role='measure' type='quantitative' />
      <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
      <column caption='Sig Long' datatype='real' name='[sigLong]' role='measure' type='quantitative' />
      <column caption='Sig Mid' datatype='real' name='[sigMid]' role='measure' type='quantitative' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[EMASignal]' derivation='Sum' name='[sum:EMASignal:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lEMA]' derivation='Sum' name='[sum:lEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[mEMA]' derivation='Sum' name='[sum:mEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[PFE Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[PFE Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
        </groupfilter>
      </group>
      <group name='[PFE Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[PFE Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.184' group-percentage='0.256' measure-ordering='alphabetic' measure-percentage='0.56' rowDisplayCount='1500' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:closePrice (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sPeak (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:EMASignal:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:FRL_1K_TradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sEMA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sTrough (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:closePrice (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtHighNeg (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtHighPos (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sTrough (PFE_TS):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:momentumA (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtLowNeg (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:fibExtLowPos (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:hunOscillator:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sPeak (PFE_TS):qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:mEMA:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:momentumB:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:CMATradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:lEMA:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:oneKOscillator:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:FRLTradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
    <datasource caption='PFE_Trades+ (GMFSP_db)' inline='true' name='federated.1xqnrhc05bcv3218go6rz1re346j' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[PFE_Forecast].[tradeDate]' />
              <expression op='[PFE_Trades].[tradeDate]' />
            </expression>
          </clause>
          <relation connection='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4' name='PFE_Forecast' table='[dbo].[PFE_Forecast]' type='table' />
          <relation connection='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4' name='PFE_Trades' table='[dbo].[PFE_Trades]' type='table' />
        </relation>
        <cols>
          <map key='[Act]' value='[PFE_Trades].[Act]' />
          <map key='[BuyingPower]' value='[PFE_Trades].[BuyingPower]' />
          <map key='[CMATradeAction]' value='[PFE_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction]' value='[PFE_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[PFE_Forecast].[FRL_1K_TradeAction]' />
          <map key='[PortfolioValue]' value='[PFE_Trades].[PortfolioValue]' />
          <map key='[PositionsHeld]' value='[PFE_Trades].[PositionsHeld]' />
          <map key='[Price]' value='[PFE_Trades].[Price]' />
          <map key='[Qty]' value='[PFE_Trades].[Qty]' />
          <map key='[closePrice]' value='[PFE_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg]' value='[PFE_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos]' value='[PFE_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg]' value='[PFE_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos]' value='[PFE_Forecast].[fibExtLowPos]' />
          <map key='[kHighFibLine]' value='[PFE_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[PFE_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[PFE_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[PFE_Forecast].[kMedFibLine]' />
          <map key='[lCMA]' value='[PFE_Forecast].[lCMA]' />
          <map key='[lEMA]' value='[PFE_Forecast].[lEMA]' />
          <map key='[lagMomentum]' value='[PFE_Forecast].[lagMomentum]' />
          <map key='[mEMA]' value='[PFE_Forecast].[mEMA]' />
          <map key='[momentumA]' value='[PFE_Forecast].[momentumA]' />
          <map key='[predNextDay]' value='[PFE_Forecast].[predNextDay]' />
          <map key='[sCMA]' value='[PFE_Forecast].[sCMA]' />
          <map key='[sEMA]' value='[PFE_Forecast].[sEMA]' />
          <map key='[sPeak]' value='[PFE_Forecast].[sPeak]' />
          <map key='[sTrough]' value='[PFE_Forecast].[sTrough]' />
          <map key='[tradeDate (PFE_Trades)]' value='[PFE_Trades].[tradeDate]' />
          <map key='[tradeDate]' value='[PFE_Forecast].[tradeDate]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (PFE_Trades)]</local-name>
            <parent-name>[PFE_Trades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[PFE_Trades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[PFE_Trades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[PFE_Trades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[PFE_Trades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[PFE_Trades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[PFE_Trades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='K High Fib Line' datatype='real' name='[kHighFibLine]' role='measure' type='quantitative' />
      <column caption='K Low Fib Line' datatype='real' name='[kLowFibLine]' role='measure' type='quantitative' />
      <column caption='K Max Fib Line' datatype='real' name='[kMaxFibLine]' role='measure' type='quantitative' />
      <column caption='K Med Fib Line' datatype='real' name='[kMedFibLine]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (PFE Trades)' datatype='date' name='[tradeDate (PFE_Trades)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.630522' measure-ordering='alphabetic' measure-percentage='0.369478' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='XPH_Vol_Trades+ (GMFSP_db)' inline='true' name='federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.00m0daz03ykzri16ezp800wr0u5r (copy)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[XPH_Forecast].[tradeDate]' />
              <expression op='[XPH_VolTrades].[tradeDate]' />
            </expression>
          </clause>
          <relation connection='sqlserver.00m0daz03ykzri16ezp800wr0u5r (copy)' name='XPH_Forecast' table='[dbo].[XPH_Forecast]' type='table' />
          <relation connection='sqlserver.00m0daz03ykzri16ezp800wr0u5r (copy)' name='XPH_VolTrades' table='[dbo].[XPH_VolTrades]' type='table' />
        </relation>
        <cols>
          <map key='[Act]' value='[XPH_VolTrades].[Act]' />
          <map key='[BuyingPower]' value='[XPH_VolTrades].[BuyingPower]' />
          <map key='[CMATradeAction]' value='[XPH_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction]' value='[XPH_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[XPH_Forecast].[FRL_1K_TradeAction]' />
          <map key='[PortfolioValue]' value='[XPH_VolTrades].[PortfolioValue]' />
          <map key='[PositionsHeld]' value='[XPH_VolTrades].[PositionsHeld]' />
          <map key='[Price]' value='[XPH_VolTrades].[Price]' />
          <map key='[Qty]' value='[XPH_VolTrades].[Qty]' />
          <map key='[closePrice]' value='[XPH_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg]' value='[XPH_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos]' value='[XPH_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg]' value='[XPH_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos]' value='[XPH_Forecast].[fibExtLowPos]' />
          <map key='[kHighFibLine]' value='[XPH_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[XPH_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[XPH_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[XPH_Forecast].[kMedFibLine]' />
          <map key='[lCMA]' value='[XPH_Forecast].[lCMA]' />
          <map key='[lEMA]' value='[XPH_Forecast].[lEMA]' />
          <map key='[lagMomentum]' value='[XPH_Forecast].[lagMomentum]' />
          <map key='[mEMA]' value='[XPH_Forecast].[mEMA]' />
          <map key='[momentumA]' value='[XPH_Forecast].[momentumA]' />
          <map key='[predNextDay]' value='[XPH_Forecast].[predNextDay]' />
          <map key='[sCMA]' value='[XPH_Forecast].[sCMA]' />
          <map key='[sEMA]' value='[XPH_Forecast].[sEMA]' />
          <map key='[sPeak]' value='[XPH_Forecast].[sPeak]' />
          <map key='[sTrough]' value='[XPH_Forecast].[sTrough]' />
          <map key='[tradeDate (XPH_VolTrades)]' value='[XPH_VolTrades].[tradeDate]' />
          <map key='[tradeDate]' value='[XPH_Forecast].[tradeDate]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (XPH_VolTrades)]</local-name>
            <parent-name>[XPH_VolTrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[XPH_VolTrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[XPH_VolTrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[XPH_VolTrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[XPH_VolTrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[XPH_VolTrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[XPH_VolTrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='K High Fib Line' datatype='real' name='[kHighFibLine]' role='measure' type='quantitative' />
      <column caption='K Low Fib Line' datatype='real' name='[kLowFibLine]' role='measure' type='quantitative' />
      <column caption='K Max Fib Line' datatype='real' name='[kMaxFibLine]' role='measure' type='quantitative' />
      <column caption='K Med Fib Line' datatype='real' name='[kMedFibLine]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (XPH VolTrades)' datatype='date' name='[tradeDate (XPH_VolTrades)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.451754' measure-ordering='alphabetic' measure-percentage='0.548246' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='SPY_EMA+ (GMFSP_db) ' inline='true' name='federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.0a1rbp114rouih1gfm94b0j0aah5 (copy)'>
            <connection authentication='sqlserver' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' username='sa' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.0a1rbp114rouih1gfm94b0j0aah5 (copy)' name='SPY_EMAAction' table='[dbo].[SPY_EMAAction]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentum]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>momentum</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sigLong</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sigLong]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>sigLong</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sigMid</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sigMid]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>sigMid</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EMASignal</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EMASignal]</local-name>
            <parent-name>[SPY_EMAAction]</parent-name>
            <remote-alias>EMASignal</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='EMA Signal' datatype='real' name='[EMASignal]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='L Ema' datatype='real' name='[lEMA]' role='measure' type='quantitative' />
      <column caption='M Ema' datatype='real' name='[mEMA]' role='measure' type='quantitative' />
      <column caption='Momentum' datatype='real' name='[momentum]' role='measure' type='quantitative' />
      <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
      <column caption='Sig Long' datatype='real' name='[sigLong]' role='measure' type='quantitative' />
      <column caption='Sig Mid' datatype='real' name='[sigMid]' role='measure' type='quantitative' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[EMASignal]' derivation='Sum' name='[sum:EMASignal:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lEMA]' derivation='Sum' name='[sum:lEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[mEMA]' derivation='Sum' name='[sum:mEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[SPY Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[SPY Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[SPY Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[SPY Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.333333' group-percentage='0.333333' measure-ordering='alphabetic' measure-percentage='0.333333' rowDisplayCount='1500' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:sEMA:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:closePrice (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:EMASignal:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:CMATradeAction (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtHighNeg (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtHighPos (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:pricePred:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:FRLTradeAction (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtLowNeg (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:fibExtLowPos (SPY_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:FRL_1K_TradeAction (SPY_Act):qk]&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:mEMA:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:lEMA:qk]&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:lCMA:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='PFE_Vol_Trades+ (GMFSP_db)' inline='true' name='federated.1xqnrhc05bcv3218go6rz1re346j (copy)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4 (copy)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[PFE_Forecast].[tradeDate]' />
              <expression op='[PFE_VolTrades].[tradeDate]' />
            </expression>
          </clause>
          <relation connection='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4 (copy)' name='PFE_Forecast' table='[dbo].[PFE_Forecast]' type='table' />
          <relation connection='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4 (copy)' name='PFE_VolTrades' table='[dbo].[PFE_VolTrades]' type='table' />
        </relation>
        <cols>
          <map key='[Act]' value='[PFE_VolTrades].[Act]' />
          <map key='[BuyingPower]' value='[PFE_VolTrades].[BuyingPower]' />
          <map key='[CMATradeAction]' value='[PFE_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction]' value='[PFE_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[PFE_Forecast].[FRL_1K_TradeAction]' />
          <map key='[PortfolioValue]' value='[PFE_VolTrades].[PortfolioValue]' />
          <map key='[PositionsHeld]' value='[PFE_VolTrades].[PositionsHeld]' />
          <map key='[Price]' value='[PFE_VolTrades].[Price]' />
          <map key='[Qty]' value='[PFE_VolTrades].[Qty]' />
          <map key='[closePrice]' value='[PFE_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg]' value='[PFE_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos]' value='[PFE_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg]' value='[PFE_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos]' value='[PFE_Forecast].[fibExtLowPos]' />
          <map key='[kHighFibLine]' value='[PFE_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[PFE_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[PFE_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[PFE_Forecast].[kMedFibLine]' />
          <map key='[lCMA]' value='[PFE_Forecast].[lCMA]' />
          <map key='[lEMA]' value='[PFE_Forecast].[lEMA]' />
          <map key='[lagMomentum]' value='[PFE_Forecast].[lagMomentum]' />
          <map key='[mEMA]' value='[PFE_Forecast].[mEMA]' />
          <map key='[momentumA]' value='[PFE_Forecast].[momentumA]' />
          <map key='[predNextDay]' value='[PFE_Forecast].[predNextDay]' />
          <map key='[sCMA]' value='[PFE_Forecast].[sCMA]' />
          <map key='[sEMA]' value='[PFE_Forecast].[sEMA]' />
          <map key='[sPeak]' value='[PFE_Forecast].[sPeak]' />
          <map key='[sTrough]' value='[PFE_Forecast].[sTrough]' />
          <map key='[tradeDate (PFE_VolTrades)]' value='[PFE_VolTrades].[tradeDate]' />
          <map key='[tradeDate]' value='[PFE_Forecast].[tradeDate]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[PFE_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (PFE_VolTrades)]</local-name>
            <parent-name>[PFE_VolTrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[PFE_VolTrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[PFE_VolTrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[PFE_VolTrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[PFE_VolTrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[PFE_VolTrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[PFE_VolTrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='K High Fib Line' datatype='real' name='[kHighFibLine]' role='measure' type='quantitative' />
      <column caption='K Low Fib Line' datatype='real' name='[kLowFibLine]' role='measure' type='quantitative' />
      <column caption='K Max Fib Line' datatype='real' name='[kMaxFibLine]' role='measure' type='quantitative' />
      <column caption='K Med Fib Line' datatype='real' name='[kMedFibLine]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (PFE VolTrades)' datatype='date' name='[tradeDate (PFE_VolTrades)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.631579' measure-ordering='alphabetic' measure-percentage='0.368421' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='XPH_Trades+ (GMFSP_db)' inline='true' name='federated.1ltcvo70dg2nrj15t3aym06x0ri6' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.00m0daz03ykzri16ezp800wr0u5r'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[XPH_Forecast].[tradeDate]' />
              <expression op='[XPH_Trades].[tradeDate]' />
            </expression>
          </clause>
          <relation connection='sqlserver.00m0daz03ykzri16ezp800wr0u5r' name='XPH_Forecast' table='[dbo].[XPH_Forecast]' type='table' />
          <relation connection='sqlserver.00m0daz03ykzri16ezp800wr0u5r' name='XPH_Trades' table='[dbo].[XPH_Trades]' type='table' />
        </relation>
        <cols>
          <map key='[Act]' value='[XPH_Trades].[Act]' />
          <map key='[BuyingPower]' value='[XPH_Trades].[BuyingPower]' />
          <map key='[CMATradeAction]' value='[XPH_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction]' value='[XPH_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[XPH_Forecast].[FRL_1K_TradeAction]' />
          <map key='[PortfolioValue]' value='[XPH_Trades].[PortfolioValue]' />
          <map key='[PositionsHeld]' value='[XPH_Trades].[PositionsHeld]' />
          <map key='[Price]' value='[XPH_Trades].[Price]' />
          <map key='[Qty]' value='[XPH_Trades].[Qty]' />
          <map key='[closePrice]' value='[XPH_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg]' value='[XPH_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos]' value='[XPH_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg]' value='[XPH_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos]' value='[XPH_Forecast].[fibExtLowPos]' />
          <map key='[kHighFibLine]' value='[XPH_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[XPH_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[XPH_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[XPH_Forecast].[kMedFibLine]' />
          <map key='[lCMA]' value='[XPH_Forecast].[lCMA]' />
          <map key='[lEMA]' value='[XPH_Forecast].[lEMA]' />
          <map key='[lagMomentum]' value='[XPH_Forecast].[lagMomentum]' />
          <map key='[mEMA]' value='[XPH_Forecast].[mEMA]' />
          <map key='[momentumA]' value='[XPH_Forecast].[momentumA]' />
          <map key='[predNextDay]' value='[XPH_Forecast].[predNextDay]' />
          <map key='[sCMA]' value='[XPH_Forecast].[sCMA]' />
          <map key='[sEMA]' value='[XPH_Forecast].[sEMA]' />
          <map key='[sPeak]' value='[XPH_Forecast].[sPeak]' />
          <map key='[sTrough]' value='[XPH_Forecast].[sTrough]' />
          <map key='[tradeDate (XPH_Trades)]' value='[XPH_Trades].[tradeDate]' />
          <map key='[tradeDate]' value='[XPH_Forecast].[tradeDate]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[XPH_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (XPH_Trades)]</local-name>
            <parent-name>[XPH_Trades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[XPH_Trades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[XPH_Trades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[XPH_Trades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[XPH_Trades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[XPH_Trades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[XPH_Trades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='K High Fib Line' datatype='real' name='[kHighFibLine]' role='measure' type='quantitative' />
      <column caption='K Low Fib Line' datatype='real' name='[kLowFibLine]' role='measure' type='quantitative' />
      <column caption='K Max Fib Line' datatype='real' name='[kMaxFibLine]' role='measure' type='quantitative' />
      <column caption='K Med Fib Line' datatype='real' name='[kMedFibLine]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (XPH Trades)' datatype='date' name='[tradeDate (XPH_Trades)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.564885' measure-ordering='alphabetic' measure-percentage='0.435115' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='XPH_StorePred' inline='true' name='federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp (copy 2)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp (copy 2)' name='XPH_predHist' table='[dbo].[XPH_predHist]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[XPH_predHist]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[XPH_predHist]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pricePred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pricePred]</local-name>
            <parent-name>[XPH_predHist]</parent-name>
            <remote-alias>pricePred</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predError</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predError]</local-name>
            <parent-name>[XPH_predHist]</parent-name>
            <remote-alias>predError</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>baseError</remote-name>
            <remote-type>5</remote-type>
            <local-name>[baseError]</local-name>
            <parent-name>[XPH_predHist]</parent-name>
            <remote-alias>baseError</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[XPH_predHist]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[sentiment]</local-name>
            <parent-name>[XPH_predHist]</parent-name>
            <remote-alias>sentiment</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>5</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Base Error' datatype='real' name='[baseError]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Pred Error' datatype='real' name='[predError]' role='measure' type='quantitative' />
      <column caption='Price Pred' datatype='real' name='[pricePred]' role='measure' type='quantitative' />
      <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
      <column caption='Sentiment' datatype='string' name='[sentiment]' role='dimension' type='nominal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[pricePred]' derivation='Sum' name='[sum:pricePred:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[XPH Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[XPH Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[XPH Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[XPH Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.320611' group-percentage='0.374046' measure-ordering='alphabetic' measure-percentage='0.305344' rowDisplayCount='1500' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:sEMA:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:closePrice (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:FRL_1K_TradeAction (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtHighNeg (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtHighPos (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:FRLTradeAction (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtLowNeg (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:fibExtLowPos (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:pricePred:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:lCMA:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='XPH_EMA+ (GMFSP_db) ' inline='true' name='federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp (copy)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1eb6xnk06lwo4y17iz9vp1iwq5xp (copy)' name='XPH_EMAAction' table='[dbo].[XPH_EMAAction]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentum]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>momentum</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sigLong</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sigLong]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>sigLong</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sigMid</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sigMid]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>sigMid</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>EMASignal</remote-name>
            <remote-type>5</remote-type>
            <local-name>[EMASignal]</local-name>
            <parent-name>[XPH_EMAAction]</parent-name>
            <remote-alias>EMASignal</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='EMA Signal' datatype='real' name='[EMASignal]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='L Ema' datatype='real' name='[lEMA]' role='measure' type='quantitative' />
      <column caption='M Ema' datatype='real' name='[mEMA]' role='measure' type='quantitative' />
      <column caption='Momentum' datatype='real' name='[momentum]' role='measure' type='quantitative' />
      <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
      <column caption='Sig Long' datatype='real' name='[sigLong]' role='measure' type='quantitative' />
      <column caption='Sig Mid' datatype='real' name='[sigMid]' role='measure' type='quantitative' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[EMASignal]' derivation='Sum' name='[sum:EMASignal:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lEMA]' derivation='Sum' name='[sum:lEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[mEMA]' derivation='Sum' name='[sum:mEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[XPH Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[XPH Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[XPH Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[XPH Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.291139' group-percentage='0.291139' measure-ordering='alphabetic' measure-percentage='0.417722' rowDisplayCount='1500' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:sEMA:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:closePrice (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:EMASignal:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:FRL_1K_TradeAction (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtHighNeg (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtHighPos (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:FRLTradeAction (XPH_Act):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtLowNeg (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:fibExtLowPos (XPH_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:mEMA:qk]&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:lEMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:lCMA:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='PFE_StorePred' inline='true' name='federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf (copy 2)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1b5ob9x1v1ypvg1a6ma461muzgaf (copy 2)' name='PFE_predHist' table='[dbo].[PFE_predHist]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[PFE_predHist]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[PFE_predHist]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pricePred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pricePred]</local-name>
            <parent-name>[PFE_predHist]</parent-name>
            <remote-alias>pricePred</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predError</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predError]</local-name>
            <parent-name>[PFE_predHist]</parent-name>
            <remote-alias>predError</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>baseError</remote-name>
            <remote-type>5</remote-type>
            <local-name>[baseError]</local-name>
            <parent-name>[PFE_predHist]</parent-name>
            <remote-alias>baseError</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[PFE_predHist]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[sentiment]</local-name>
            <parent-name>[PFE_predHist]</parent-name>
            <remote-alias>sentiment</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>5</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Base Error' datatype='real' name='[baseError]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Pred Error' datatype='real' name='[predError]' role='measure' type='quantitative' />
      <column caption='Price Pred' datatype='real' name='[pricePred]' role='measure' type='quantitative' />
      <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
      <column caption='Sentiment' datatype='string' name='[sentiment]' role='dimension' type='nominal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[pricePred]' derivation='Sum' name='[sum:pricePred:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
      <group name='[PFE Buy FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[PFE Buy]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
        </groupfilter>
      </group>
      <group name='[PFE Sell FRL]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
        </groupfilter>
      </group>
      <group name='[PFE Sell]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter function='member' level='[tdy:tradeDate:qk]' member='%null%' />
          <groupfilter from='%null%' function='range' level='[tdy:tradeDate:qk]' to='%null%' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.333333' group-percentage='0.333333' measure-ordering='alphabetic' measure-percentage='0.333333' rowDisplayCount='1500' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:lPeak:qk]&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:closePrice (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sPeak (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:EMASignal:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:FRL_1K_TradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sEMA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sTrough (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:closePrice (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtHighNeg (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtHighPos (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:lTrough:qk]&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:wCMA:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sTrough (PFE_TS):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:momentumA (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:kPeak:qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtLowNeg (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:fibExtLowPos (PFE_Pred2):qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:hunOscillator:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sPeak (PFE_TS):qk]&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:kTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:mEMA:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:momentumB:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:CMATradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:lEMA:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:pricePred:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:oneKOscillator:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:FRLTradeAction (PFE_Act):qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
    <datasource caption='SPY_Vol_Trades+ (GMFSP_db)' inline='true' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[SPY_Forecast].[tradeDate]' />
              <expression op='[SPY_VolTrades].[tradeDate]' />
            </expression>
          </clause>
          <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy)' name='SPY_Forecast' table='[dbo].[SPY_Forecast]' type='table' />
          <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy)' name='SPY_VolTrades' table='[dbo].[SPY_VolTrades]' type='table' />
        </relation>
        <cols>
          <map key='[Act]' value='[SPY_VolTrades].[Act]' />
          <map key='[BuyingPower]' value='[SPY_VolTrades].[BuyingPower]' />
          <map key='[CMATradeAction]' value='[SPY_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction]' value='[SPY_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[SPY_Forecast].[FRL_1K_TradeAction]' />
          <map key='[PortfolioValue]' value='[SPY_VolTrades].[PortfolioValue]' />
          <map key='[PositionsHeld]' value='[SPY_VolTrades].[PositionsHeld]' />
          <map key='[Price]' value='[SPY_VolTrades].[Price]' />
          <map key='[Qty]' value='[SPY_VolTrades].[Qty]' />
          <map key='[closePrice]' value='[SPY_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg]' value='[SPY_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos]' value='[SPY_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg]' value='[SPY_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos]' value='[SPY_Forecast].[fibExtLowPos]' />
          <map key='[kHighFibLine]' value='[SPY_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[SPY_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[SPY_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[SPY_Forecast].[kMedFibLine]' />
          <map key='[lCMA]' value='[SPY_Forecast].[lCMA]' />
          <map key='[lEMA]' value='[SPY_Forecast].[lEMA]' />
          <map key='[lagMomentum]' value='[SPY_Forecast].[lagMomentum]' />
          <map key='[mEMA]' value='[SPY_Forecast].[mEMA]' />
          <map key='[momentumA]' value='[SPY_Forecast].[momentumA]' />
          <map key='[predNextDay]' value='[SPY_Forecast].[predNextDay]' />
          <map key='[sCMA]' value='[SPY_Forecast].[sCMA]' />
          <map key='[sEMA]' value='[SPY_Forecast].[sEMA]' />
          <map key='[sPeak]' value='[SPY_Forecast].[sPeak]' />
          <map key='[sTrough]' value='[SPY_Forecast].[sTrough]' />
          <map key='[tradeDate (SPY_VolTrades)]' value='[SPY_VolTrades].[tradeDate]' />
          <map key='[tradeDate]' value='[SPY_Forecast].[tradeDate]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column datatype='real' name='[Price]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='K High Fib Line' datatype='real' name='[kHighFibLine]' role='measure' type='quantitative' />
      <column caption='K Low Fib Line' datatype='real' name='[kLowFibLine]' role='measure' type='quantitative' />
      <column caption='K Max Fib Line' datatype='real' name='[kMaxFibLine]' role='measure' type='quantitative' />
      <column caption='K Med Fib Line' datatype='real' name='[kMedFibLine]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (SPY VolTrades)' datatype='date' name='[tradeDate (SPY_VolTrades)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[PortfolioValue]' derivation='Attribute' name='[attr:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Count' name='[cnt:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='CountD' name='[ctd:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.478261' measure-ordering='alphabetic' measure-percentage='0.521739' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:BuyingPower:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:Qty:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:PositionsHeld:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[attr:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[cnt:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[ctd:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:PortfolioValue (SPY_VolTrades):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:Price:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='SPY_EMA_Trades+ (GMFSP_db)' inline='true' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 3)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 3)' name='SPY_EMATrades' table='[dbo].[SPY_EMATrades]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_EMATrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[SPY_EMATrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[SPY_EMATrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[SPY_EMATrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[SPY_EMATrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[SPY_EMATrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[SPY_EMATrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column datatype='real' name='[Price]' role='measure' type='quantitative' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.460674' measure-ordering='alphabetic' measure-percentage='0.539326' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:BuyingPower:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:Qty:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PositionsHeld:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[attr:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[cnt:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[ctd:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PortfolioValue (SPY_EMATrades):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PortfolioValue (SPY_VolTrades):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:Price:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='SPY_CMA_Trades+ (GMFSP_db)' inline='true' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 2)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 2)' name='SPY_CMATrades' table='[dbo].[SPY_CMATrades]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_CMATrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[SPY_CMATrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[SPY_CMATrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[SPY_CMATrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[SPY_CMATrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[SPY_CMATrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[SPY_CMATrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column datatype='real' name='[Price]' role='measure' type='quantitative' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[PortfolioValue]' derivation='Attribute' name='[attr:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Count' name='[cnt:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='CountD' name='[ctd:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.47191' measure-ordering='alphabetic' measure-percentage='0.52809' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:BuyingPower:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:Qty:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PositionsHeld:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[attr:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[cnt:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[ctd:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PortfolioValue (SPY_EMATrades):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PortfolioValue (SPY_VolTrades):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:Price:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='SPY_Trades+ (GMFSP_db)' inline='true' name='federated.1yolocj1gjjpwj1fnklko1mci7bl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[SPY_Forecast].[tradeDate]' />
              <expression op='[SPY_VolTrades].[tradeDate]' />
            </expression>
          </clause>
          <relation join='inner' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[SPY_Forecast].[tradeDate]' />
                <expression op='[SPY_Trades].[tradeDate]' />
              </expression>
            </clause>
            <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg' name='SPY_Forecast' table='[dbo].[SPY_Forecast]' type='table' />
            <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg' name='SPY_Trades' table='[dbo].[SPY_Trades]' type='table' />
          </relation>
          <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg' name='SPY_VolTrades' table='[dbo].[SPY_VolTrades]' type='table' />
        </relation>
        <cols>
          <map key='[Act (SPY_VolTrades)]' value='[SPY_VolTrades].[Act]' />
          <map key='[Act]' value='[SPY_Trades].[Act]' />
          <map key='[BuyingPower (SPY_VolTrades)]' value='[SPY_VolTrades].[BuyingPower]' />
          <map key='[BuyingPower]' value='[SPY_Trades].[BuyingPower]' />
          <map key='[CMATradeAction]' value='[SPY_Forecast].[CMATradeAction]' />
          <map key='[FRLTradeAction]' value='[SPY_Forecast].[FRLTradeAction]' />
          <map key='[FRL_1K_TradeAction]' value='[SPY_Forecast].[FRL_1K_TradeAction]' />
          <map key='[PortfolioValue (SPY_VolTrades)]' value='[SPY_VolTrades].[PortfolioValue]' />
          <map key='[PortfolioValue]' value='[SPY_Trades].[PortfolioValue]' />
          <map key='[PositionsHeld (SPY_VolTrades)]' value='[SPY_VolTrades].[PositionsHeld]' />
          <map key='[PositionsHeld]' value='[SPY_Trades].[PositionsHeld]' />
          <map key='[Price (SPY_VolTrades)]' value='[SPY_VolTrades].[Price]' />
          <map key='[Price]' value='[SPY_Trades].[Price]' />
          <map key='[Qty (SPY_VolTrades)]' value='[SPY_VolTrades].[Qty]' />
          <map key='[Qty]' value='[SPY_Trades].[Qty]' />
          <map key='[closePrice]' value='[SPY_Forecast].[closePrice]' />
          <map key='[fibExtHighNeg]' value='[SPY_Forecast].[fibExtHighNeg]' />
          <map key='[fibExtHighPos]' value='[SPY_Forecast].[fibExtHighPos]' />
          <map key='[fibExtLowNeg]' value='[SPY_Forecast].[fibExtLowNeg]' />
          <map key='[fibExtLowPos]' value='[SPY_Forecast].[fibExtLowPos]' />
          <map key='[kHighFibLine]' value='[SPY_Forecast].[kHighFibLine]' />
          <map key='[kLowFibLine]' value='[SPY_Forecast].[kLowFibLine]' />
          <map key='[kMaxFibLine]' value='[SPY_Forecast].[kMaxFibLine]' />
          <map key='[kMedFibLine]' value='[SPY_Forecast].[kMedFibLine]' />
          <map key='[lCMA]' value='[SPY_Forecast].[lCMA]' />
          <map key='[lEMA]' value='[SPY_Forecast].[lEMA]' />
          <map key='[lagMomentum]' value='[SPY_Forecast].[lagMomentum]' />
          <map key='[mEMA]' value='[SPY_Forecast].[mEMA]' />
          <map key='[momentumA]' value='[SPY_Forecast].[momentumA]' />
          <map key='[predNextDay]' value='[SPY_Forecast].[predNextDay]' />
          <map key='[sCMA]' value='[SPY_Forecast].[sCMA]' />
          <map key='[sEMA]' value='[SPY_Forecast].[sEMA]' />
          <map key='[sPeak]' value='[SPY_Forecast].[sPeak]' />
          <map key='[sTrough]' value='[SPY_Forecast].[sTrough]' />
          <map key='[tradeDate (SPY_Trades)]' value='[SPY_Trades].[tradeDate]' />
          <map key='[tradeDate (SPY_VolTrades)]' value='[SPY_VolTrades].[tradeDate]' />
          <map key='[tradeDate]' value='[SPY_Forecast].[tradeDate]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sCMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sCMA</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lCMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lCMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lCMA</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sTrough</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sTrough]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sTrough</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sPeak</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sPeak]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sPeak</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>mEMA</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lEMA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lEMA</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>momentumA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[momentumA]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>momentumA</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predNextDay</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predNextDay]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>predNextDay</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighNeg]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtHighNeg</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowNeg</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowNeg]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtLowNeg</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtHighPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtHighPos]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtHighPos</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fibExtLowPos</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fibExtLowPos]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>fibExtLowPos</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CMATradeAction</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CMATradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>CMATradeAction</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRLTradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRLTradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>FRLTradeAction</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>FRL_1K_TradeAction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[FRL_1K_TradeAction]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>FRL_1K_TradeAction</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lagMomentum</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lagMomentum]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>lagMomentum</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kHighFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kHighFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kHighFibLine</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMedFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMedFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kMedFibLine</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kLowFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kLowFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kLowFibLine</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kMaxFibLine</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kMaxFibLine]</local-name>
            <parent-name>[SPY_Forecast]</parent-name>
            <remote-alias>kMaxFibLine</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (SPY_Trades)]</local-name>
            <parent-name>[SPY_Trades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>25</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[SPY_Trades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[SPY_Trades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[SPY_Trades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[SPY_Trades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[SPY_Trades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[SPY_Trades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>33</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue (SPY_VolTrades)]</local-name>
            <parent-name>[SPY_VolTrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Act (SPY VolTrades)' datatype='string' name='[Act (SPY_VolTrades)]' role='dimension' type='nominal' />
      <column caption='BuyingPower (SPY VolTrades)' datatype='real' name='[BuyingPower (SPY_VolTrades)]' role='measure' type='quantitative' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
      <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
      <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='PortfolioValue (SPY VolTrades)' datatype='real' name='[PortfolioValue (SPY_VolTrades)]' role='measure' type='quantitative' />
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='PositionsHeld (SPY VolTrades)' datatype='real' name='[PositionsHeld (SPY_VolTrades)]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column caption='Price (SPY VolTrades)' datatype='real' name='[Price (SPY_VolTrades)]' role='measure' type='quantitative' />
      <column datatype='real' name='[Price]' role='measure' type='quantitative' />
      <column caption='Qty (SPY VolTrades)' datatype='real' name='[Qty (SPY_VolTrades)]' role='measure' type='quantitative' />
      <column datatype='real' name='[Qty]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
      <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
      <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
      <column caption='Lag Momentum' datatype='real' name='[lagMomentum]' role='measure' type='quantitative' />
      <column caption='Momentum A' datatype='real' name='[momentumA]' role='measure' type='quantitative' />
      <column caption='Pred Next Day' datatype='real' name='[predNextDay]' role='dimension' type='quantitative' />
      <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
      <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
      <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
      <column caption='tradeDate (SPY Trades)' datatype='date' name='[tradeDate (SPY_Trades)]' role='dimension' type='ordinal' />
      <column caption='tradeDate (SPY VolTrades)' datatype='date' name='[tradeDate (SPY_VolTrades)]' role='dimension' type='ordinal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[PortfolioValue]' derivation='Attribute' name='[attr:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Count' name='[cnt:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='CountD' name='[ctd:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Qty]' derivation='Sum' name='[sum:Qty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighNeg]' derivation='Sum' name='[sum:fibExtHighNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtHighPos]' derivation='Sum' name='[sum:fibExtHighPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowNeg]' derivation='Sum' name='[sum:fibExtLowNeg:qk]' pivot='key' type='quantitative' />
      <column-instance column='[fibExtLowPos]' derivation='Sum' name='[sum:fibExtLowPos:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lCMA]' derivation='Sum' name='[sum:lCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[lagMomentum]' derivation='Sum' name='[sum:lagMomentum:qk]' pivot='key' type='quantitative' />
      <column-instance column='[momentumA]' derivation='Sum' name='[sum:momentumA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sCMA]' derivation='Sum' name='[sum:sCMA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sPeak]' derivation='Sum' name='[sum:sPeak:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sTrough]' derivation='Sum' name='[sum:sTrough:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.550562' measure-ordering='alphabetic' measure-percentage='0.449438' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:BuyingPower:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:Qty:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:PositionsHeld:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[attr:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[cnt:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[ctd:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:Price:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
    <datasource caption='SPY_FRL_Trades+ (GMFSP_db)' inline='true' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 4)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 4)' name='SPY_FRLTrades' table='[dbo].[SPY_FRLTrades]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_FRLTrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[SPY_FRLTrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[SPY_FRLTrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[SPY_FRLTrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[SPY_FRLTrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[SPY_FRLTrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[SPY_FRLTrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column datatype='real' name='[Price]' role='measure' type='quantitative' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.529412' measure-ordering='alphabetic' measure-percentage='0.470588' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:BuyingPower:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:Qty:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PositionsHeld:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[attr:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[cnt:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[ctd:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PortfolioValue (SPY_EMATrades):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PortfolioValue (SPY_VolTrades):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:Price:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='SPY_FRLK_Trades+ (GMFSP_db)' inline='true' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 5)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1fh9qfb1fv5th213vp12a0q9hogg (copy 5)' name='SPY_FRLKTrades' table='[dbo].[SPY_FRLKTrades]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_FRLKTrades]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Act</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Act]</local-name>
            <parent-name>[SPY_FRLKTrades]</parent-name>
            <remote-alias>Act</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>20</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Price</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Price]</local-name>
            <parent-name>[SPY_FRLKTrades]</parent-name>
            <remote-alias>Price</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qty]</local-name>
            <parent-name>[SPY_FRLKTrades]</parent-name>
            <remote-alias>Qty</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PositionsHeld</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PositionsHeld]</local-name>
            <parent-name>[SPY_FRLKTrades]</parent-name>
            <remote-alias>PositionsHeld</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuyingPower</remote-name>
            <remote-type>5</remote-type>
            <local-name>[BuyingPower]</local-name>
            <parent-name>[SPY_FRLKTrades]</parent-name>
            <remote-alias>BuyingPower</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PortfolioValue</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PortfolioValue]</local-name>
            <parent-name>[SPY_FRLKTrades]</parent-name>
            <remote-alias>PortfolioValue</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
      <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
      <column datatype='real' name='[Price]' role='measure' type='quantitative' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.529412' measure-ordering='alphabetic' measure-percentage='0.470588' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:fibExtLowNeg:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:momentumA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:fibExtLowPos:qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:sPeak:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:BuyingPower:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:Qty:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:fibExtHighNeg:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PositionsHeld:qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:sCMA:qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:sTrough:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:lCMA:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:fibExtHighPos:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[attr:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[cnt:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[ctd:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PortfolioValue (SPY_EMATrades):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PortfolioValue (SPY_VolTrades):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:Price:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:lagMomentum:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='SPY_StorePred' inline='true' name='federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4 (copy 2)'>
            <connection authentication='sspi' class='sqlserver' dbname='GMFSP_db' minimum-driver-version='SQL Server Native Client 10.0' odbc-native-protocol='yes' one-time-sql='' server='localhost' />
          </named-connection>
        </named-connections>
        <relation connection='sqlserver.1bmmhip0vxndbr1gfm7ra0qicru4 (copy 2)' name='SPY_predHist' table='[dbo].[SPY_predHist]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>tradeDate</remote-name>
            <remote-type>7</remote-type>
            <local-name>[tradeDate]</local-name>
            <parent-name>[SPY_predHist]</parent-name>
            <remote-alias>tradeDate</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
              <attribute datatype='boolean' name='TypeIsDateTime2orDate'>true</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closePrice</remote-name>
            <remote-type>5</remote-type>
            <local-name>[closePrice]</local-name>
            <parent-name>[SPY_predHist]</parent-name>
            <remote-alias>closePrice</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pricePred</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pricePred]</local-name>
            <parent-name>[SPY_predHist]</parent-name>
            <remote-alias>pricePred</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predError</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predError]</local-name>
            <parent-name>[SPY_predHist]</parent-name>
            <remote-alias>predError</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>baseError</remote-name>
            <remote-type>5</remote-type>
            <local-name>[baseError]</local-name>
            <parent-name>[SPY_predHist]</parent-name>
            <remote-alias>baseError</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sEMA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sEMA]</local-name>
            <parent-name>[SPY_predHist]</parent-name>
            <remote-alias>sEMA</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[sentiment]</local-name>
            <parent-name>[SPY_predHist]</parent-name>
            <remote-alias>sentiment</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>5</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Base Error' datatype='real' name='[baseError]' role='measure' type='quantitative' />
      <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
      <column caption='Pred Error' datatype='real' name='[predError]' role='measure' type='quantitative' />
      <column caption='Price Pred' datatype='real' name='[pricePred]' role='measure' type='quantitative' />
      <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
      <column caption='Sentiment' datatype='string' name='[sentiment]' role='dimension' type='nominal' />
      <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
      <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
      <column-instance column='[pricePred]' derivation='Sum' name='[sum:pricePred:qk]' pivot='key' type='quantitative' />
      <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.333333' measure-ordering='alphabetic' measure-percentage='0.666667' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:closePrice:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:PortfolioValue:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:sEMA:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:CMATradeAction:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:FRLTradeAction:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:pricePred:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='SPY Trade' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Measure Names' />
        <param name='target' value='SPY Trade' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='PFE CMA'>
      <layout-options>
        <title>
          <formatted-text>
            <run>PFE CMA</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PFE_Forecast+ (GMFSP_db)' name='federated.046umqe1wfsi9o1fkyfn71pmyi6f' />
          </datasources>
          <datasource-dependencies datasource='federated.046umqe1wfsi9o1fkyfn71pmyi6f'>
            <column caption='CMATradeAction (PFE Act)' datatype='integer' name='[CMATradeAction (PFE_Act)]' role='measure' type='quantitative' />
            <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
            <column caption='closePrice (PFE Act)' datatype='real' name='[closePrice (PFE_Act)]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[PFE Buy]' derivation='InOut' name='[io:PFE Buy:nk]' pivot='key' type='nominal' />
            <column-instance column='[PFE Sell]' derivation='InOut' name='[io:PFE Sell:nk]' pivot='key' type='nominal' />
            <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
            <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
            <column-instance column='[CMATradeAction (PFE_Act)]' derivation='Sum' name='[sum:CMATradeAction (PFE_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice (PFE_Act)]' derivation='Sum' name='[sum:closePrice (PFE_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lCMA]' derivation='Sum' name='[sum:lCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sCMA]' derivation='Sum' name='[sum:sCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wCMA]' derivation='Sum' name='[sum:wCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
            <column caption='W Cma' datatype='real' name='[wCMA]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sCMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lCMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:wCMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sCMA:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lCMA:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:wCMA:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction:qk]' field-type='quantitative' fold='true' max='15' min='14' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[tdy:tradeDate:qk]' field-type='quantitative' max='#2018-12-15 23:26:26.383#' min='#2018-10-25 15:49:11.299#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[Multiple Values]' field-type='quantitative' max='46.879856200519519' min='39.778201362852123' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]' />
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction (PFE_Act):qk]' />
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Buy:nk]' />
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Sell:nk]' />
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Trade Date:&#9;</run>
                <run bold='true'>&lt;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[tdy:tradeDate:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>closePrice (PFE Act):&#9;</run>
                <run bold='true'>&lt;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>CMA Trade Action:&#9;</run>
                <run bold='true'>&lt;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.046umqe1wfsi9o1fkyfn71pmyi6f].[Multiple Values] + [federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction:qk])</rows>
        <cols>[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='PFE EMA'>
      <table>
        <view>
          <datasources>
            <datasource caption='PFE_EMA+ (GMFSP_db) ' name='federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)' />
          </datasources>
          <datasource-dependencies datasource='federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)'>
            <column caption='EMA Signal' datatype='real' name='[EMASignal]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='L Ema' datatype='real' name='[lEMA]' role='measure' type='quantitative' />
            <column caption='M Ema' datatype='real' name='[mEMA]' role='measure' type='quantitative' />
            <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
            <column-instance column='[EMASignal]' derivation='Sum' name='[sum:EMASignal:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lEMA]' derivation='Sum' name='[sum:lEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[mEMA]' derivation='Sum' name='[sum:mEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:lEMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:mEMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sEMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[tdy:tradeDate:qk]' field-type='quantitative' max='#2020-04-19 03:35:34.188#' min='#2014-10-15 07:22:42.434#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[Multiple Values]' field-type='quantitative' max='54.363733713190967' min='6.1273273010071367' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:EMASignal:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[:Measure Names]' />
              <lod column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:EMASignal:qk]' />
              <lod column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:sEMA:qk]' />
              <lod column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:mEMA:qk]' />
              <lod column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:lEMA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:EMASignal:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[Multiple Values] + [federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[sum:EMASignal:qk])</rows>
        <cols>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='PFE FRL'>
      <table>
        <view>
          <datasources>
            <datasource caption='PFE_Forecast+ (GMFSP_db)' name='federated.046umqe1wfsi9o1fkyfn71pmyi6f' />
          </datasources>
          <datasource-dependencies datasource='federated.046umqe1wfsi9o1fkyfn71pmyi6f'>
            <column caption='CMATradeAction (PFE Act)' datatype='integer' name='[CMATradeAction (PFE_Act)]' role='measure' type='quantitative' />
            <column caption='FRL 1K TradeAction (PFE Act)' datatype='integer' name='[FRL_1K_TradeAction (PFE_Act)]' role='measure' type='quantitative' />
            <column caption='closePrice (PFE Act)' datatype='real' name='[closePrice (PFE_Act)]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='fibExtHighNeg (PFE Pred2)' datatype='real' name='[fibExtHighNeg (PFE_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
            <column caption='fibExtHighPos (PFE Pred2)' datatype='real' name='[fibExtHighPos (PFE_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
            <column caption='fibExtLowNeg (PFE Pred2)' datatype='real' name='[fibExtLowNeg (PFE_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
            <column caption='fibExtLowPos (PFE Pred2)' datatype='real' name='[fibExtLowPos (PFE_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
            <column-instance column='[PFE Buy FRL]' derivation='InOut' name='[io:PFE Buy FRL:nk]' pivot='key' type='nominal' />
            <column-instance column='[PFE Sell FRL]' derivation='InOut' name='[io:PFE Sell FRL:nk]' pivot='key' type='nominal' />
            <column caption='K Peak' datatype='real' name='[kPeak]' role='measure' type='quantitative' />
            <column caption='K Trough' datatype='real' name='[kTrough]' role='measure' type='quantitative' />
            <column caption='L Peak' datatype='real' name='[lPeak]' role='measure' type='quantitative' />
            <column caption='L Trough' datatype='real' name='[lTrough]' role='measure' type='quantitative' />
            <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
            <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
            <column-instance column='[CMATradeAction (PFE_Act)]' derivation='Sum' name='[sum:CMATradeAction (PFE_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRL_1K_TradeAction (PFE_Act)]' derivation='Sum' name='[sum:FRL_1K_TradeAction (PFE_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice (PFE_Act)]' derivation='Sum' name='[sum:closePrice (PFE_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighNeg (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtHighNeg (PFE_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighNeg]' derivation='Sum' name='[sum:fibExtHighNeg:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighPos (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtHighPos (PFE_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighPos]' derivation='Sum' name='[sum:fibExtHighPos:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowNeg (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtLowNeg (PFE_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowNeg]' derivation='Sum' name='[sum:fibExtLowNeg:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowPos (PFE_Pred2)]' derivation='Sum' name='[sum:fibExtLowPos (PFE_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowPos]' derivation='Sum' name='[sum:fibExtLowPos:qk]' pivot='key' type='quantitative' />
            <column-instance column='[kPeak]' derivation='Sum' name='[sum:kPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[kTrough]' derivation='Sum' name='[sum:kTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lPeak]' derivation='Sum' name='[sum:lPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lTrough]' derivation='Sum' name='[sum:lTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sPeak]' derivation='Sum' name='[sum:sPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sTrough]' derivation='Sum' name='[sum:sTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:kPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:kTrough:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:lTrough:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:sTrough:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:CMATradeAction (PFE_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighNeg:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighPos:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowNeg:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowPos:qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighNeg (PFE_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtHighPos (PFE_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowNeg (PFE_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:fibExtLowPos (PFE_Pred2):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-03-11 13:07:07.540#' min='#2018-09-05 02:13:05.146#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[Multiple Values]' field-type='quantitative' max='56.418986085135224' min='31.227700963765535' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRL_1K_TradeAction (PFE_Act):qk]' field-type='quantitative' fold='true' max='18' min='10' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]' />
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]' />
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRL_1K_TradeAction (PFE_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.47176796197891235' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRL_1K_TradeAction (PFE_Act):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Buy FRL:nk]' />
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Sell FRL:nk]' />
              <tooltip column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Trade Date:&#9;</run>
                <run bold='true'>&lt;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[tdy:tradeDate:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>closePrice (PFE Act):&#9;</run>
                <run bold='true'>&lt;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:closePrice (PFE_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>FRL 1K TradeAction (PFE Act):&#9;</run>
                <run bold='true'>&lt;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRL_1K_TradeAction (PFE_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.42779004573822021' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.046umqe1wfsi9o1fkyfn71pmyi6f].[Multiple Values] + [federated.046umqe1wfsi9o1fkyfn71pmyi6f].[sum:FRL_1K_TradeAction (PFE_Act):qk])</rows>
        <cols>[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='PFE Trade'>
      <table>
        <view>
          <datasources>
            <datasource caption='PFE_Trades+ (GMFSP_db)' name='federated.1xqnrhc05bcv3218go6rz1re346j' />
          </datasources>
          <datasource-dependencies datasource='federated.1xqnrhc05bcv3218go6rz1re346j'>
            <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
            <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
            <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1xqnrhc05bcv3218go6rz1re346j].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:PortfolioValue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:CMATradeAction:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRL_1K_TradeAction:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRLTradeAction:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1xqnrhc05bcv3218go6rz1re346j].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:PortfolioValue:qk]&quot;</bucket>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:CMATradeAction:qk]&quot;</bucket>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
              <bucket>&quot;[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRLTradeAction:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1xqnrhc05bcv3218go6rz1re346j].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1xqnrhc05bcv3218go6rz1re346j].[Multiple Values]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xqnrhc05bcv3218go6rz1re346j].[:Measure Names]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:closePrice:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:CMATradeAction:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRL_1K_TradeAction:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRLTradeAction:qk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:closePrice:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xqnrhc05bcv3218go6rz1re346j].[:Measure Names]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:closePrice:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:CMATradeAction:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRL_1K_TradeAction:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRLTradeAction:qk]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1xqnrhc05bcv3218go6rz1re346j].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1xqnrhc05bcv3218go6rz1re346j].[:Measure Names]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:closePrice:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:CMATradeAction:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRL_1K_TradeAction:qk]' />
              <tooltip column='[federated.1xqnrhc05bcv3218go6rz1re346j].[sum:FRLTradeAction:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1xqnrhc05bcv3218go6rz1re346j].[sum:closePrice:qk] + [federated.1xqnrhc05bcv3218go6rz1re346j].[Multiple Values])</rows>
        <cols>[federated.1xqnrhc05bcv3218go6rz1re346j].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='PFE Vol Trade'>
      <layout-options>
        <title>
          <formatted-text>
            <run>PFE Vol Trade</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='PFE_Vol_Trades+ (GMFSP_db)' name='federated.1xqnrhc05bcv3218go6rz1re346j (copy)' />
          </datasources>
          <datasource-dependencies datasource='federated.1xqnrhc05bcv3218go6rz1re346j (copy)'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate (PFE_VolTrades)]' derivation='Day-Trunc' name='[tdy:tradeDate (PFE_VolTrades):qk]' pivot='key' type='quantitative' />
            <column caption='tradeDate (PFE VolTrades)' datatype='date' name='[tradeDate (PFE_VolTrades)]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='render-fold-reversed' value='true' />
            <encoding attr='space' class='0' field='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:PortfolioValue:qk]' field-type='quantitative' fold='true' max='13569.825982905546' min='6923.7461945782079' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[tdy:tradeDate (PFE_VolTrades):qk]' field-type='quantitative' max='#2019-04-20 14:17:44.347#' min='#2018-08-16 15:38:20.869#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:closePrice:qk]' field-type='quantitative' max='49.325842540595403' min='25.167575104871453' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minheight' value='371' />
                <format attr='maxheight' value='371' />
                <format attr='minwidth' value='562' />
                <format attr='maxwidth' value='562' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:closePrice:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.58171272277832031' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:PortfolioValue:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[:Measure Names]' />
              <lod column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[none:Act:nk]' />
              <lod column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:PositionsHeld:qk]' />
              <lod column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:BuyingPower:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.58171272277832031' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:closePrice:qk] + [federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[sum:PortfolioValue:qk])</rows>
        <cols>[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[tdy:tradeDate (PFE_VolTrades):qk]</cols>
      </table>
    </worksheet>
    <worksheet name='PFE_StorePred'>
      <table>
        <view>
          <datasources>
            <datasource caption='PFE_StorePred' name='federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)' />
          </datasources>
          <datasource-dependencies datasource='federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)'>
            <column-instance column='[sentiment]' derivation='Attribute' name='[attr:sentiment:nk]' pivot='key' type='nominal' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='Pred Error' datatype='real' name='[predError]' role='measure' type='quantitative' />
            <column caption='Price Pred' datatype='real' name='[pricePred]' role='measure' type='quantitative' />
            <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
            <column caption='Sentiment' datatype='string' name='[sentiment]' role='dimension' type='nominal' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[predError]' derivation='Sum' name='[sum:predError:qk]' pivot='key' type='quantitative' />
            <column-instance column='[pricePred]' derivation='Sum' name='[sum:pricePred:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:pricePred:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:sEMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-06-05 15:47:20.692#' min='#2018-03-01 21:04:48.625#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[Multiple Values]' field-type='quantitative' max='45.737604352586928' min='33.684247080181542' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[:Measure Names]' />
              <lod column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[sum:predError:qk]' />
              <lod column='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[attr:sentiment:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.20790055394172668' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[Multiple Values]</rows>
        <cols>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY CMA'>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_Forecast+ (GMFSP_db)' name='federated.0kmipzx1cwae6v14kjfpc0e1w2ew' />
          </datasources>
          <datasource-dependencies datasource='federated.0kmipzx1cwae6v14kjfpc0e1w2ew'>
            <column caption='CMATradeAction (SPY Act)' datatype='integer' name='[CMATradeAction (SPY_Act)]' role='measure' type='quantitative' />
            <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
            <column caption='closePrice (SPY Act)' datatype='real' name='[closePrice (SPY_Act)]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[SPY Buy]' derivation='InOut' name='[io:SPY Buy:nk]' pivot='key' type='nominal' />
            <column-instance column='[SPY Sell]' derivation='InOut' name='[io:SPY Sell:nk]' pivot='key' type='nominal' />
            <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
            <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
            <column-instance column='[CMATradeAction (SPY_Act)]' derivation='Sum' name='[sum:CMATradeAction (SPY_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice (SPY_Act)]' derivation='Sum' name='[sum:closePrice (SPY_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lCMA]' derivation='Sum' name='[sum:lCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sCMA]' derivation='Sum' name='[sum:sCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wCMA]' derivation='Sum' name='[sum:wCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
            <column caption='W Cma' datatype='real' name='[wCMA]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lCMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sCMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:wCMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:CMATradeAction:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lCMA:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sCMA:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:wCMA:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:CMATradeAction:qk]' field-type='quantitative' fold='true' max='11' min='9' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-02-18 23:00:14.341#' min='#2018-08-19 21:43:02.521#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[Multiple Values]' field-type='quantitative' max='303.51552865701979' min='248.56068215748451' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:CMATradeAction (SPY_Act):qk]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sCMA:qk]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:wCMA:qk]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lCMA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.51574587821960449' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:CMATradeAction:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Buy:nk]' />
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Sell:nk]' />
              <lod column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Trade Date:&#9;</run>
                <run bold='true'>&lt;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[tdy:tradeDate:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>closePrice (SPY Act):&#9;</run>
                <run bold='true'>&lt;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>CMA Trade Action:&#9;</run>
                <run bold='true'>&lt;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:CMATradeAction:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[Multiple Values] + [federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:CMATradeAction:qk])</rows>
        <cols>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY CMA Trade'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SPY CMA Trade</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_CMA_Trades+ (GMFSP_db)' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)' />
          </datasources>
          <datasource-dependencies datasource='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
            <column datatype='real' name='[Price]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PortfolioValue:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:Price:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PortfolioValue:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[none:Act:nk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:BuyingPower:qk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PositionsHeld:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:Price:qk] + [federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[sum:PortfolioValue:qk])</rows>
        <cols>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY EMA'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SPY EMA</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_EMA+ (GMFSP_db) ' name='federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)' />
          </datasources>
          <datasource-dependencies datasource='federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)'>
            <column caption='EMA Signal' datatype='real' name='[EMASignal]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='L Ema' datatype='real' name='[lEMA]' role='measure' type='quantitative' />
            <column caption='M Ema' datatype='real' name='[mEMA]' role='measure' type='quantitative' />
            <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
            <column-instance column='[EMASignal]' derivation='Sum' name='[sum:EMASignal:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lEMA]' derivation='Sum' name='[sum:lEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[mEMA]' derivation='Sum' name='[sum:mEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:lEMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:mEMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:sEMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:EMASignal:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[:Measure Names]' />
              <lod column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:EMASignal:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.29585635662078857' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[:Measure Names]' />
              <lod column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:EMASignal:qk]' />
              <lod column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:sEMA:qk]' />
              <lod column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:mEMA:qk]' />
              <lod column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:lEMA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.29585635662078857' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:EMASignal:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[:Measure Names]' />
              <lod column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:EMASignal:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.29585635662078857' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[Multiple Values] + [federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[sum:EMASignal:qk])</rows>
        <cols>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY EMA Trade'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SPY EMA Trades</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_EMA_Trades+ (GMFSP_db)' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)' />
          </datasources>
          <datasource-dependencies datasource='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
            <column datatype='real' name='[Price]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PortfolioValue:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:Price:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PortfolioValue:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[none:Act:nk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:BuyingPower:qk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PositionsHeld:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:Price:qk] + [federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[sum:PortfolioValue:qk])</rows>
        <cols>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY FRL'>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_Forecast+ (GMFSP_db)' name='federated.0kmipzx1cwae6v14kjfpc0e1w2ew' />
          </datasources>
          <datasource-dependencies datasource='federated.0kmipzx1cwae6v14kjfpc0e1w2ew'>
            <column caption='FRL 1K TradeAction (SPY Act)' datatype='integer' name='[FRL_1K_TradeAction (SPY_Act)]' role='measure' type='quantitative' />
            <column caption='closePrice (SPY Act)' datatype='real' name='[closePrice (SPY_Act)]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='fibExtHighNeg (SPY Pred2)' datatype='real' name='[fibExtHighNeg (SPY_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
            <column caption='fibExtHighPos (SPY Pred2)' datatype='real' name='[fibExtHighPos (SPY_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
            <column caption='fibExtLowNeg (SPY Pred2)' datatype='real' name='[fibExtLowNeg (SPY_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
            <column caption='fibExtLowPos (SPY Pred2)' datatype='real' name='[fibExtLowPos (SPY_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
            <column-instance column='[SPY Buy FRL]' derivation='InOut' name='[io:SPY Buy FRL:nk]' pivot='key' type='nominal' />
            <column-instance column='[SPY Sell FRL]' derivation='InOut' name='[io:SPY Sell FRL:nk]' pivot='key' type='nominal' />
            <column caption='K Peak' datatype='real' name='[kPeak]' role='measure' type='quantitative' />
            <column caption='K Trough' datatype='real' name='[kTrough]' role='measure' type='quantitative' />
            <column caption='L Peak' datatype='real' name='[lPeak]' role='measure' type='quantitative' />
            <column caption='L Trough' datatype='real' name='[lTrough]' role='measure' type='quantitative' />
            <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
            <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
            <column-instance column='[FRL_1K_TradeAction (SPY_Act)]' derivation='Sum' name='[sum:FRL_1K_TradeAction (SPY_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice (SPY_Act)]' derivation='Sum' name='[sum:closePrice (SPY_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighNeg (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtHighNeg (SPY_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighNeg]' derivation='Sum' name='[sum:fibExtHighNeg:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighPos (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtHighPos (SPY_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighPos]' derivation='Sum' name='[sum:fibExtHighPos:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowNeg (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtLowNeg (SPY_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowNeg]' derivation='Sum' name='[sum:fibExtLowNeg:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowPos (SPY_Pred2)]' derivation='Sum' name='[sum:fibExtLowPos (SPY_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowPos]' derivation='Sum' name='[sum:fibExtLowPos:qk]' pivot='key' type='quantitative' />
            <column-instance column='[kPeak]' derivation='Sum' name='[sum:kPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[kTrough]' derivation='Sum' name='[sum:kTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lPeak]' derivation='Sum' name='[sum:lPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lTrough]' derivation='Sum' name='[sum:lTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sPeak]' derivation='Sum' name='[sum:sPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sTrough]' derivation='Sum' name='[sum:sTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:kPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:kTrough:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:lTrough:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:sTrough:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighNeg:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighPos:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowNeg:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowPos:qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighNeg (SPY_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtHighPos (SPY_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowNeg (SPY_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:fibExtLowPos (SPY_Pred2):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[Multiple Values]' field-type='quantitative' max='302.23684016604244' min='245.81987120796833' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:FRL_1K_TradeAction (SPY_Act):qk]' field-type='quantitative' fold='true' max='11' min='7' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-02-07 16:06:29.697#' min='#2018-10-23 11:10:48.631#' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.49375692009925842' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:FRL_1K_TradeAction (SPY_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.49375692009925842' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:FRL_1K_TradeAction (SPY_Act):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Buy FRL:nk]' />
              <color column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Sell FRL:nk]' />
              <tooltip column='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Trade Date:&#9;</run>
                <run bold='true'>&lt;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[tdy:tradeDate:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>closePrice (SPY Act):&#9;</run>
                <run bold='true'>&lt;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:closePrice (SPY_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>FRL 1K TradeAction (SPY Act):&#9;</run>
                <run bold='true'>&lt;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:FRL_1K_TradeAction (SPY_Act):qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.33983424305915833' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[Multiple Values] + [federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[sum:FRL_1K_TradeAction (SPY_Act):qk])</rows>
        <cols>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY FRL Trade'>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_FRL_Trades+ (GMFSP_db)' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)' />
          </datasources>
          <datasource-dependencies datasource='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
            <column datatype='real' name='[Price]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PortfolioValue:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:Price:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PortfolioValue:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[none:Act:nk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:BuyingPower:qk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PositionsHeld:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:Price:qk] + [federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[sum:PortfolioValue:qk])</rows>
        <cols>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY FRLK Trades'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SPY FRLK Trades</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_FRLK_Trades+ (GMFSP_db)' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)' />
          </datasources>
          <datasource-dependencies datasource='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
            <column datatype='real' name='[Price]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PortfolioValue:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:Price:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PortfolioValue:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[none:Act:nk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:BuyingPower:qk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PositionsHeld:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:Price:qk] + [federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[sum:PortfolioValue:qk])</rows>
        <cols>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY Trade'>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_Trades+ (GMFSP_db)' name='federated.1yolocj1gjjpwj1fnklko1mci7bl' />
          </datasources>
          <datasource-dependencies datasource='federated.1yolocj1gjjpwj1fnklko1mci7bl'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
            <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
            <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:PortfolioValue:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:CMATradeAction:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:FRL_1K_TradeAction:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:FRLTradeAction:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:PortfolioValue:qk]&quot;</bucket>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:CMATradeAction:qk]&quot;</bucket>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
              <bucket>&quot;[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:FRLTradeAction:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1yolocj1gjjpwj1fnklko1mci7bl].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[Multiple Values]' field-type='quantitative' fold='true' max='13922.320548500011' min='8265.105643464678' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-07-09 07:57:40.091#' min='#2017-12-10 05:48:50.836#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:closePrice:qk]' field-type='quantitative' max='330.64888121589109' min='196.29255946395909' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:closePrice:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[none:Act:nk]' />
              <tooltip column='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:CMATradeAction:qk]' />
              <tooltip column='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:FRLTradeAction:qk]' />
              <tooltip column='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:closePrice:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1yolocj1gjjpwj1fnklko1mci7bl].[sum:closePrice:qk] + [federated.1yolocj1gjjpwj1fnklko1mci7bl].[Multiple Values])</rows>
        <cols>[federated.1yolocj1gjjpwj1fnklko1mci7bl].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY Vol Trade'>
      <layout-options>
        <title>
          <formatted-text>
            <run>SPY Vol Trade</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_Vol_Trades+ (GMFSP_db)' name='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)' />
          </datasources>
          <datasource-dependencies datasource='federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
            <column datatype='real' name='[Price]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Price]' derivation='Sum' name='[sum:Price:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate (SPY_VolTrades)]' derivation='Day-Trunc' name='[tdy:tradeDate (SPY_VolTrades):qk]' pivot='key' type='quantitative' />
            <column caption='tradeDate (SPY VolTrades)' datatype='date' name='[tradeDate (SPY_VolTrades)]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[tdy:tradeDate (SPY_VolTrades):qk]' field-type='quantitative' max='#2019-05-23 10:39:22.036#' min='#2018-09-02 16:20:16.925#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:closePrice:qk]' field-type='quantitative' max='357.9070684368437' min='205.09281449751705' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:PortfolioValue:qk]' field-type='quantitative' fold='true' max='16189.82058251848' min='9277.3129180723881' range-type='fixed' scope='rows' type='space' />
            <format attr='render-fold-reversed' value='true' />
            <format attr='title' class='0' field='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[tdy:tradeDate (SPY_VolTrades):qk]' scope='cols' value='Trade Date' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:closePrice:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.58171272277832031' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:PortfolioValue:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[none:Act:nk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:Price:qk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:BuyingPower:qk]' />
              <lod column='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:PositionsHeld:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.58171272277832031' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:closePrice:qk] + [federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[sum:PortfolioValue:qk])</rows>
        <cols>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[tdy:tradeDate (SPY_VolTrades):qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SPY_StorePred'>
      <table>
        <view>
          <datasources>
            <datasource caption='SPY_StorePred' name='federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)' />
          </datasources>
          <datasource-dependencies datasource='federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)'>
            <column-instance column='[sentiment]' derivation='Attribute' name='[attr:sentiment:nk]' pivot='key' type='nominal' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='Pred Error' datatype='real' name='[predError]' role='measure' type='quantitative' />
            <column caption='Price Pred' datatype='real' name='[pricePred]' role='measure' type='quantitative' />
            <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
            <column caption='Sentiment' datatype='string' name='[sentiment]' role='dimension' type='nominal' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[predError]' derivation='Sum' name='[sum:predError:qk]' pivot='key' type='quantitative' />
            <column-instance column='[pricePred]' derivation='Sum' name='[sum:pricePred:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:pricePred:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:sEMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[tdy:tradeDate:qk]' field-type='quantitative' max='#2017-02-02 12:02:58.693#' min='#2016-06-17 04:18:00.711#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[Multiple Values]' field-type='quantitative' max='260.50685018970489' min='107.91444717621016' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[:Measure Names]' />
              <lod column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[attr:sentiment:nk]' />
              <lod column='[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[sum:predError:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25187844038009644' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[Multiple Values]</rows>
        <cols>[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='XPH CMA'>
      <table>
        <view>
          <datasources>
            <datasource caption='XPH_Forecast+ (GMFSP_db)' name='federated.14gxodt0ghhbe21ff04om11g5ee2' />
          </datasources>
          <datasource-dependencies datasource='federated.14gxodt0ghhbe21ff04om11g5ee2'>
            <column caption='CMATradeAction (XPH Act)' datatype='integer' name='[CMATradeAction (XPH_Act)]' role='measure' type='quantitative' />
            <column caption='closePrice (XPH Act)' datatype='real' name='[closePrice (XPH_Act)]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[XPH Buy]' derivation='InOut' name='[io:XPH Buy:nk]' pivot='key' type='nominal' />
            <column-instance column='[XPH Sell]' derivation='InOut' name='[io:XPH Sell:nk]' pivot='key' type='nominal' />
            <column caption='L Cma' datatype='real' name='[lCMA]' role='measure' type='quantitative' />
            <column caption='S Cma' datatype='real' name='[sCMA]' role='measure' type='quantitative' />
            <column-instance column='[CMATradeAction (XPH_Act)]' derivation='Sum' name='[sum:CMATradeAction (XPH_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice (XPH_Act)]' derivation='Sum' name='[sum:closePrice (XPH_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lCMA]' derivation='Sum' name='[sum:lCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sCMA]' derivation='Sum' name='[sum:sCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wCMA]' derivation='Sum' name='[sum:wCMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
            <column caption='W Cma' datatype='real' name='[wCMA]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lCMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sCMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:wCMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:CMATradeAction (XPH_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lCMA:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sCMA:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:wCMA:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:CMATradeAction (XPH_Act):qk]' field-type='quantitative' fold='true' max='10' min='6' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-04-10 04:49:08.685#' min='#2018-07-16 01:20:40.645#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values]' field-type='quantitative' max='66.680205882379596' min='21.643253709270049' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:wCMA:qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sCMA:qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lCMA:qk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:wCMA:qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sCMA:qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:CMATradeAction (XPH_Act):qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lCMA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.36182320117950439' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:CMATradeAction (XPH_Act):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Buy:nk]' />
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Sell:nk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:wCMA:qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sCMA:qk]' />
              <lod column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lCMA:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Trade Date:&#9;</run>
                <run bold='true'>&lt;[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>closePrice (XPH Act):&#9;</run>
                <run bold='true'>&lt;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>CMATradeAction (XPH Act):&#9;</run>
                <run bold='true'>&lt;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:CMATradeAction (XPH_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.40580111742019653' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values] + [federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:CMATradeAction (XPH_Act):qk])</rows>
        <cols>[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='XPH EMA'>
      <layout-options>
        <title>
          <formatted-text>
            <run>XPH EMA</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='XPH_EMA+ (GMFSP_db) ' name='federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)' />
          </datasources>
          <datasource-dependencies datasource='federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)'>
            <column caption='EMA Signal' datatype='real' name='[EMASignal]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='L Ema' datatype='real' name='[lEMA]' role='measure' type='quantitative' />
            <column caption='M Ema' datatype='real' name='[mEMA]' role='measure' type='quantitative' />
            <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
            <column-instance column='[EMASignal]' derivation='Sum' name='[sum:EMASignal:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lEMA]' derivation='Sum' name='[sum:lEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[mEMA]' derivation='Sum' name='[sum:mEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:lEMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:mEMA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:sEMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:EMASignal:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.31784531474113464' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[:Measure Names]' />
              <lod column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:EMASignal:qk]' />
              <lod column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:sEMA:qk]' />
              <lod column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:mEMA:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.31784531474113464' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:EMASignal:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.31784531474113464' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[Multiple Values] + [federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[sum:EMASignal:qk])</rows>
        <cols>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='XPH FRL'>
      <table>
        <view>
          <datasources>
            <datasource caption='XPH_Forecast+ (GMFSP_db)' name='federated.14gxodt0ghhbe21ff04om11g5ee2' />
          </datasources>
          <datasource-dependencies datasource='federated.14gxodt0ghhbe21ff04om11g5ee2'>
            <column caption='CMATradeAction (XPH Act)' datatype='integer' name='[CMATradeAction (XPH_Act)]' role='measure' type='quantitative' />
            <column caption='FRLTradeAction (XPH Act)' datatype='integer' name='[FRLTradeAction (XPH_Act)]' role='measure' type='quantitative' />
            <column caption='closePrice (XPH Act)' datatype='real' name='[closePrice (XPH_Act)]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='fibExtHighNeg (XPH Pred2)' datatype='real' name='[fibExtHighNeg (XPH_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext High Neg' datatype='real' name='[fibExtHighNeg]' role='measure' type='quantitative' />
            <column caption='fibExtHighPos (XPH Pred2)' datatype='real' name='[fibExtHighPos (XPH_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext High Pos' datatype='real' name='[fibExtHighPos]' role='measure' type='quantitative' />
            <column caption='fibExtLowNeg (XPH Pred2)' datatype='real' name='[fibExtLowNeg (XPH_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext Low Neg' datatype='real' name='[fibExtLowNeg]' role='measure' type='quantitative' />
            <column caption='fibExtLowPos (XPH Pred2)' datatype='real' name='[fibExtLowPos (XPH_Pred2)]' role='measure' type='quantitative' />
            <column caption='Fib Ext Low Pos' datatype='real' name='[fibExtLowPos]' role='measure' type='quantitative' />
            <column-instance column='[XPH Buy FRL]' derivation='InOut' name='[io:XPH Buy FRL:nk]' pivot='key' type='nominal' />
            <column-instance column='[XPH Sell FRL]' derivation='InOut' name='[io:XPH Sell FRL:nk]' pivot='key' type='nominal' />
            <column caption='K Peak' datatype='real' name='[kPeak]' role='measure' type='quantitative' />
            <column caption='K Trough' datatype='real' name='[kTrough]' role='measure' type='quantitative' />
            <column caption='L Peak' datatype='real' name='[lPeak]' role='measure' type='quantitative' />
            <column caption='L Trough' datatype='real' name='[lTrough]' role='measure' type='quantitative' />
            <column caption='S Peak' datatype='real' name='[sPeak]' role='measure' type='quantitative' />
            <column caption='S Trough' datatype='real' name='[sTrough]' role='measure' type='quantitative' />
            <column-instance column='[CMATradeAction (XPH_Act)]' derivation='Sum' name='[sum:CMATradeAction (XPH_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRLTradeAction (XPH_Act)]' derivation='Sum' name='[sum:FRLTradeAction (XPH_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice (XPH_Act)]' derivation='Sum' name='[sum:closePrice (XPH_Act):qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighNeg (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtHighNeg (XPH_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighNeg]' derivation='Sum' name='[sum:fibExtHighNeg:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighPos (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtHighPos (XPH_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtHighPos]' derivation='Sum' name='[sum:fibExtHighPos:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowNeg (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtLowNeg (XPH_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowNeg]' derivation='Sum' name='[sum:fibExtLowNeg:qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowPos (XPH_Pred2)]' derivation='Sum' name='[sum:fibExtLowPos (XPH_Pred2):qk]' pivot='key' type='quantitative' />
            <column-instance column='[fibExtLowPos]' derivation='Sum' name='[sum:fibExtLowPos:qk]' pivot='key' type='quantitative' />
            <column-instance column='[kPeak]' derivation='Sum' name='[sum:kPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[kTrough]' derivation='Sum' name='[sum:kTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lPeak]' derivation='Sum' name='[sum:lPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lTrough]' derivation='Sum' name='[sum:lTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sPeak]' derivation='Sum' name='[sum:sPeak:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sTrough]' derivation='Sum' name='[sum:sTrough:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:kPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:kTrough:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:lTrough:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sPeak:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:sTrough:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:CMATradeAction (XPH_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighNeg:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighPos:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowNeg:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowPos:qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighNeg (XPH_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtHighPos (XPH_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowNeg (XPH_Pred2):qk]&quot;</bucket>
              <bucket>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:fibExtLowPos (XPH_Pred2):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRLTradeAction (XPH_Act):qk]' field-type='quantitative' fold='true' max='12' min='10' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-01-26 23:31:37.433#' min='#2018-10-11 16:19:50.510#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values]' field-type='quantitative' max='47.47225454673751' min='39.753901589347777' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.42779004573822021' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRLTradeAction (XPH_Act):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.42779004573822021' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRLTradeAction (XPH_Act):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Buy FRL:nk]' />
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Sell FRL:nk]' />
              <tooltip column='[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Day of Trade Date:&#9;</run>
                <run bold='true'>&lt;[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>closePrice (XPH Act):&#9;</run>
                <run bold='true'>&lt;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>FRLTradeAction (XPH Act):&#9;</run>
                <run bold='true'>&lt;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRLTradeAction (XPH_Act):qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.42779004573822021' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values] + [federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRLTradeAction (XPH_Act):qk])</rows>
        <cols>[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='XPH Trade'>
      <table>
        <view>
          <datasources>
            <datasource caption='XPH_Trades+ (GMFSP_db)' name='federated.1ltcvo70dg2nrj15t3aym06x0ri6' />
          </datasources>
          <datasource-dependencies datasource='federated.1ltcvo70dg2nrj15t3aym06x0ri6'>
            <column caption='CMA Trade Action' datatype='integer' name='[CMATradeAction]' role='measure' type='quantitative' />
            <column caption='FRL Trade Action' datatype='real' name='[FRLTradeAction]' role='measure' type='quantitative' />
            <column caption='FRL 1K TradeAction' datatype='real' name='[FRL_1K_TradeAction]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[CMATradeAction]' derivation='Sum' name='[sum:CMATradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRLTradeAction]' derivation='Sum' name='[sum:FRLTradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[FRL_1K_TradeAction]' derivation='Sum' name='[sum:FRL_1K_TradeAction:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:CMATradeAction:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:FRL_1K_TradeAction:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:FRLTradeAction:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:PortfolioValue:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:closePrice:qk]&quot;</bucket>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:PortfolioValue:qk]&quot;</bucket>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:CMATradeAction:qk]&quot;</bucket>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:FRL_1K_TradeAction:qk]&quot;</bucket>
              <bucket>&quot;[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:FRLTradeAction:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[Multiple Values]' field-type='quantitative' fold='true' max='11216.521893119789' min='5446.647764581171' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-04-04 13:16:10.434#' min='#2018-08-10 03:04:41.739#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:closePrice:qk]' field-type='quantitative' max='52.702200825150051' min='25.591741098360277' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:closePrice:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[Multiple Values]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1ltcvo70dg2nrj15t3aym06x0ri6].[sum:closePrice:qk] + [federated.1ltcvo70dg2nrj15t3aym06x0ri6].[Multiple Values])</rows>
        <cols>[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='XPH Vol Trade'>
      <layout-options>
        <title>
          <formatted-text>
            <run>XPH Vol Trades</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='XPH_Vol_Trades+ (GMFSP_db)' name='federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)' />
          </datasources>
          <datasource-dependencies datasource='federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)'>
            <column datatype='string' name='[Act]' role='dimension' type='nominal' />
            <column caption='Buying Power' datatype='real' name='[BuyingPower]' role='measure' type='quantitative' />
            <column caption='Portfolio Value' datatype='real' name='[PortfolioValue]' role='measure' type='quantitative' />
            <column caption='Positions Held' datatype='real' name='[PositionsHeld]' role='measure' type='quantitative' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column-instance column='[Act]' derivation='None' name='[none:Act:nk]' pivot='key' type='nominal' />
            <column-instance column='[BuyingPower]' derivation='Sum' name='[sum:BuyingPower:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PortfolioValue]' derivation='Sum' name='[sum:PortfolioValue:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PositionsHeld]' derivation='Sum' name='[sum:PositionsHeld:qk]' pivot='key' type='quantitative' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:PortfolioValue:qk]' field-type='quantitative' fold='true' max='11169.728525628872' min='5599.9178053018068' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-04-18 22:00:00#' min='#2018-08-24 11:48:31.304#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:closePrice:qk]' field-type='quantitative' max='52.510600013568528' min='26.326069009497964' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:closePrice:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:PortfolioValue:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[:Measure Names]' />
              <lod column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[none:Act:nk]' />
              <lod column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:BuyingPower:qk]' />
              <lod column='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:PositionsHeld:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.60370165109634399' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:closePrice:qk] + [federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[sum:PortfolioValue:qk])</rows>
        <cols>[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='XPH_StorePred'>
      <table>
        <view>
          <datasources>
            <datasource caption='XPH_StorePred' name='federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)' />
          </datasources>
          <datasource-dependencies datasource='federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)'>
            <column-instance column='[sentiment]' derivation='Attribute' name='[attr:sentiment:nk]' pivot='key' type='nominal' />
            <column caption='Close Price' datatype='real' name='[closePrice]' role='measure' type='quantitative' />
            <column caption='Price Pred' datatype='real' name='[pricePred]' role='measure' type='quantitative' />
            <column caption='S Ema' datatype='real' name='[sEMA]' role='measure' type='quantitative' />
            <column caption='Sentiment' datatype='string' name='[sentiment]' role='dimension' type='nominal' />
            <column-instance column='[closePrice]' derivation='Sum' name='[sum:closePrice:qk]' pivot='key' type='quantitative' />
            <column-instance column='[pricePred]' derivation='Sum' name='[sum:pricePred:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sEMA]' derivation='Sum' name='[sum:sEMA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[tradeDate]' derivation='Day-Trunc' name='[tdy:tradeDate:qk]' pivot='key' type='quantitative' />
            <column caption='Trade Date' datatype='date' name='[tradeDate]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:closePrice:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:pricePred:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:sEMA:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[tdy:tradeDate:qk]' field-type='quantitative' max='#2019-09-06 08:18:12.342#' min='#2017-02-28 07:38:51.596#' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[Multiple Values]' field-type='quantitative' max='56.29675135384327' min='24.106464681458938' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[:Measure Names]' />
              <lod column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[attr:sentiment:nk]' />
              <lod column='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[sum:pricePred:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25187844038009644' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[Multiple Values]</rows>
        <cols>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[tdy:tradeDate:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Algorithm Comparsons'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='5' param='horz' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='3' type='layout-basic' w='82400' x='800' y='1000'>
              <zone h='49000' id='7' name='SPY Vol Trade' w='41200' x='42000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='10' name='SPY CMA Trade' w='20600' x='62600' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='13' name='SPY Trade' w='41200' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='15' name='SPY EMA Trade' w='20600' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='18' name='SPY FRL Trade' w='20600' x='21400' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='21' name='SPY FRLK Trades' w='20600' x='42000' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='4' is-fixed='true' param='vert' type='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='5750' id='8' name='SPY Vol Trade' pane-specification-id='5' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[:Measure Names]' type='color' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='10750' id='9' name='SPY Vol Trade' pane-specification-id='6' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[none:Act:nk]' type='color' w='16000' x='83200' y='6750'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5750' id='11' name='SPY CMA Trade' pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[:Measure Names]' type='color' w='16000' x='83200' y='17500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='10750' id='12' name='SPY CMA Trade' pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[none:Act:nk]' type='color' w='16000' x='83200' y='23250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5750' id='14' name='SPY Trade' pane-specification-id='4' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[:Measure Names]' type='color' w='16000' x='83200' y='34000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5750' id='16' name='SPY EMA Trade' pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[:Measure Names]' type='color' w='16000' x='83200' y='39750'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='10750' id='17' name='SPY EMA Trade' pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[none:Act:nk]' type='color' w='16000' x='83200' y='45500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5750' id='19' name='SPY FRL Trade' pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[:Measure Names]' type='color' w='16000' x='83200' y='56250'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='10750' id='20' name='SPY FRL Trade' pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[none:Act:nk]' type='color' w='16000' x='83200' y='62000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5750' id='22' name='SPY FRLK Trades' pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[:Measure Names]' type='color' w='16000' x='83200' y='72750'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='10750' id='23' name='SPY FRLK Trades' pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[none:Act:nk]' type='color' w='16000' x='83200' y='78500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Forecasted'>
      <style />
      <size maxheight='600' maxwidth='800' minheight='600' minwidth='800' preset-index='3' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='97334' id='5' param='horz' type='layout-flow' w='98000' x='1000' y='1333'>
            <zone h='97334' id='3' type='layout-basic' w='98000' x='1000' y='1333'>
              <zone h='33000' id='8' name='XPH CMA' w='32666' x='33667' y='13833'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='33000' id='11' name='PFE CMA' w='32667' x='66333' y='13833'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='34500' id='14' name='SPY FRL' w='32705' x='1000' y='64167'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='34500' id='16' name='XPH FRL' w='32588' x='33705' y='64167'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='34500' id='18' name='PFE FRL' w='32707' x='66293' y='64167'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='33000' id='1' name='SPY CMA' w='32667' x='1000' y='13833'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='12500' id='7' name='SPY CMA' pane-specification-id='2' param='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Buy:nk]&#10;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Sell:nk]' type='color' w='32667' x='1000' y='1333'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='12500' id='10' name='XPH CMA' pane-specification-id='2' param='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Buy:nk]&#10;[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Sell:nk]' type='color' w='32666' x='33667' y='1333'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='12500' id='13' name='PFE CMA' pane-specification-id='2' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Buy:nk]&#10;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Sell:nk]' type='color' w='32667' x='66333' y='1333'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='12000' id='15' name='SPY FRL' pane-specification-id='4' param='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Buy FRL:nk]&#10;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Sell FRL:nk]' type='color' w='32705' x='1000' y='52167'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='12000' id='17' name='XPH FRL' pane-specification-id='4' param='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Buy FRL:nk]&#10;[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Sell FRL:nk]' type='color' w='32588' x='33705' y='52167'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='12000' id='19' name='PFE FRL' pane-specification-id='3' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Buy FRL:nk]&#10;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Sell FRL:nk]' type='color' w='32707' x='66293' y='52167'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5334' id='12' leg-item-layout='horz' name='PFE CMA' pane-specification-id='1' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]' type='color' w='98000' x='1000' y='46833'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='0.833333' source-height='407'>
    <window class='worksheet' name='SPY CMA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Buy:nk]&#10;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Sell:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{47845AC7-AAB3-4423-AA81-F5CF70F9145B}' />
    </window>
    <window class='worksheet' name='SPY FRL'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='6' type='pages' />
            <card size='41' type='filters' />
            <card size='252' type='marks' />
            <card size='209' type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card pane-specification-id='2' param='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[:Measure Names]' type='color' />
            <card pane-specification-id='4' param='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Buy FRL:nk]&#10;[federated.0kmipzx1cwae6v14kjfpc0e1w2ew].[io:SPY Sell FRL:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{0BB4E205-13C9-4430-A073-017F415F8DD8}' />
    </window>
    <window class='worksheet' name='SPY EMA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[:Measure Names]</field>
            <field>[federated.0kmipzx1cwae6v14kjfpc0e1w2ew (copy)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{C0CF454B-FB80-43BF-9A2C-945D8AB2C614}' />
    </window>
    <window class='worksheet' maximized='true' name='SPY_StorePred'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[:Measure Names]</field>
            <field>[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[none:sentiment:nk]</field>
            <field>[federated.1xqnrhc05bcv3218go6rz1re346j (copy 2)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{67036EA4-384D-4D8A-81F8-B05F7F7BC933}' />
    </window>
    <window class='dashboard' name='Algorithm Comparsons'>
      <viewpoints>
        <viewpoint name='SPY CMA Trade'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SPY EMA Trade'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[none:Act:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='SPY FRL Trade'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[none:Act:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='SPY FRLK Trades'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[none:Act:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='SPY Trade'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='SPY Vol Trade'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[:Measure Names]</field>
              <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[none:Act:nk]</field>
            </color-one-way>
          </highlight>
          <floating-toolbar-visibility value='1' />
          <default-map-tool-selection tool='1' />
        </viewpoint>
      </viewpoints>
      <active id='21' />
      <simple-id uuid='{3608CF60-1763-475C-A50F-F4EBF96D7EC2}' />
    </window>
    <window class='worksheet' name='XPH CMA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Buy:nk]&#10;[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Sell:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{12223688-16CC-4C93-812E-E0BB85480D3E}' />
    </window>
    <window class='worksheet' name='XPH FRL'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]' type='color' />
            <card pane-specification-id='4' param='[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Buy FRL:nk]&#10;[federated.14gxodt0ghhbe21ff04om11g5ee2].[io:XPH Sell FRL:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:FRLTradeAction (XPH_Act):qk]</field>
                  <field>[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]</field>
                  <field>[federated.14gxodt0ghhbe21ff04om11g5ee2].[tdy:tradeDate:qk]</field>
                  <field>[federated.14gxodt0ghhbe21ff04om11g5ee2].[:Measure Names]</field>
                  <field>[federated.14gxodt0ghhbe21ff04om11g5ee2].[Multiple Values]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>4</value>
                <value>43.899999999999999</value>
                <value>#2018-12-03 00:00:00#</value>
                <value>&quot;[federated.14gxodt0ghhbe21ff04om11g5ee2].[sum:closePrice (XPH_Act):qk]&quot;</value>
                <value>43.899999999999999</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{6BAB1337-36C7-432A-9468-E76444F977D2}' />
    </window>
    <window class='worksheet' name='XPH EMA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[:Measure Names]</field>
            <field>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <simple-id uuid='{2BEB9637-8FDF-421D-B78B-BA09A653CB65}' />
    </window>
    <window class='worksheet' name='PFE CMA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Buy:nk]&#10;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Sell:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='16' />
      </viewpoint>
      <simple-id uuid='{2D9D58C8-972B-4C7D-9953-D437BA37AA4A}' />
    </window>
    <window class='worksheet' name='PFE FRL'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[:Measure Names]' type='color' />
            <card pane-specification-id='3' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Buy FRL:nk]&#10;[federated.046umqe1wfsi9o1fkyfn71pmyi6f].[io:PFE Sell FRL:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{5ED9D1EA-C089-4190-B6E3-46DB69DCBE62}' />
    </window>
    <window class='worksheet' name='PFE EMA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[:Measure Names]</field>
            <field>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{30FABC63-6A13-47A2-9EC1-65CEB2780902}' />
    </window>
    <window class='worksheet' name='XPH Vol Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[none:Act:nk]</field>
            <field>[federated.1ltcvo70dg2nrj15t3aym06x0ri6 (copy)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{AA7FD5DC-C8F3-424A-AD07-0BAB380E846D}' />
    </window>
    <window class='dashboard' name='Forecasted'>
      <viewpoints>
        <viewpoint name='PFE CMA'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='PFE FRL'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='SPY CMA'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='SPY FRL'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='XPH CMA'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
        <viewpoint name='XPH FRL'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='1' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{4E6D8A80-7971-477C-9BB8-3E4C72B2DEE6}' />
    </window>
    <window class='worksheet' name='SPY Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[:Measure Names]' type='color' />
            <card pane-specification-id='5' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl].[none:Act:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl].[none:Act:nk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{55B83606-68D7-41CD-9A07-504C3A5226A7}' />
    </window>
    <window class='worksheet' name='SPY Vol Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='5' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[:Measure Names]' type='color' />
            <card pane-specification-id='6' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[none:Act:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[:Measure Names]</field>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[none:Act:nk]</field>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[yr:tradeDate (SPY_VolTrades):ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{9DD571A0-102B-4B14-B8DA-27A9B39A0477}' />
    </window>
    <window class='worksheet' name='SPY CMA Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[none:Act:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[none:Act:nk]</field>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 2)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7468B73D-5A59-42BD-8F4C-044AAE9BF8BE}' />
    </window>
    <window class='worksheet' name='SPY FRL Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[none:Act:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[none:Act:nk]</field>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 4)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{459093B1-CA71-4EF4-BE3D-3566F6457524}' />
    </window>
    <window class='worksheet' name='SPY EMA Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[none:Act:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[none:Act:nk]</field>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 3)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D9400157-0DBA-4659-B8DC-63084FC02F8A}' />
    </window>
    <window class='worksheet' name='XPH Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1ltcvo70dg2nrj15t3aym06x0ri6].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{61428BED-CFF4-4C03-88B6-44CA356B66ED}' />
    </window>
    <window class='worksheet' name='PFE Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1xqnrhc05bcv3218go6rz1re346j].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{C235B358-F588-4F27-B5E1-5C82CCEAED3F}' />
    </window>
    <window class='worksheet' name='PFE Vol Trade'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[none:Act:nk]</field>
            <field>[federated.1xqnrhc05bcv3218go6rz1re346j (copy)].[yr:tradeDate (PFE_VolTrades):ok]</field>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy)].[yr:tradeDate (SPY_VolTrades):ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{A4C229A2-8534-4D83-8DDC-42B024A0608B}' />
    </window>
    <window class='worksheet' name='PFE_StorePred'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[:Measure Names]</field>
            <field>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[none:sentiment:nk]</field>
            <field>[federated.046umqe1wfsi9o1fkyfn71pmyi6f (copy 2)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{4F8365BF-219C-4E78-8484-5756663BC332}' />
    </window>
    <window class='worksheet' name='XPH_StorePred'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[:Measure Names]</field>
            <field>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[none:sentiment:nk]</field>
            <field>[federated.14gxodt0ghhbe21ff04om11g5ee2 (copy 2)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{D21DA088-4AA0-44EA-B5B7-0D284B9B8D09}' />
    </window>
    <window class='worksheet' name='SPY FRLK Trades'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[:Measure Names]' type='color' />
            <card pane-specification-id='2' param='[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[none:Act:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[none:Act:nk]</field>
            <field>[federated.1yolocj1gjjpwj1fnklko1mci7bl (copy 5)].[yr:tradeDate:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3D442F54-1DEB-4EFF-8376-5328427CB12D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='576' name='Algorithm Comparsons' width='576'>
      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
      BEEQBEGwOyIBEgRBEATB7ogESBAEQRAEuyMSIEEQBEEQ7E6r5gLLysrq6nJ0qqqqKiwWi62L
      0S30ej0ODr1n2gK9Xo+Pj0+T68rLyykvL+/mErWf2Wymurra1sXoNm5uV0982JN5e3s3+90Q
      Ma3nEjHNduwtpvXJqTCSk5OJiYmxdTG63OUvV1BQU1PaCV3Nnj5/e/lO9VT28vmXl5dTUlJC
      QEBA3TKNRoMsi4cV3cHeYlorZ4MXBEEQhK4nSVKjhEeSet+knULv0CMSoPLiAo4eO0ZZlZHo
      wcOIHhACQHFeJvsOHsO//0BGDY0GQDHXsHf3HqosGiZPnoyzQ494C0IvoKoKKadPkHohAyc3
      L8aNG4uLow5UC4f37SG/3MCESZPxdHUCIOfiOQ6fTCZi0DBiI0NtXHqhNxExrf1kWUajaXom
      +YLsC+SVqwyODges3+nE40c4n5FD8IAYRgwZiGSp4lRyNkMHRwKQeOIo/WOH46zre7VIIqZ1
      TI/4puXk5hI3eiIeLnq2b1iDoptLpJfENwk7ufHG60ncv5Vdx2SmjIhi47o1DJ0UTz9dDV+u
      WcedN6/EYrGgKErd6ymKgtlstuE76h720iagsxgrijDp3IlfsJCygizWfL2e229awc4t63GP
      GMP0OBc++2o1t995G1X56Ww/kMSqZfP5ceMaVJ0jg8N8MZlMda9nNpvt5lzrg0/Ku5SIae3T
      Ukzb8/1mzBot+aW6ugTo8J4dOPlFsHDhKI7t3MyBMw6Mj3LhVGIqQwdHUpiRQmJmGbHD+l7y
      AyKmdYSqqj0jARo4aEjd/329PTGbLZw9dYKRU+bgqNcycso8PvtiDcQFUam4ER7oDUCIs4X8
      KgVvx6urTO0hOWgYIIVrc3DzYWiMtbGiRz9vNJIKqGSVGJg60HqHPjLKm3OZpeSfOMKMeYvQ
      abXMnD+PrzbsY3DY/EbnmSzLKIpiF+eaSIDaRsS09mkppk2aOR+MhaxJOFW3bMzkmXX/DwoO
      5ExxJeBifS1TNZt+OMSqm2/usvLamohp7ddjEiCAHxK+IT0zn7DYUcwK92VvSglhg7ysKyUN
      WllCrSpF4+Zdt4+PjztFpVX4Ors2ei1JknpVL4L2MhqN1NTU2LoYvUpWejL7Dh2nqNzI8pUr
      ACNajVPdel9vHy4WF1NSpeLtrgdA1nsiqRUAjarmZVlGq9XaxbkmGqG2nYhpbdfemHb+zBH2
      nbrIypVLwVLExdQz/Of9VGavvBW9pm+3IRIxrX1kWe454wDNmLeYZUsXU51zlrMZhWi12kZV
      c4qiIGm1qCZj3TKjwYBe12NyOKEXCAqPYcnSZUwdO5jt3+8ANChqfXVvjdGATqdDKymY6m6C
      zKiWvh1Ehc4nYlo3UBW2b1hNWrHKzTcsw6E22QmLHMyCOZM5efzUNV6g9xMxrf16RAKkKApI
      Ep7efsyeOpbTyamER0SQnJQEgKEsF8mpHzh5YyrLwlpJqpKeU0GQl6Mtiy70Iper17U6PTFD
      R6GpKcOEFszVGCzWRzxnz2cQHuZPRLgvSWczASi6lIKr/wCblVvofURM6x7Hd2/FNWI0syeP
      5srOYkFRw/ChgKMpl2xTuG4gYlrH9IhbjW3frqFa0SPLEtU1BuYsWISXqwPa02v5el06FRWV
      XLdsJSAzZcxgPv/8K/SymbCh43DoESmc0BtkpyWy71gKer0WRTHjHRaNDpg1fSKrP/8cJ0ct
      Hv4D8XHW4j1yMt+sWc26ZCcqqk2sWLnC1sUXehER0zqZpYqNG7djsVRzLjWP9evLGD1xBsfO
      nMUr0Mj61JMARA4eweBQ57rdJs6+jq8++Yhg/1X4eTg19+q9lohpHSMGQmynmqQkSj/9HMP5
      82hcXXCePJl+t97CVbchHWDOPIxx11tYck8hOXqgHXQdDpMeQtJa7xDtadCqnqizP39zQQEl
      H31C9fHjADgNH47nbbegbWaU2c6immsw7Hkbc9K3qDWlaPyHop/yKNrg0XXb2MtAfD1VZ33+
      HTnHTqfn81HCcc5mFuHqpGf6iHBunROHXtd0l/Umjy9iWo/WUz7/tp6n+SWV/GfTMY6mZAMw
      e3QEN7rtREr+usWYpnnxxRdf7PJ3080KCwubHZq8M9QkJZH3+5ex5OeDoqDW1GBMOYuk1+Mw
      qHMuEpbCVKo/uxW1LBNUC5iqULKPYck7g27QdSBJGI1GjEZjr5uioK/ozM/fUlZG7nMvYDx7
      FsxmMJsxZWRQtW8/LlOnIHdho8SahOcxn/wCTFWgWlDLszEnbkATOhbZ3RoIu/o7JbSso5+/
      qqrUnDxJwR/f4EJ6Dgcc/UnTuKG5mI5mz85rnmOn0/N54V/fkVdShaKo1BjNJF0sIDWrmOnD
      +7dqsEIR03q+lj5/VVUxnDpNzsGj7LpUwZmsEpwddHi4du4j27bGwrJKA0/8YwvJFwsxWRRM
      FoWUS4Wcu5TDJOkAUgsxrUc8AuttSj/9HJroJli6eg2u8+YiO3WsqlVVFEwn1oFy9VgMlvRd
      mC/tRxs2oUPHEHqW8k2bsRQVXbXcUlRE+eYEPFfd0CXHVSrLMJ/b2sQKM8Zdb6G98YMuOa7Q
      fVSjkfw//4WaY8f5tl8MCSHRqLUJy9deKvElKdx8jXPso4TjWJSrHxYcScnmRGoew6P8r1kO
      c/JGEdN6qcvn0KGUHP7rNxqDXAyAxDGWBsgsMlzEcfhwXGfNRNJa04oLuSVs3HuWnKJKArxc
      WDhxIP39Pa95rLbGwvV7kiksvXr+shPGKM6YwhmiT7cuaCKmiafN7WA4f77J5arRiCkjo92v
      q6oqSl4J5gMpWFIPN7udJbfv92ywN8ZmzikAY2pqpx9PNZqxnM3C9ON2MBua3EacZ33DxdXf
      cCbxIvtdQ9ncL6Yu+QFQJYnN/WI4ml3R4muczbz6gnTZuczCVpXDktP8+STOtZ6t5IsvyTuZ
      VJv81NebqMDXOQqHzmRQ/O//kP/q66hmM4eTs3j87S1sPpDKsXM5bD6QyuPvbOFw7SOqlrQ1
      Fp7NaP7cPG9u/CjvyvNM1AC1g8bVBUtxSZPrZFfXJpe3RFVV1IIyLOl5UFk7BobWpdntJQeP
      Nh9D6NlaOm/ac041R7UoKJmFKBfzwWwBqYXzzFGcZ71ZTbWBtz/fzc5kEwRPbXHbQy7BzGxh
      vauTnuLypsfncXXSX7MsqtkCpua3EzGtZ6vavZvDLsGNkp+GDrqFMKQ6j5pTpyjd9h1vH63G
      ZGk8qKXJrPD2mgP868nFaDTN1720NRa6OTd/XrlIjWuGroxpogaoHZwnT25yuT4yAl2DWYxb
      QymuwHIkFcvpi3XJj+Trjm7EdU3voHNGGzmrTccQej6XZs4pAJcpza9rLVVVUbKLMO9PRjmf
      Y01+NDLaISOR+zXdHVY3aFGHjyvYztuf72ZnSl6rOmZUalpOYqaPCG9yuaNey/jYkBb3VRUF
      y+kLyPq4pjcQMa3HW68JYq33kGbXV8n1509ywg6Kyq9+JAVQVFZNem5pi8dqayycPjy8yW0d
      JQOjHVIaLbsypokEqB08V92A44jhjZZJjo54P/xwq3uBKeVVmI+nYTmehlp7skjebmjHRKEd
      0h/d0Hg04VMa76RzxmnhH5FdvJt4RaE3cxo1EveVKxqfP5KE+8oVOI0c2e7XVVUVJb8U86Fz
      WJIzwWgGWUIO9UE7IQZNqC8O054AnXOj/TThU9BP+nm7jyvYVmFBCTuTc1u9/cCQlmPKrXPi
      GBUd2GiZo17LEzdNxNOt+UawqqJgOXUBtbgSjfc4NGFXXMBETOvxDhxPY5N7VKNHp1cKMxR3
      2vHaGgvHDArixllDaFg6R43Mzz034SFX1i1rKqbZxSOw4vIaDiRmUF5tZGCwF8Mi/VvVa6E5
      kl6P79NPYTh9GkOqtRu80+gxaDyvXY2rVlRjSctFLSyvfz13Z+TIAGSP+scRktYRp2X/wHJp
      v7XLqIMH2shZIlD0YZ43XI/LhAlUnzgBgNOwYehCW767bolSVoWSmo1aWlW3TPL3RDPAH8mx
      /o5NGzEdl59sxJz6ParB2mVUGzq+U4d0ELpXXllNsBU2NQAAIABJREFUq/9+3h5OLJ4U3eI2
      ep2GX985jROpeZzLLMTVSc/42JBrJz+nL6IW1U65MDAM7dR3RUzrRVRVZeuh5tvkAHiaq5lR
      mlb3e0z8dLyOVjdZC+Tl7kS4/7Wvk22NhbfMiWNKXBhHz+YAMEEL/coDUZQzSF6aZmNan0+A
      DiZl8qfP9lJjrO99MCo6kGdvndKm8SuuJEkSjkOH4jh0aKu2V2uM1sQnt77tkOTmhBzuj+zd
      dJdPSZLQhk3oQO8IlbOnj+LiP5AgH+sxVIuRfXt2U26QmDR5Mq5OOkpyL1GOG6H+nqAqHD5y
      nFGjRyIuf91PFxrSoaQHQK2swXI+p3GS7e1mTXxcm+6hKLv4oB/WNT3NhO7n5+4Iqtp0EqSq
      ODvqAIlR0QHctWAE7i7XHmZBkiSGR/m3qseXqqpYEjPqzkE5MgA50DoPWsdimtBdjCYLr3y8
      iyOp+c1uE1ldyB15R3BVrNO5OA4disecWTw0II9XPt6FyVzfDkinlXloxbgW2/801NZYGObv
      QVhtcmU+dBZV54k+dhWyf79m9+nTCVBxec1VyQ9Yu25+su0kdy0Y0eVlUA0mlIt5KNnFcLkb
      qYsDmgH+yD5d2PDPWM43m79Da6nBXxtYlwBtWb+WiDGziHNR+Gr1Wu68bRUleRlkE0iovydH
      d21F9Y0VyU8vVHeuZRVZu2dQm2QP8Ef2EuOq9HWq0UjR+/+m9OARvu0Xg9YhiKs7ncPUQf48
      cWfXtblRVRVLcgZqvrWthxzuhybUt8uOJ3SNj7ed5Mg1em3dMDqY4Gxr21XHEcNwnWntBj86
      Jog3fh5f2w2+ggAv19pu8F3f2F2tNqBW1IAsIXm7t7htn06ADiRmXJX8XLbjWHqXJkCqyYxy
      IR8lq7A+8XHQounvjxTYr0OP4FpF78aSJUtJP7mXuk6qqpESg46BIdZgFOWtIbO0fnLG0rx0
      Uks0XD81rGvLJnQq1WxBuZSPcqmg/lxz0qOJCED2Fb1r7IGqquS/8Reqjx/nvYDxJDo0UUuj
      qkwb5M/PV3W8UX1L5bAkZ6LmWGu65f5+aMKvXWMk9Dw7jqW3uH5kmCcTbo1v9lrW39+DB5aN
      6YKStUzJsybekpcbkrblpzx9OgEqrza2a11HqBYFJaPAejEy1w6WqNci9/dDDuyHJHduu3Oz
      2UxNTX33VL1ej9zcMYzlaJzqqwO9ffpRXFyGG3DswE6OW0zcdfdPOrV8QtdRLQpKVm2X9svT
      PDtokcO65lwTei7DqdPUHD9OiqMPic5NJxyDwnx4vItrfpRzWag51gaxcqgPmgEi+emtKlq4
      Ro4I9+bZO6Z3/Y18O1xOgOTA5h99XdanE6CBwV4trOvchneqqloTn4YXI42MHOaLHOKNpGl/
      e6OWaLVaHB1bORS5Rotqrj+pjQYDDjodACPGTYW8k6SkZzEsKrgriip0ElVVUfNLsZzPgZra
      Grzanl1ymG+XnWtCz2U4fx6TJLPNM6rZbVKzO6+nTlOU9FyU2gET5UAvNJGB19hD6MkGBntx
      5kJBk+tWzBqGg+O1x3/qLqqqgsGEUlhmHU5Gp0FqxWP/Pn2LOCzS/6qumwAaWeL2+GGddhyl
      tBLLkVSU1Bxr8tOwm3F/v55zQdK6Y64uwFL7lOR8RiFh/vXPSCfOWkjy/u3klzU9hoNge2qV
      AcvxNCxnLlmTH0lCDvFGO2EQmgEBPedcE7qVpaSE//MfS5KzX7PbuLViwMJ2Hz89F+WCtbGs
      FNAPOVpMZtrb3RY/HI18dQ3PqOhAhkU2f551B9WioJRUYLmQh/nUBcx7EjHvS0Y5a22zJPt5
      tqp2qk/XAEmSxLO3TuGTbSfZcSy9thu8N7fHD2NweMca5alGM0pBKWpeKWpJ5eUDIgd7IYf5
      Ielt+9GW5F5i54FjlORlUK1JJyvFm/jF85g+cQSff/4ljloF/4GjcW5YTEnD0mWL+WT119x6
      203omjj5BdtosoGzr7s16XHuuolShZ5Pqa7myJ4TJHq33N6iucEMO8pyIQ8lPQ+oHWYhJrhH
      PhoR2mZIuC8v/XQWHyac4GxmIW5OeqaPCOeWOXHd+vdVVRVqjKilVahlVSilVVBVUxcHG9HK
      SJ6uyBGtG5C4TydAYB2/4q4FIzqlwbNabUDJL0XNL6sbvPAyyd0ZTWwoUhfeZbWFp38oixeH
      XrU8KGIIt0Q0HtEzPG4i4bX/17v04647bu76AgqtolosKBcbN3CW3JzQRAcjuXVs0l2hbzBl
      ZHAB5xa3GRUdyC1zmhmJuQMsmQUoadYBFyUfdzSDQkTy04cMDvfllftnd+kxLj++Ug2mBv+a
      UY21v1cZ6puVXMnFEcnVEdnTBcndGZwd2nT+9fkEqKPUqhqU/DKU/FKouGIuHK0G2dfdWuXr
      0fycSoJ9UFWVE6m5nM0sws1Jz7jYEPq1MFBci6+lNJizy9T1jemF3stSUkqZtvlawPGDg3n2
      1il1FwZVVTslSVGyi+oeOUhermgGh4rkR2hEVRRr7U21EYzm+iTn8v+NZutPa2g1SO5OSO7O
      1h83JyRdx1IYkQBdQVVV1PJq1PxSlIIyuLIlvE6D7OuB5OOO1M9VfOEFoMGgYQ3Gzfj3xmM8
      cdNExg5qW6Nytbwac9IlqKydpV2WkEN8kPv33AbO1RUlnEq+wNjR9VPE5GWmcfDYGfoPHMLQ
      6HAATp08xdA46+CheZdSMTh4E+rnaYsi9wmqqpK/MYHdbuHNbjNvbCSSJFmT6vM5KMWVaEJ9
      wFEPJuvUKMiyddwUWQaNXL9MY/33yjinZBdZp1ahNvkZ2l8k5XZCKSpHySpCE+5nrXGRZWst
      TrURtbKm9seAWlljvX6qTT2raoZWAw46JAet9V+9DslZj+TqhOTSvpvJFg/X6a/YC6mqan2+
      WFBqrekxXJGROumRfdyRfD2sWadIeoQrNDVoWI3RzJ8+28s/H1/U4pQBDSmFZdaJcRXrKL5y
      kBdyf9u3KWtJ8snDpOWUkp9fWJcAVRVnkrDzODdev4j9W7/hmKxnRFQQp05ZEyCLoZyEHw5y
      86032bj0vdflMXcuXMzD5B/Z5DZajczo6EAsmYUo2UV1tdiWpIy2HUySapMiyZog1fY+lDyc
      0QwRyY+9sGQWopzLAhXMBWWt31GWQK9FctDV/+ugs8Y1Bx2Sgx4ctN1+HvXcqNrFVFVFLa5A
      ySuxzlVzZTWcswOyr7u1tqeZ6QME4bLmBg2rMZrZn5hB/LjmuydfpuQUY0nJtCY/jjq0ceFd
      ctfT2WLiRhMTB2tWr61bdurIYabMiUev1TJl3ny+WLONEVFL6tYnfPstcxYtRiuum+2mllai
      5hTj2sKH6O6sR80pRjmbVb/QQQeG+uETgPoBNJs9mAoWFSzUPZKV3J3RxIUjtXJqA6F3U3Ib
      nEeyZD0nrjxtNDKSi4O1ZsjF0frj7NBo7sGexK4SoGvV9EjuTkg+Hsjebr3iwiP0HC0NGtbS
      usssl/KtwygAkquj9cLioOu08nWGhgNuyrKMXt98UCspMTHIy3rjIGmckSXrZ1BVksuaLz7E
      LWQEgf1Eu7kOqb1p6x8eTlh+MRcdrx74bdrAAOt4UWB9fB/sjRzigyXxEmqVAe3wAXUXJ1VR
      rImQRalNeBRQFFSLCpfXXf7XQYfk6SJqw+2EUlZV98gTapPf6GAwW6znjSTV1+r0onPCbhIg
      VVGwnExHLa5stFzycEby9bDW9PSwC47Qe7Q0aFhUC4NuqqpqHUDu8hgqni7W9hTXGMLdFlo9
      4Cag1aqYTCo4SICKUlvD4Ozpz3UL5/H5uu1YJsah6T2xssdQjUZKvviSql27sZSXU+4XhqN8
      dTuzkd6urOrnZK2x0choR0fVJTvauHBUi6VRmzJJlq0jw11x7ok/kaBk1k7p5OxgTX6CveuG
      3+jN54f91F0azKi1jUoldyfkiAC0E2LQjoxEE+Ijkh+hQ9ozaJiqqlhSMuuTHx93NMPCe2Ty
      01YREUEkJaUBUJZ7Hqd+9bM6O7h6MWfCIL7ZstNWxeu1Ls/5Vb7hWywlJVSoGl7XRZHi0HjU
      +zB3J341Kgx97eMpOdzvqscQPbVBvdDzWGsOvdEOC0c7KKTPDMFhNzVAkpMe7ZiBoKoi2RE6
      XVsHDVMVBcvpi6iF5YB13ho5uncOIHdg53ZyS6o4l3qO9evXEx4dR9zQcZxeu4Z16aeoqKxh
      2cqVjfYJiowj6MK3HEq6wJhB/W1U8t7n8pxfp538OOgWQqbegxLt1Reji2XVnCquIs7Lxdqe
      sZOn/hHsi+zuDO4tjzXVG9lNAgT06J40Qu/X2kHDVJPZmvzUjiAu9/fr1ZNGjptqfc+LFy9u
      tPy6Fauu2vamm+t7fY2fdV3XFqwPMpw/z7f9YtjcL+aa2553dWZ4YD/kcP8+00uruqKE77cm
      EDVmDtGh1qSusiSPLd/tQlVVRkyYRkSwLznnT1OIN0MiArAYK0n4fj8L4mf16sc1QufrG98K
      QeglVKMJ8/G0+uQnKrBXJz9C98r18CfBM7pV27p5OqOJCek7Nd7GcnbuP05osD/lVfUdCzZu
      TGDOdUtYvnwJu7dtxqRCTWUZZZXWRvtbN24gbvRYkfwIV7F5lYjFWM3OH3dQVmXEbFGZPmce
      3m5O7PlhC4Xl1jY7Dm7ezJsxCcVUTULCFowmC0FRQxkb17pAIAgAmWnJHDqeCBJ4B0UwZeww
      lKpCPlydgJendebguNETCQ/y4ULKCQ6fPg+ylnnx8bg6dvwi0miMHwcd2rj+YoiFPqgrY9oJ
      yQ21FY9JA7xcmTlyQKe8n+5msVgwmUx1v2s0GmRZBr0b82ZPJ/3kXgovrzSXgqMfbg7WS9mw
      SB9Ss8q43Fx/33ffEjZiBqE+154ZvDeydUzr7WyeAGVeTGfQqMkEeLlhrCpmXcL33LB8ITlF
      FaxYsaLRtju3bSZ6zEwiAzzZtPoTssP6E+ghJoIUWie7oJTFS5chS7Bt3WfkVgxBzssgIm4c
      U0fUj9NjqS5hx+FUbr95OZVFWWzcvJ1Vy+Z36NhKdpF1jB8VcHZAOyy8x46NIXRMV8a01szo
      PjDEi8dvnIhe1zsbOUuSZE14GvzeLIsZSVv/megdHDCZTDgCxw7sRDUZ+MnUjk183ZPZMqb1
      BTZ/BBYWFUuAlzVTLSvKw8HFHVCbnOg1t8xEZIB12PwxI4dwJvk8AIqiYLFY6n7Utgy9LdiN
      MWPHWcd9Uy2UVBhw0svk5uXh69e4l1ZmWjIDh45EAly9glANJXXrGp5niqK06rhKfql1DA3V
      OpGpdmSESH76sK6MaeNiQ3Bspi3jvLERvPOLhfzxgbkEevfeGg9ZltFoNHU/LSZAejcs1fXf
      z8KCYry83AEYMW4qt66Yy9pvNjf52fcFtoppfYXNa4CsVI7t/YGzeQaWLY4HLPRz0rN+/XqM
      hmo8/COYM3UMmgYTn7m5u1N1qci6t6o2+sOpqkpVVVV3v4lu13BgOqF1KksLWL9+EyOnzsNd
      L+HpG8LRwztIOahQXlFF/OJlVFfX4NrgAqLR1lcVNzzPFEXBZDK1fK7ll6FNL0ACVE8XTFH+
      YDJaf3oRi6WZ2ZiFZnRNTHPQwCMrxvDXNYeoaTB6/cgof26dHYteq6G6urrb3mVna3NMk/T0
      czRzNiOfQBeF88Uqk911XKhd7eHXn9EDLrB970nmTIzr9PL2BN0e0/oIi8XSAxIgVWHjms/w
      iR7LDRMH1i7UMmvBorpN1n78IRWWMVhM9V/48rIyXJys3fIu3ylcJssyzs59r8vela58Vi60
      LD/jLJt2HGX5yhvrHiWERMYSEhkLQE3RBdb/eIDxEY4UlZcD1l4mFnP9eafT1QcOrVaLTqdr
      9lyzZBaipNWO8ePngXZQCPpe2htHI8aMab0ujmmTh4UzZEAA+xMzqKg2EhXszbBIv145hMKV
      WoppJbmX2HngWO1vBWSlOBC/eB5zFy1j/57dpBlhxfKlSICnXwgarBf8mFHTqDp8EJOiomti
      rK7erLtjWl+i0WhsnwCdP7EH14ixjIsbWLfMWFlCsUHG38sdVTFTYVTQyxDooSc1p4TIAE8O
      HTvDyDkrWnhlQWhIYct3e7j5tjsaBcHMjEsEBocgSxKF+fm4eXoSHBnOjrXfMSEunMqiLGTH
      ts1WrqoqyoU8lPQ8oHa27NjQPnGBEq6tO2Kap5tjq+aX60s8/UNZvDj06hUaHROmzrhq24bf
      2pGjx3Zp2Wyj+2JaX2XzBKi4rIr8wiTWZyQB4B0UzoTh0STv28H+qhosJjMTZ89HL8Hk2fPZ
      siWBU0YLITFjCXAXDaCFVrJUYjapbP52Q92iiTPi0Sg1rF+3DlmWkR3dmDdnBhpZYtqoKNau
      /RpJ1rJw/oI2HUrNLalPfrzd0AwJE8mPHRExTegW3RjT+ipJ7YMthpOTk4mJufZAYb1deXk5
      5eXlBAUF2boodqm5z9+SnIGSU4Lk74kmOqhPDEJnL9+pnspePn8R02zLnj7/5ORk29cACUJf
      I0cHI4f6IDm3fvJQQRAEoXuJBEgQOpkkSSCSH0EQhB6t99fNC4IgCIIgtJFIgARBEARBsDsi
      ARIEQRAEwe6IBEgQBEEQBLsjEiBBEARBEOyOSIAEQRAEQbA7IgESBEEQBMHuiARIEARBEAS7
      IxIgQRAEQRDsjkiABEEQBEGwOyIB6sMKcy+RsOlbvtuxi8oaEwCpZ05RZbGuN1WVcCIx1YYl
      FARBEATbEAlQH1VTms2G7w4xfc58Rg2J4MvVawFITTxFtQVA5dv1GwgMDrZpOQVBEATBFsRk
      qH2Uajbj4eWDo06Dg6c3uitS3TMHfsA/diK+7mLSTkEQBMH+iASolzObzdTU1NT9rtfrkWUZ
      J+9Q/KTDfPDpl1QW5TJ32c2X92D7xnUYjRK3rYq0TaEFQRAEwcbEI7BeTqvV4ujoWPcjy9Y/
      acHFRMocQ7nj5hv42c/u59CObZitezB7wSIczCUUVhhsWXRBEARBsBmRAPVRJYX5eHr7AiBp
      dOgxYaht/IykYcmSRWxYuwaTYrsyCoIgCIKtiEdgfVTksPEkrlvH1+eOoZoNeEfE4aKpX+/g
      6kX8lGGsT9jBigXTbVdQQRAEQbABkQD1UZLGgcUrVl21fN7Km+r+HzBgCCsGdGepBEEQBKFn
      EI/ABEHokIxzp/j8i9Ws/+YbPv3sS8pqzGAs5LPVWwBQLUY+/uBDqsTzVkEQehBRAyQIQofs
      OXSS62+8GY0E2SmHOXTyHLOG+9at37n1W8bOWojzlWMxCIIg2JBIgARBaBWTyVT3f0mS0Gqt
      4WPUkIF8t2MXIf79SDqTzrR5i4AKAHLSTlHhEEx0iLctiiwIgtAscUsmCEKryLLc6Ocyi6Ki
      1Vhb2Ds6OGC2WAdcuJh6hvWbdhA7ZJBNyisIgtASkQAJgtAqGo2m7qdhAnTkTCozp04kNnYI
      86aPYseuQwCERQ7mnnvvZtemr0X7H0EQehyRAAmC0CFuepVzl3JRLGb27ztIWHhY3TpZ58TS
      hTNZs3YDqg3LKPQNxw7sZN0337B27VrSMvMBOPjjd5TVPp0tzj7PrkNnbFhCoTcRCZAgCB1y
      3bKVFGeksHFTAl6Ro5gwdABonBgaa51qxd03lCkjBlBQWm3jkgq9WUXuOc4Xa1i6ZAnLli5i
      x/YEAIrz8zCpoFoMfLt1D2NGxNq4pEJv0SMaQV86n8zJxLO4eQUwYfxodLKEsbqc3bv3IDl4
      MHnSeHQaCVA5c+wgaVnFjB4/kQBvd1sXXehFjNUVHDp4kOIKA8NGjSU0wNowNy35JGfOXWLI
      yLGEB1l7L1WWFrJn736cvYOZOGY4smTLkvdskkbP2IlTGy/UODN0cP1cc+HRcd1cKtsSMa39
      FEXBYrHU/S7LMpIk4eDqhan8NNVGM9XFOTi7ezXa74fNG5g8bxGOWvv5soqY1jE2rwFKSzzK
      xSIDc+cvJMLfkY1bdgEqa1evZuiYycT278faDVsBOL3/O3JNbsybNYVt61dTbhDtCoTW275t
      K5FDRhE/Zzp7tq6n1KCQefYox9PLiI+fw5Edm8gqrgKLgdVrNzB+2mwCnGrY9MMBWxdd6EVE
      TOsYVVVRFKXuR1WtD091zp4Ee2hYv349Cdt/ZPCQobV7mNn+7RoyKh0YEOBpu4LbgIhpHWPz
      BGhA7EgmjxmGTiPjFxCMyVCBsSQDne9AfD1d8Q+LQVNdjAk4nV7A9LGx6BxdmD5+CCeS0m1d
      fKEXWbB4Of7eHmj1Tnh7OGEwqxw+nkL8nElotXrmz57MoaOnyUtPJHToeNydHYgcOp7y3PO2
      LrrQi4iY1jEajQadTlf3c7nB/YXT+5H9h7Bq5XJuvuVWzh7eTbUCoGX2dSsIdqkh+WK+Tcve
      3URM65ge8QgMoDDnAhu37mThsuspLzxLP+/6cUP6OWkoM4Ks0dZlbD4+Phw7UwyA2WzGbDbX
      ba8oClVVVd1ZfJuoqamxdRFQFQtJp0+id/fDQa3CMyAcV8cec1pdRVXM/LhtM5J3FH4uGkxo
      cNJY64KdfXwwFqdS7OGAt3dI3T4aXf37afiZG41GTCaTXZxrDR9J2EpJQQ4pqZeIGzaYSzlF
      RA8ItXWRWiRiWtu1FNN0egfK8koB6/e4otrY6DHOzAVL+eyjj/G//lY8nXXtLoOIafYT03rE
      X/Xk/h2k5NWw6uZbcNDKlJZqMRrrB10zmBR0GlDV+upho8GATmc9ybVabd2gbGB9Zuzs7Nx9
      b8BGLBZLo8Hpur8ANTzz2MOgd8Kl/1jmREp8dzKHOxZPsV2ZWmCoLOGr1esYM20eMeGBgPWc
      UgEJUA1GVJ0OnVZLhdFYt5/a4OLv6OhY93+TyYROp7OLc02j0Vx7oy50YvdG3nh/HTVF+bz1
      6ef89fXXefMff+sZAawJIqa1T0sxLSh6JDmFO/h63TeoioVJcxbgIEE/Xz90EkiyjmVLF/Lj
      vgPEz5rczgKImGZPMc3mj8AKLiZytkhm5eJ4HLTW4rgHhFFw8Zx1A9VCocGCuwacNQrFVda7
      ouTkc0QM6G+rYgtAwfkTSCFj+cU9NwLQPyyMC+kXbFyq5m345hvmL19VFygAgjwcSMsrB+B8
      chIhEREEhw8g7WwyAIqpCrPa/rtJoXNs+Ho9v3njbYaE+4Okw1trotBg61I1TcS0riIxauIM
      li1dwvLly4kM9QNg7LRZuNd+RZ08/Nqf/CBimr2x+Q3UyWNHqTK4sH79egC8g8KZNDqOEVG+
      fLl6DYqhmtGTZgEwc9YMvv76C1ycHJFcvBkX6GHDkgvufsHknP2AnMIQzIZqvt6wifC4RbYu
      VtMsZaSm56L/YVvdookz4hk3bRZr1q7nlLMzNYqelcv6o5EgxPUka9Z+TXVlJdPjF9uu3AIA
      oWEB7N65F7OicDHlGElFFrwcbF2qpomY1nuJmGZfJPVyE/s+JDk5mZiYGFsXo8uVl5dTXl5O
      UFCQzcpw6uAP/Ot/n1NWbWLomGk8dN/t6DX20b+yJ3z+3cXW3ylzTRnvvfM2h0+fw8nDm7vv
      fZBRgwfYrDzdzdaff3fpCd8pEdPsJ6bZvAZI6L1URSFmxGT+OKK+yllCAWzbXkTog7TO3PvI
      k9zbYJGqgmQf1yWhm4iYZl9EAiS0W9GFUzz5+zfrfs/JzGT5Pb/g3lXzbVgqoS/64O1X2HUi
      DQDVXEN2oZmP136Bt97GBRP6FBHT7ItIgIR28x4wjH//+991v+/f/Cm5LiEt7CEI7XP3Yy9w
      9+VfVDO/fuH39BPJj9DJREyzLzbvBSb0XhazieLi4rofJJlTJ0/ZulhCH1RZUVZ/rhUVU3jh
      PEU2HAFC6JtETLMvogZIaLeSS4mNqou1Ds489MSvbFgioa/6/F9v1T0CA4gePwdv0ZNX6GQi
      ptkXkQAJ7XZldbEgdJVGj8AEoYuImGZfRAIktFlF/kU+Wbu5yXUxw8czffzwbi6R0Fft2Ly2
      mfmdtNxy9924iggmdAIR0+yTCB9Cm2kdnImIiGhyna+Xfc3GLHQt34BgTFq3JtZo0Iou8EIn
      ETHNPokESGgzR3cf5syZA4DFVENGVm7dOhf3frYqltAHDR4xjsG1/y/Kz6W86vLEjZJIgIRO
      I2KafRIJkNBuirGMn955N0aLgt4ziMrCbK6/9zFWzZ9q66IJfcz3a//DP1f/QFFeHqPiojif
      Y+K9/7yLp+gKL3QiEdPsi0iAhHYrSDtN4Kh4JgdUow6YTZAhkfO42LpYQh+0e9deXn3nHV57
      +jlefePP/PpXL+Iqkh+hk4mYZl/EOEBCu7l5elJZVkZAYCDHjh/DZDZzNuWsrYsl9EGenq6U
      lSnIpkIuZBeQdzGNUjEOkNDJREyzLyIBEtrNyT+G5bPHMHLaQhyKzvBxwlFWLZ1r62IJfdDy
      W+/FUaniZ/fexWu/+w0jF64S4wAJnU7ENPsiZoPvxWw3c6+Fc+cuEBkZYdeTUdrbzMm2+E7l
      52SgdfGmn5tTtx+7JxExrauJmAb2F9NEGyChHRQ+/eefOHwujzETJjF9+gzGjx2BXiMqFIXO
      lXnuJK+8+R7ufv2ZMWM606ZNJTTAx9bFEvocEdPskagB6sVsna2bDFUcPrCPnTt3cuREImFR
      g1hxwy2MHx5tk/J0N1t//t3Jtt8playL59m9cyc7d+2msNLCpKkzuefu23HU2KhI3UzEtO4h
      Ypp9xbQuSW/NZjN9L63qfVSLiUN7d7Jh4yZSL+YAkHrmFFUW63pTVQknElPb/fo6B2cmTJ3F
      Lx5/isceup+KrGQSfjzQGUVvFVVRMFss3XY8wVYkgsIiueHWu3j22WdZOGMUn//n35R0YyNo
      EdPsg4hp9qVTH4HlXjjDr3/7KqlpuXzw9Rf8/vmX+Pvf/ogdP1K1qY3frGHwuFmMHOtJbn4R
      AKmJp/CMGoqzRuXb9RuYvOD6dr12bmY6e/Y6dE7LAAAgAElEQVTsYc/uXZy7lM/YCZO59YGn
      GTtqWGe+hWaofPzuH/l6y27iZlzPSM8iiJjD4ilDuuHYQneymGo4dvgAu3ftYfe+A3gGhjNj
      xnQ+XfsVAY5df3wR0+yHiGn2p1MToI//9U/ue/7PfPvXF5AdPPCTqig0gY/ordHtaoovobj1
      Z0CwLwBBgf6N1p858AP+sRPxdW/PVaSGV37zIgPHz+CuB59i8MDwbm04WHbpJLvSVf760lP8
      37bzjBo5kv/tPCmCRR/0w4bPSTiUxrRp07jzgcfwcOmGrKcBEdPshYhp9qhTEyCtVovFbK2+
      M9eUkZZfhpOdPKO3FbPZTE1NTd3ver0eWZYpyM4mOyONjRsLqa6qxMUnlPkzJgJmtm9ch9Eo
      cduqyHYe1ZE3//Xfzih+u8haLVjMdb8nJiXh5h5ss/IIXWf28juZvdx2xxcxzV6ImGaPOjUB
      uvWnP+P5Xz/F2fPpHPrJT7jxJw/hIhrRdymtVouj49V3xVqdlpi40UwfbW28t+GLTyk3TwS0
      zF6wiO9Wf0xhhQFvV4duLnHHuQYOZvbgLTzy3GsUVRhIHTCIP/7pTlsXS+iDREwTuoOIabbR
      qQmQo5sPr/31XZz1WmRZJe1Cdme+vNAGvqERbFn7A9QmQJJGi3y5SlfSsGTJIj5bu4Zbbr0Z
      XUcCuqqQkniKkkojsUOH4ebUHfMTqEyefxMr7nwYi6JSWpiLVla64bhCcxSzkfT0Czi5exHo
      5w2KibzCcvx8vQAoys/B2dMPxw6cbOUlBSQmp+LpF0T0gNDOKnqLREyzQyKm2Y1OvZf5159/
      x8USM1qdDlmj4+9/fIVK8Te0CY2jJ2Nj/PjiqzWs+3otrsEDcWlQde/g6kX8lGGsT9jR/oOo
      Zl5+6iH+8cGX/PhdAvfc9RNSs0s6XvhrqMg6w+vvfoYsa9BpteSdO8oHa7Z3+XGFphnKC/ns
      izVUGsxcOnea/DIDmMv47sdD1vUVhXy7bQ96bfvDTeqxXdxz/8Ps3L2Hv7/+G17++yedVfwW
      iZhmZ0RMsyudWgNkMpkwm2qfY6oWaqoNmBXEhBs2EjtqErGjGi+bt/Kmuv8HDBjCigHtf/2S
      9OPkOUfz1m8fA+D0zm9YvX4bT93Xvp5lrWUxmTCa6vtAG41GjGJeKJvZ9eOPxC9dibeLDoi1
      LjRW1K5V2PjtJhYuvqG+BrIdVn/+Kb/583sMCXYD1cKj9/yUEvMteHbxUK4iptkXEdPsS6eG
      jxU33cLTTz3AxEmTuJh0lNCJ8/EQY033WXpnVyoK8zEpKjpZIjcvDxfXrm+459E/jlDLezz2
      zK8J83Zi76FTvPbXv3f5ce1dw8b2siyj11sfDeQWFHFk13ZqjEYs6IifH48TUFqUz48JGwgZ
      NrXDbc1cXJzIzStgSLAbpuoKKswS+m5IQkRMsy8iptmXTv0qR8RN4t//HMiZ5FSuW7KMmIiw
      znx5oYdx9o/hurEB3Hj99Tg5aHD1i+LVV7qj4Z6GZ159m6TTJyitMnPvQ49303N6+9ZUY3sA
      ZD0z58ajlSUKLyWybcdBFk+LAkBRFBSl48+MbrnnQZ555jn+reqoqqjgtgeexLkbEiAR03oW
      1WLi8IF95BRXEDt0JJFhAaSeOUVgzFCcNdbBXRMvFDIstn09XEVMsy+dkgCdOXaAfiGDMJRk
      UlhahVano6I4n8OHC4kbObJb7tQE21hx58Msu/1BFAW02q7tH1xTVsDhpAzGDhnAyaRzAGg1
      EilnTuLtH0x4SECXHl9ompuThgqjgqejBq+AAIyHswDw8PJlxoK5rPv8I7ICfQnycm33MfoF
      RvDP/32C2WRC1mqRu3iQFhHTeqauHNz1MhHT7EenJEBJJw4zwCmY7JMHOZnasJeEjoHDWg4W
      qmLm6IG97Nm7h5X3Pk1gbYz85quPkRzcAXBw82bejElUFufy9cZtuDo7oTr1Y+n8mWJEVhso
      SD3Ki+8n8Lv7r+PZP7zdaN2keSu5c+W8LjluTXkhew+fIC7UjW3btjVaFzdu5jWDRUlBNrv3
      7KXEqOfW6xcBYCq5xDsfbyYyzLpv3OiJhAf5sPf7zWSV1FBTWcHUuYsI8/fskvfUF0yfPpW1
      X37B2DEjOXv6KCMnzwcu1/pILFq2nI8+XcuNt92Go7Zt39h/vPorBsffQ/ruL9hzMr3BGgde
      +dtf8eqim2QR03qerhzcVcQ0O6V2oh2b16qJadlt2qe8MFe9kJ2v7kn4Ss0qr1++evXqq7Zd
      v/oztbjSpKqqqh7ZsUk9dSG/yddMSkpqUxl6q7KyMjUzM7Pbj2uqqVIzsnJVs8moFhUVNfqp
      qKzu8uNX5F9UP/pqQ5v3O5ucqBpM1eqa1d/ULbtwap96IDGj0Xbleenq2s07VVVVVYuxUv34
      s6vPRVW13edvC9f6ThlrKtWUlBS1rKL2728xqrl5hXXry4oL1JKKtp8b+blZanlVjVpRXnrV
      uWZW2vxybSZiWvcqKytTL168qBqNxrofi8WiqqqqXjq9X123Zaf6w/Yt6qaELeqW73aqiqqq
      CV99rB48eUr970dftvu4IqZZ2VtM69yRoFUD/3jvv7zx8jO09kbP1csPVyDzRMOlZrLSU1m/
      fj2uHt6MGfP/7d13WFz5eejx7zQGht6rKEIS6iuturRqqCOhLm91iUvidU02vnE2N4nt3MdJ
      nOskvsm1c72xvX68xV6vOuq9IFAXaogRAgRIiN4GhjLt/jHSgFYSGhAwA+f9PA/Pw5wy550z
      v3nnnXN+53emEWjQ027XEmJwhjwmLZUTxnImJEZgtVqxWrtG0bTb7XR0dPTb6/JWFotnLhOw
      WzuprCinsqL8iXnh0fH4Gwb2sK1fYDCns37PmAmTmTHW/fFgRo0ZC3Q+Nq2quopb1RVUF/sy
      cswExo1K5MG9UpJHjQVArTOgVXfdnLB7R+DOzk6sVqsi2trz+vHo9AZGjx7dNUGtc40BBBAY
      Et6n7bY0N1JaXvGUOWomTQ1FM8CHSySnDS6LxYJGo0Gne/JeIwZ/A74BBhbOeQWAIzs+paET
      QE3KmAk0l97CWFZDWmJkr7crOc1JaTmtXwugxpYOzPeu8Pa3/5JRI6IAHW+/8w5Bvb5vjpZv
      vfM/wOGgrvo+f/j4E7781S/g4Om3Y9ZqtWi1XS9FrVaj0Qz/8erVas90RGhvrn3icO0j7hy2
      fVEt9TUkjhzJ3/752yxcNB+NyrndjMUze/1cMxavZQZgs3Rw9vh+Tps6iOnhrt/dOwJbLBba
      2toU0dZUg3ljpG7y8z57CuqR55+K6g+S0wZXTzktLGEUFcc+pXPmBHzUDhrbbQR0ex8Wr1rH
      Hz78iOjNbxJi6N0bJDnNSWk5rV8LoPFTZhCd0v3mbWp8X2Q/qlSERycQG6ij1Qoam4UOO+jV
      cK/8HrGxY5+5avfkMVx5qpEGxaby/e9/3/nAA6Om+gZFsGL1OlasXueaFh79YpeqanR6Zs+d
      zadH83lpRgKnb5czJTUKHDZs1mcf/VCr1Ypoa54qgDI2f4GMh/97YiRoyWmDq8ecpvElc+UC
      9u7eiVqtYvLcRfioIDQyCp0KVGod69dlcOrseVakz+vVdiWndVFSTuunV+ng+N6tHD+bR2TC
      aL70xbcI9HXvqZvqa6isqaeyph7uGDGHGIgP9WHf8fOMGTOKtsZqTLoQgrQwd+Zktu/IYvLo
      BC4W1PDmm4v7J3zRNw4rP/6r71CrCSc+1Jef/vTf+aef/ZzU2IHrXNdYVcb7v/uIRrOVZZmb
      eOXl8W6uaae4sBCL3Up9fR1Go5HouBEUXT+LyW4gJjyIKxfOMWvZeoJig7Gc/piLeT7UlhYw
      ZursAXs9wj1Fedm8+08/Z9asmZQXXidy0lL+5zfeGMAtSk7zRuGxSWzYkPTYtBkL0l3/+wVH
      sSI9qu8bkJymKCqHw9HDwTH3lFw5xg/e28c3v/wahZeOc6cjmh9+9wturfsoWTyi1RtITR6B
      zdJBaVkZOr8gEuKiXVdGtDTVU1nbRHJKMtpnDC1rNBpJS0t7wVfl/UwmEyaTibi4OI9sv7Hk
      Ej/47enHRk3de6tzQEdN/ZtvfYlJS18nJdKXX/z8//HjX/yWESHuDLL3KFl0TYmOG0FIoIH6
      mkpqG0zEJybh7+v8tedw2Cm7W4IhOILIsOCnPqOn9/9g8vRn6l/e/Sarv/XPj40E/aP33h+w
      kaAlp3mGpz9TktOUldP65zL4W/lseu0LzJoxmVnT0vj6N37k9rrBYZEEhz3ZaU2j0zMydfQT
      0wOCwxgVHPbEdDH4Bn/U1E7qLQG8vn4FAJXGi9wsKGXE7DFurKtm5Oinf4GERcYQFvn4OX6V
      Sk1SSt8GUxP9b7BHgpacpkyS05SlXwogu83O3TsFnNWbgU5MzbWcPXsWUDN1xkz0w78/lSIN
      /qipdizmlodtC0of1IAjjxDqiYxNJDVp+P9qUarBHglacpoySU5Tln4pgOKSx5Bz4DRZxVcB
      SE6JJysrC/Bh7MuSLIYba3sLFfWtxIQYmLnitUEbNRXUjBv1qG0BaKD4KlnFV5k2f6Uki2Go
      oqyYsLiRtHao+M/3P0ZtG5yRoCWnKYvkNGXqlwJo6vyVTJ2/sj+eSgwBDaXXeS8rn29ljOU3
      R4r5++98nsG5It+H7/3gx4OxIeEl3v8/P+HzP/gFv/3Zv/Cn//xfxPj2+vrzPpGcpiyS05Rp
      +F/rJvpdeNI4yi/8lL+7eYL7dWa+XXjeNW/20vW8uW6JB6MTw8msOdP53te/TEvNPe795bfR
      u76U9PzoX386YLfCEMoiOU2ZpAASvab2DeHXH3zI1ewDfJJTzjc/3zV2hX9QqAcjE8PN0s1f
      Y+qCTH7yd+/y6ne/R4Tr4hgVQZK9RD+RnKZMck9j0SdaHz/GTHyZlenzSUpKIikpiUCthYLi
      +54OTQwz4VExrMxcx5iUJFdbK7h6FbtkL9GPJKcpj6QQ0WettffIvnjD9bi61MiJ3CsejEgM
      V9lHDtL66PZFDjsHd/yRxs4eVxGi1ySnKYscRBZ9cmzHb/nX936Pqc3CxSOfOieqffj7n/zM
      s4GJYaaDP311CwX36ji3ZS0aFdisVia+soZI6f8j+pHkNOWRAkj0SfqGL/HSlJfZdbGCL2+R
      q2XEQNHz3ie7+c3P/oV13/grwqXoEQNEcpryyCkw0WdavR+11ZWeDkMoQGhEECVFZZ4OQwxz
      ktOURQog0WeB4dEUXzjChYJyT4cihrnoiFA++OBjrC9850Ihnk1ymrLIKTDRZy31NSSOHMnf
      /vnbLFw0H40KJs1cTMbimZ4OTQwzjS0dmO9d4e1v/yWjRkQBOt5+5x2CBmdcRKEQktOURQog
      0We+QRGsWL2OFau7xswIjx7IGwcKpRo/ZQbRKRO6TVHjK7ejEP1McpqyyCkw0Wc+/sGkjRzB
      7fxrnL9wEZVfCMkJMc9fUYheSh41FlVHE+fPneN2yT3SJkwc0LvBC2WSnKYskkJEnzksLfzF
      d/4cm28oY0cl8d5Pf8jpayWeDksMQ6ezPuC9rccZN2Ei1sYy/uLdHyPdgUR/k5ymLHIKTPRZ
      bfENoian89aW9QCMDPfhw9O5zJ+c4uHIxHBz6kQ27/7gv0gK1sDCBRS8/TVqO5GxgES/kpym
      LHIESPRZSFwSpddyKSx7QEtzPVn7DzEyNdXTYYlhaGRqElm79tDa1s7ta+cpbdMRIsWP6GeS
      05RFjgCJPtMFxvLud7/IL/73/6K5zcKMBSvZsmKWp8MSw9CWL3+XX/3Xf/Kdb+4iKCKGd//+
      b5ELwER/k5ymLFIAiT6xWzvIPnWSRrOVd//hJ0SFBno6JDFMPSi9w/kr15g8fw1/9heTUHk6
      IDEsSU5THjkFNtw5bJw4vJ+qRjMARfk3MD+8qaTF3Mi1W0V9etqf/+O7ZB2/SHlxAd94+9s0
      ddj7K2IhXOrKbvKNd/6G+5U1bHv/3/nV1qOeDkkMU5LTlEeOAA1zV8+epLaxgerGNqJDDBTd
      ukHIqIkYNA72Zu1h3qrNfXhWK9dKW/jlr/8NNRCm/TEXb5SyZJp0FBT96/LZ07z6p9/jtRUz
      sbdv5Ovv/Btf27zE02GJYUdymhJJATSMmRsrKW1Sk5YQ8cS8/PMniB43h8gg3z48sxWt1g+b
      xYIN8Pc30NpiwmKxoFKr0WpkhDrRPzo7OjH4+mKxWEDji8Zmdv4PaLU6VHI+TPQLyWlKJAXQ
      EGe1Wmlvb3c99vHxQa1WAw6OHD3NkrWbKL54pPsaHN23i85OFW99rq9XN6hoqzKSmZnZbdpB
      fgEs3/JV3vlKX44qCfEkvZ8/P/2nv+IX3aY5250vv9u1kyi9pyITw4vkNCWSAmiI02q1+Po+
      eRTn9uVTdOjDuVdcyP3KGrCUkBwVAGhZsmoNx7Z9RF1LB+EBffkG0fPbnQdeOHYxvFy7cIbb
      Va1sXrMcLM0cyzWSvmAG4ODowf3MSV+JQde7bodLN3+FpZu/MjABC+EiOU2JpBP0MBUWP5rJ
      o59xDxuVhrVr17Bnx3Ys0s9P9ANzwwPKGuxYWuqdExwWqmsaALh9+TS6yFG9Ln6EEGIgSUYa
      piKi40hLSyMtLY34mEjiE1MINHQd7dEHhLHilclkHTzpwSjFUGKz2Vx/dnv3ytnOkWPZLEmf
      98Q65sYqLpU0M//lMYMXqBBCuEEKIAWYNGc5k5LDAVi+6TXCH46gG5MygY2rFnowMjGU2O32
      x/4euXUxm8SX5uGnfTydlBXl8/5vP2bRsuUydo/oN7aOFn73619SXNkMwIVTx2h29oun4UEx
      2RfzPRidGEo83gfIYbdy5XwuObk5bPra94kNcE6/ceE0+WU1ODramDh7MRNGxtHaUMXOfUcI
      MPjh8Atl3crFkliF2xprH3AmJ5fGTh/e3LwGAGt7M9u2Z+Hn74/ZqmXzxjVoVZB7/AAVje20
      t7Ywf9kaEqNDPBy95+l0Txl7udPErsM5TJjYRPmtS9wtKeFEziUWTU8mMXU8memT2b5vL2++
      ugG1Qj6sktMG1sljRxkxIo7WdmfV01BTjcUBDlsHew/nsPmNNz0c4eCRnPZiPH4EqLWxnojk
      cUybMMo1zWFpIa+ols9t2sirr7/GlVznaZrjx46TseFV1m3YSJyuhcKKJk+FLYag2vomlmVk
      YFB33Uf83MljzFi6lrXr1jMjNZjzN+7S3nCfe60+bNqwntdf3Uj2iWMejNrL+QTy1+/+NZmZ
      mWRmZpKcksKiudNcs/1DY5j/UgIHT170YJCDS3Lai7Hb7Y+dbnU4uj6vVSU3UIelEhH45MUb
      Jw7sYd7yNfhqlVNCSk57MR4/AhQQFkUAcP9a17TmqnIiEx8mD5WGcL2GZhu02TWEGpwhp6WN
      IreklDFxk5/ok2C327FarYP4KjzDZrN5OoQhZdSYsUDnY9MeNHcyN8o55P3ItLFcPnyDGLsP
      I0ePBUCtM6BRWVzLPxqDBpxDECilrXX/EupJVFSU8x+VjqjIUACSx82govIg1U1tRAX7DVSI
      XkNyWt89Kni6v3aVSoVKpcJhbefUpTts3LSe/LMV3daycnTvdjosehbHKOuohuS0vnM4HJ4v
      gJ7GarXi49N1uF2vU2OxgUrVdcDKR6/HYnXe3kGlUj0c+wbXYyUUB493RBV9oVKpXaccVHof
      VBYLFqsanU/XrcbV3QZB697O1Gq169fqcOduAbQkPd35jy7o4SXwTnMXrxiIsIYMyWnusdvt
      aDSap55uPXt8Hw2tHezbk0X1vSK400h4wCpAy5LVG7l6eCvGshrSEiMHP3AvIjnNPV5bAAWG
      hNBoLHM9bmi3EeQDDpsVO87zdrW1tYSFOkc47v4GgjNZ6PXDf4S0zs7OxwZBFL2nw0abzYGf
      RoW5thaf0FBCQ3TcrKuFFGf7slu7koHmM4lDq9Uqoq199jMmekdymnt6ymlzlm1kzsP/r+ce
      gthpxEUEcuPhtMWr1vGHDz8ievObhBie0l9NISSnuUetVnu+D9DT+IQkYK29Q01jC1VlRhyG
      cHTAhJQoTl64haW9lVMXbvHS2GRPhyqGuOlT0jh4NAertZNDx3KZ8fJEolLGce/meZrNHRTd
      OEdQTF9HzBbCSXJa//IPCsXf11nkhEZGoVOBSq1j/boMzp097+HoPEtymvtUDnePbQ+Q8qJ8
      8vK77kiuDwxn+aK5WNpaOHMmB3yDmTdnJjqNCnBw6+pFiu/XM332HKLDgp76nEajkbS0tEF6
      BZ5jMpkwmUzExcV5OpQhwMbRffswdzuyO2naHJLjIrh7+wY3C8uYOHUGSXHOw+fm5jrO5J7D
      Pyye2dNfeuoVTEra/0r5TPUHyWl9p6TP1IuTnPYijEaj5wuggSDJQgwGJe1/pXymvJVS9r+S
      PlPeSEn732g0eucpMCGEEEKIgSQFkBBCCCEURwogIYQQQiiOFEBCCCGEUBwpgIQQQgihOFIA
      CSGEEEJxpAASQgghhOJIASSEEEIIxZECSAghhBCKIwWQEEIIIRRHCiAhhBBCKI4UQEIIIYRQ
      HCmAhBBCCKE4UgAJIYQQQnGkABJCCCGE4kgBJIQQQgjFkQJICCGEEIojBZAQQgghFEcKICGE
      EEIojhRAQgghhFAcKYCEEEIIoThSAAkhhBBCcaQAEkIIIYTiSAE0jDU31HD08EEOHj5Gg6kN
      gKL8G5htzvkWcyPXbhV5MEIhhBDCM6QAGqYsphpOnL3KjHkLmT9rCrt37QKg6NYN2mwADvZm
      7SE2Pt6jcQohhBCeIAXQMKULjGTtqqUEGXwxBIbio3l8fv75E0SPm0NkkK9nAhTDRunt62zd
      uo2srN189NHH1Jk6oLOOP2w7BIDD1slHv/sAs8Xu4UiFEKKL1tMBPEvhjcsUlNwHQB8YzvJF
      cwEH+XkXKKloYNqsOcSEB3k2SC9gtVppb293Pfbx8UGt7qprLe0t7M3azYTprzxag6P7dtHZ
      qeKtz6UOcrTex2FpYd+B4zz6ap40bQ7JcRG0NtWRk3sOQ3g8c6a/hFrl0TC9ml9INJs2T0IF
      mB7c5vTVW2TMHOGaf/rwXmakZ2DQKfv3luS0F9fcUMOFi5exomPm7DmEBvpRlH+D2LSJGDTO
      0/q3SuuYPE65uU1ymvu8NiNdv11CZmYmmZmZDxMF3Dx3jCpLIMvTX+FI1jZMHfKLUqvV4uvr
      6/rrXvzUVZTw8R93MXfpWiaPTny0BktWrUFvbaSupcMzQXuRpqpyfKNTXW0tOS4CbB1s27GH
      WQuWEOPXzv4T5z0dplewWCyuP6vV6poeFRWFCnDYrZzOvURaarJrXmXJDVr08YxJCB/8gL2M
      5LQXI6f13SM5zX1eWwA5HE+Wpzfv1rJwxjh0vv4snDWBawV3Bz+wIcJhbSPrUDavvfkGUaEB
      j89UaVi7dg17dmxH6WclqquqiYqKfnza3VuMmDiLIIOe1ImzMFUVeyg676JWqx/766657gEf
      f/Qxo6enkxobAkBZUT5Z+08ybsJYT4TrdSSnvRg5re8eyWnu89JTYFas5iaysrLo7LQwadoc
      xiTHotZoXRVbREQEefkNzqWt1sd+kdrtdsxmswfiHlzdT319Vl15IfWt7Rzat8c5QWMgI2OJ
      a74+IIwVr0wm6+BJNq5aONChei0bGgqunKHkqgONbyDLli6mobGJ8PAE1zIaXdfHpPs+7+zs
      xGKxKKKt2Ww2NBrNU+eZau+z48BptnzuDQz6rn2VmDqez62dz0cff0r0G28p/BSY5DR3tLe3
      y2n9FyQ5zT02m81bCyAtr37+T1yPdnz0AXEjPo/dZnNNazGZ8PczOJfWatFqu16KWq3GYDAM
      XrgeYrPZsFgsT50XkTKZd745+Ynpyze95vo/JmUCG1MGLLwhYdy0Vxg3zfl/e30pu/afYtZI
      X+pbWoAIAOzWrnbn69v169JisaDT6RTR1p5V/ADs2bOf6bPnU37XOaRCWGQMkQ8POqp1frzx
      2kY+/OgjXn3rLXy1Su14IDnNHY9yWvfPWXe3LmWTX9nB2k2vo3N1YtGyJGMdVw9vxVhWQ1pi
      5OAF7IUkp7lHo9F45ymwztZGquqbAWe/gpZOOz5qiA32oaiyEYCLefmMHzvSk2GKYeD+vXLs
      DgcAdTU1BIaEEJ86ljs3r+AAWuorUPuGeDZIL7dwyVKeqGu0QaQvmA6ARh/AxvUZdHQot8+Z
      5LQXZzPXc/FOPZtWL+lW/HRZvGodl0/spdH89B+FSiE5zX1eeQRIq/fDePYk58zt2CxW5ixZ
      iY8K5i1ZyaFDB7nRaSMhbQYxQXpPhyqGOI29naxdu5z9WnwDWb50ERq1igUvj2LHjp2o1Foy
      Vq7ydJheLW5E8lOnR0WGuf4PDFF2J2jJaS+uuaEOh9VMVlaWc8LD0/qhkVHoVKBS61i/LoNT
      Z8+zIn2eZ4P1IMlp7lM5HA9LxWHEaDSSlpbm6TAGnMlkwmQyERcX5+lQFElJ+18pnylvpZT9
      r6TPlDdS0v43Go3eeQpMCCGEEGIgSQEkhBBCCMWRAkgIIYQQiiMFkBBCCCEURwogIYQQQiiO
      FEBCCCGEUBwpgIQQQgihOFIACSGEEEJxpAASQgghhOJIASSEEEIIxZECSAghhBCKIwWQEEII
      IRRHCiAhhBBCKI4UQEIIIYRQHCmAhBBCCKE4UgAJIYQQQnGkABJCCCGE4kgBJIQQQgjFkQJI
      CCGEEIojBZAQQgghFGfIFUAtTXXcKSrBand4OhTv57BTVlJEVW2Da1J9TTUW+6PZFioqazwU
      nHdzOOyUFt+hpr7J06EMCa3NDRTeKcZie9i47Baqa+pd8+trKml/1PDEYySn9YLktD6TnPak
      IVUAVRbfJOtIDh2tjXzw4SdIPu2Jg6ytv6eyoYXr546Tk3cbgIunjtFsdS6Rc2Q/je2SdJ9k
      Z+cnH1LT3Mal04e4cLPE0wF5tdry28/rqfwAAA8SSURBVOzYf5LONhMffvh7OmwOsDZz7NRF
      ADpa6th7JAcf7ZBKN4NCclpvSE7rO8lpTzOkMlL2+ats3JDJhMlTmTs+mutFDzwdktcy197F
      FjySmS+/xNLVGyi9demx+TVlBdSpwhmfHOWhCL1X8/1CdDETmD5lEivXbuTOtfOeDsmrZede
      YuOmdUyY9BKLpqZw+VZZt7l29u3dT0bmatQqj4XotSSnuU9yWt9JTnu6IVUAodWjfxhxwogE
      Hjyo9Gw8Xqy2qoq4hBEPH6nw1WqxAGCnpLCAQ9lXWbVknucC9GJV1VUkjHi471QaNHLkokdW
      lQ6D1lndJIxIoLLS+blsqq/h1ME9JEyeT3iA3pMhei/JaW6TnNZ3ktOebkjtBQdyaNNdjp52
      lcOOzWbD0eNCCia7pd/Y7Xbsdjmv8yyS09wnOe0FyG55qiFVAGlsFjoe5tJ75feIjY3xbEBe
      LCo2hop75Q8fOWi32tABoCZlzHgy0mewa+9RzwXoxaJjYrhf/nDfOWzYrPIF3hMdVsxWZ4bt
      /rkMDotk0ap1VN7IpqK+xZMhei3Jae6TnNZ3ktOebkgVQHNnTmb7jixuXrvC2YIaJo+K9XRI
      XssvPAltcwnnL1/lyN4dpEyY8dj8iPjRpEU4yM4r9FCE3isobhSWqltczLvOgd3bGTN1tqdD
      8mrz5rzMju27uHn9KifzSnl5bGK3uSrWrN/A4d07aLfKz9DPkpzmPslpfSc57elUjiF2zLCl
      qZ7K2iaSU5LRPqNXpdFoJC0tbXAD8wCTyYTJZCIuLu7pCzjslJfeRR8YRlR4COC8ZDQwPAqd
      GsDB/fsVxMfHD1rMQ4XDYafsbgmG4Agiw4Kfusxz9/8w8rzPVKupgYqqBpJTktFp1M7L4OtM
      REWGAWBqrMOu8yfY33eQIh46JKd1kZw2cCSnPc5oNKL1dBC9FRAcxqjgME+HMTSo1IxIHvnY
      pLDI7ldIqCRRPINKpSYpJdXTYQwZ/oGhjA4M7Zqg1rmKH4DAkHAPRDU0SE7rBclpfSY57UlD
      6hSYEEIIIUR/cOsUmNFoHIxY+o3ZbMZgMHg6jAFntVqx2Wzo9UPnEmM/Pz8SExOfOq+2tpa6
      urpBjqjvhuL+76uh+JkaMWLEM2OWnOadhuJnSnLa0GQ2m4deH6Destls2O12dDpdvy4L0N7e
      jq9vz30aLBYLarUajUbj1nO6u3xvYxWe05f3qjftprdtDNxru8L7Pe99dKftubOMO23MnWWk
      3Q0N/f3d1p/P585zuZtz5RRYNyqVCrXa/V2i1T6/C5VarUalcn8IXHeX722sYmjpTbvpbRsT
      yuFOnnBnmf5qY+7kTDE09KZNDMR3ZU/c/X6U1thNbwsKd97U3vwq783yUvwMb71pN71tY0I5
      3MkT7izTX21MCqDhozdtYiC+K3vi7vfjsP8WValU8utYeJQ3tkEpoIcHb3ofvbGdi77xpnb1
      Wf0Z27DvAySEEEII8VneW+YJIYQQQgwQKYCEEEIIoThSAAkhhBBCcTQ//OEPf+jpIAZK3vnT
      XLh8jeLScvwDQwj09+vT83S2tXAh7zoJ8T3fH6Wx9gHGuw+IiXw47L/Dzs28C5y/dAWzRUV0
      VDjSRVA8l72Dg3sPEZsyCh9N31pMc30V+XfuERsd0eNyLY213K81ERoUAIDN0s65nGxuGosI
      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
      domzgVFGJIMAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Forecasted' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOydd1gVV9rAf3Pv5QKXLh0VUBFFsGDvRqOJmrKpbnrPluxuskk2X5LNpho3
      Pe6mF02yiYnGJMbeC1ZAQESQoiC993rrzPn+gKAEBAtolPk9Dw/PnXnPmfeceee8p807khBC
      oKKioqLS69BcbAVUVFRUVC4OqgNQUVFR6aWoDkBFRUWll6I6ABUVFZVeiuoAVFRUVHopqgNQ
      UVFR6aWoDkBFRUWll6I6ABUVFZVeiuoAVFRUVHopqgNQUVFR6aV07QCEoLS4GJvSlZyV75ct
      wyj/EllCUF1eQk5uPmarfNpk1RWlmKydZy6EQlLMTpb/uAGz/MsxmZLCfPLyC7HYFBTZRn5u
      NtnZ2ZRW1CCEoKSwAFuLOsaGGqpqG1tylCnMzSU7O5vc/AIsXRbuNChWiorLuxSzNlWxbOXa
      k+VRmnXPLyxB6SQSR3FJcdcq2ExsX/8TG6MOth6TrSbyc3MoLClHEQJLUx3Z2dlk5+RQ12hE
      2CwUlZTRHAVEUFNZRqPJ2pq+qb6anJwcqmobOrxmyYkUEtMLoKmCTbvju9SxJykrLqIL8wEh
      88Oyb2iwnbTNmspScnLzMHVimzWVpRi7tE1BStxuvv1+DUYZhGKlqPjkfa0sK8ZosVFamE92
      djYFxWXIigDZQlFpRUsmCuWlpa222m32aTNTVFrZpZi5voTlP20+WaYetE+LsYHSimpE84Uo
      KixCli3kZTc/u+VVdQgBpsZaKlvsT5EtlJW1LUdjXRXZ2TlU1zV1eN2C44dJzizBVlfCtv2H
      u9SzRzjn+rdRVJBHQXEZymmrX6GkpLTLvGVLE5vXrDylDhSK8/PIzs6msKT8DByAYuXtV16k
      0tK5WENZDuUWRxy1EgDRG7/l9feXsmXDKp5/6XUqm2wdplv52RtklJk7zdtUX8BXy3cyYfwo
      dC0a//TFf1n24zo2rl3FinW7sNSX89yzz7B9504+XbyINXuS2f79x6w7kI5QbPzv/bdIK6r5
      RVteefpfbN+xi3U/LuPlxV90WQ0dK1bEP195r0ux7KQDGHwGNv9QrHzz0Rss/W4VP333Ba+/
      /w3yaW7yK6++0mXeeYd3sjujjlHDBgEgrI385/VFrN28jZ+++5LdhzLJPbydF978kJ3btvDK
      v57nWEk1H772IsdK6pHN9by28N/UW5uVqMhN5tXXFrN9+3Y+fe99ykztr1mcdYS41DxoKmft
      9tgudexJFr/8T7owH0w1RRQ2anDWNdtm/PYf+ffiT9m6aQ3PPfcK5Q3WDtOtXvImKUUdVMAp
      2CzlfP7leiZOGINdc/b8+Pm77E3Jp6kyh5f//R5W2cw7Lz/Nms07WfnVx7z/9TqU2jyeff2T
      5gSKhfffeJPa1mesm+yz5gTPvrmkS7H0uL249x/cokvP2qdiqeeNha9SWm8mPXo9n/64E2Nd
      Lk8/+QI7d+7kvTdeYVv8MTKiN/H1mj0AGOtyeWfxV615lmYm8Orr/2XHju18+sGHVHZw//PS
      E0g8VoS1roiNUQld6tkjnEP9C9nM54tf5euVa1n59Se8+/kPdOz+zSxc+EaXeR87sJGEQoXh
      oUEtRxp55eln2LxtB98t+S+6My4MsP5/75FcCaaKfLyHzeQvd85HajH6xJgDjJo4p/mHpZqv
      18bx+n/ewdVey/bv3mPDnsOE2o5S4TWJaycGsfClN7nrpjnsiksnuXIh06+8lgXzJwOCfeuX
      s+HAUSSdI39+9DG2fbuEzOwMVv60gUf/9gcMOpmDh9P5ywvvEOTtjKIILHWluPoEc9+DD9KY
      c4hXv93Lwkf+yKPPLGa42y3kEcjDQ/u2lsXg1Zd777+f6vyjvP75Wsx1Zbzx6XJeeOox9q7+
      nMb+s8nc+ClXP/IyAwxNvLn4C/7x7JPopY5qxsp/X/wnkvcA8rMymPX7PzFvYljzKaGwLy6d
      ax6cB0BFdhJJZY688dKj6CTBu/96lKT8G0ha+wHTbn0Mf4r57w97mTnYmROZJ3j++ReYf9tD
      TAoPRLGZWb70Q1LzKnHyCubvf/gdH3/+PTkmezZG+fLQgvlY6svJrBK8+X/34WJvh6IoZMUk
      Exo5lQcfvoG9P31ETEohD979Oz76cgU3DJMImXELfi56APIyknAPGc/991+DRgiEJEjau5Hv
      N+5Ha/Dgb4/97WxM5oKxbcUnxOabkGuLcR04kcfuvxFNy71Kjt1LxPipzT+sdSz7eR/PvfEW
      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
      sQvEvWUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='PFE CMA' width='384'>
      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
      R/T9AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='576' name='PFE EMA' width='576'>
      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
      AImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiIlBwFIBERESk5CkAiIiJSchSARERE
      pOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiIlBwFIBERESk5CkAiIiJSchSA
      REREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiIlBwFIBERESk5CkAiIiJS
      chSAREREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiIlBwFIBERESk5CkAi
      IiJSchSAREREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiIlBwFIBERESk5
      CkAiIiJSchSAREREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiIlBwFIBER
      ESk5CkAiIiJSchSAREREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiIlBwF
      IBERESk5CkAiIiJSchSAREREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQiIiI
      lBwFIBERESk5CkAiIiJSchSAREREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERKjgKQ
      iIiIlBwFIBERESk5CkAiIiJSchSAREREpOQoAImIiEjJUQASERGRkqMAJCIiIiVHAUhERERK
      jgKQiIiIlBwFIBERESk5CkAiIiJSchSAREREpOQoAImIiEjJUQASERGRkuOOdgUuNy/dw/e+
      +XV2NGf5zS//GXPry4qvmTBg64tP8MsXN9KX9hjTNIP33ns/syfUYlmjWGkRERG5qEqqBciY
      gK0vPAETFjO+PEJgRrzKjtU/5GebOvjYb/8R//Ov/oL3L5vEA9/8Bw6eSo1WlUVEROQSKKkA
      NNC6lzV7hnjPXTfgvqZFxx9o4Wcv7OUjn/oNptRXYTsRZt1wFx9YPp4nV68lGJ0qi4iIyCVQ
      OgHIT/GzRx9n2bvvpb7s3Dt/7ccOENbPYdbY+FlLLebfsIz+AzvpzZpz3iMiIiLvTKXRB8gY
      dr70BH11S/jYnHGQ7zpnla5TbYwdNxGLkU1D0comkm4PfQNZxsQTw8UZfN8/70eFYVhcR0RE
      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
      GSH+7usLmDWuhP9z0/z+ro6ISI8Mx3GcLy4mvVVTU0NtbS2VlZX9XRURERE5BrUAiYiIiOso
      AImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI
      6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImI
      iIjrKACJiIiI6ygAiYiIiOsoAImIiIjrePu7AiKDieM4WHaSuBXH5/HhNX0YhnHMsrFkFMdx
      CPiCmIbOR6R/OI5DNBkFIOANaFsUV1AAEjmBmjobeWnj8+xsrKI4s5SLxy+iOLP0qHKWbbFy
      73KWVL1B0k4yd/gC5gxfgM/j64dai5tZdpKP93zE0qo3cXCYO3wBZw6bp21RBj0FIJETJGEl
      eGbNH1my/Q0cx2FL3SaaOhu5Z8FfEvQFu5Xd3riNh5c/QEukGYAdDVWkBdKZVjrzmC1GIifD
      5rpN/Hb5r2mNtgBd22J6MIPK4mnaFmVQUzunyAnSHmtjfc0aHMcBwMGhqmEr9eG6o8puPLCO
      lkjLof87E2HWVK/CwTll9RUB2HBgLW3R1kP/d8TbWbt/dT/WSOTUUAASOUH8ngCZwaxur6X6
      U0nxpRxVNic1D495+OdnYJCbmo+Bzrjl1MpJycVjeg7937Ut5vVjjURODQUgkRMk1Z/KoolX
      MiS9CL8nQG5KHpdNuIKclNyjyk4rncHsYfMI+VIIeoNMKZnOvIqFKP/IqTaz/EzOKJtNyJdC
      yBdiRtksZpfP6+9qiZx0hvNpe72cEDU1NdTW1lJZWdnfVZF+YNkWB9qqqWk7QG5qHkOzy/Ga
      Rw+1c3DojHeyo2EbSdtiRN5I0gMZGnMhp5yDQzgWZkfjNhwHhudWaFsUV1AAOsEUgERERAY+
      dYGJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiI
      iOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJ
      iIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI63j7uwKnhOMQ
      bmti07pVbNlVg42H0pHjmD55Ahkp/s8WpHH/Dj78aAWNHQmGlI9h9sxKMkL+Y05aRERETj+D
      vwXITrJp+Rvc/8sH2bg/yvjJU6icOIqa9e/w8wf/SFvcOVS0butyfv7r32OnlzK1cgJt2z/g
      579+nKaI1Y8LICIiIifa4G8BsiLsqo1yxde/xfDCLAzDAGDixEn84Rf/zgfrq7lwWinEW3n6
      yeeZ87U7Oa+yFAOYOH4cTz/4M15Zto4bzpvSv8shIiIiJ8zgbwHypnHBJZcwvCj7UPgBML0B
      igpyaO8IA9CwexN7jaEsmFzCp6UMb5Bzzj+LLR9/TJvl9DBxEREROR0N/gBkGHg8Jka3Fx3C
      DTtZvrGWMSNLAajdv5fCspH4jyiZVlRBanwfTa3Jw592HGzb7vHPcRSUREREBrrB3wV2BMex
      qN66hif/tJiRZ13FhOJUADrDHaRmDeeI/IPHk0YwBJFoFPAdnIZDNBrtcfrJZBLHcejs7DyZ
      iyEiIiJfgqsCkJUIs+yV51iypppzLruBMydVHG4Cc8Dj8fT4OY+n+9dkGAaBQKDHsl6v91AZ
      ERERGZhcEoAc4m11/O43D9ESHM6f3XknxTmp3UKK1+cj2hYGh26tQLadIBaN4/1MODIM45hh
      yTAMDMMgFAqdrIURERGRL8kVASjR0cBvfvUL/KMv4LuL5uLtoXEmt2AI9Vv3cWQCSoQPEE5k
      kpWRcsrqKyIiIifX4B8E7ViseOsFwnlncONlc3oMPwDFw8fiHNjEjub4Zz/MlhUfkzpiEjlq
      0BERERk0Bn0AsqOtrFhfzYKzz8RvHntcjjezhIvnDuePjz3F/qYObCvJ7vXLeO7DPVx07mx6
      7vASERGR05HhDPLrtiNN+/jJv/8LbWTg8xyd96aedy1Xn1MJgJ2Msuy1Z1n68UY6Y0nSc4o4
      f9GVTB9dfOTFYcdUU1NDbW0tlZWVJ3ApRERE5EQa9AGo6549FsdaSsM08ZjmEeW77udjmCbm
      wUHNvaUAJCIiMvAN+kHQXVds9X4xP+8KLxERERkcBv0YIBEREZEjKQCJiIiI6ygAiYiIiOso
      AImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI
      6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImI
      iIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygA
      iYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjr
      KACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiI
      iOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJ
      iIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOso
      AImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI
      6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImI
      iIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygA
      iYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOsoAImIiIjrKACJiIiI6ygAiYiIiOt4+7sCp5Tj
      4DgOtgOmx8TosYiDbds4joNhmpiGgWH0VFJEREROV64JQHYyzv5dm3nt5ZdpCo3nu7dfhu/I
      Moko7736DEtXbCISt0jNLuTCy65k2pgSTGUgERGRQcMVAahp3xYWv/wmjfEAY0uKqGvsqZTN
      ilcf471dAf7snh9SmBlk76YPeejRXxO44/tMKs081dUWERGRk8QVY4Da2jqYetal3HXHbVSO
      LO6xTKJ5Dy+9v4trb7iK4pw0TI+X8olzuXxeBa+99QHWKa6ziIiInDyuCEDDxk9n4qgy/J5j
      L+6B3dvwFI+nItv/mVcNxsyYSef29TRGnJNfURERETklXNEF1huNdbXkFw6DI4ZG+1KLSPW3
      0toWoSCUAnQNlE4kEj1Ox7K62ops2z6Z1RUREZEvQQHooGQiQTA19cj8g2n6CAT9JK3DnWCf
      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
    </thumbnail>
    <thumbnail height='384' name='PFE FRL' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdd5wcd33/8ddsvb29vd51vTf1s5ol2ZKMCy5gGxvcKMaQUEzCjwQeBEgc
      AgkQSoAYBxMHDMbGgLFxtyzbclHv0umk0/Xe9+re1pn5/XHySbLVrml1ms/z8dDjodvbnf3u
      3M68Z75V0XVdRwghhOGYwl0AIYQQ4SEBIIQQBiUBIIQQBiUBIIQQBiUBIIQQBmU50y/cbjea
      pl3Ispy3QCCAoihYrdZwF0UIIeYsZS52A/V4PJhMJhwOR7iLIoQQc5ZUAQkhhEFJAAghhEFJ
      AAghhEFJAAghhEFJAAghhEFJAAghhEFJAAghhEFJAAghhEFJAAghhEFJAAghhEFJAAghhEFJ
      AAghhEFJAAghhEFJAAghhEGdcT2A2Tbc3cS+mjYsZgVFMVG66DLiHHBoz26G/SoAroR5VJTk
      SEoJIcQsCFsAtNYfIb1kPYXJ9onHNN8QTX1ebrhmHYoSrpIJIYQxhC0A+vp9VFTaTnnM5x3B
      anfCe07+uq5z8ro1765UpqrqrJdTCCEuVWELgJiEGKp3bUUP+tHs8axesRDFZMIcGGHLO+/g
      HfNSsKCSnJQ4AEKh0MRrVVVFVVXMZnO4ii+EEHPeRbEkZO2Ol+mPq2RFUeLEY2pwlL888yof
      uuXD2Myn3hLIkpBCCDF94Wlf1VR8/uDxH3TsdjuqGiIY8KNq43lkUsyYTQrhjychhLg0hacK
      SA9StXsHHtWMmRDDPhPr16cw2tvI7upmnA47Y6PD5M+vxGaR1mAhhJgNYasCOrlhV1EUFEUB
      XUc//jsUBQXltL2BpApICCGmL2yNwBMn/VMfRDn+OyGEELNLxlgJIYRBSQAIIYRBSQAIIYRB
      SQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRB
      SQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRB
      SQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRB
      SQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRB
      SQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRB
      SQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRBSQAIIYRB
      SQAIIYRBWcL1xr7hPo41dYz/oCjkFpbhijAT8o9yrLYJZ3wqWemJKOEqoBBCXOLCdgfQVL0H
      NSqN3NxccnNycFhNhHzDvPDiJuJS5+Fpr2J7VTN6uAoohBCXuLDdAXT1eJi/JAGnRUFRQFEU
      Gqr2k1q6jLTEOFLiVvDcs68QKMnCZgZVVSdeGwqFUBQFs9kcruILIcScF7YAyCrMpWb3dtSg
      nyGvxroN6xkeHiW2wAWAyWzFpGiomgbmU29UFEWZ+CeEEGJqwhYAeaWLyTv+/7aDm9lT00lq
      RARj/gAAuqah6WAymVAUBYvlRFHNZjMmkwmr1RqGkgshxKUhPG0AagD34OjxH3Q8Hi+RkRGk
      ZWXSXFeHruv4R/rQ7XHYzHKVL4QQsyE8dwAmE131VRwcDWBCBUcGq3PjUIilPHmAN99+BzUU
      Ys0Vl2OS878QQswKRdf1OdfRxuPxYDKZcDgc4S6KEELMWTIQTAghDEoCQAghDEoCQAghDEoC
      QAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoC
      QAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoC
      QAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoC
      QAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoC
      QAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoCQAghDEoC
      QAghDEoCQAghDMoS7gJMVcOYH5Ma7lIIcWlRghq6Va4LjWJGAkDXdRRFmYlNnbfPVTfRql3Y
      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
      qQISQohpCnsATIUEgBBCTF/YB4IJIYQIDwkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwqDm7HsBb
      XQOELJ5wF0MIIeasORsAFpOCSQaJCSHElMk4ACGEMChpAxBCCIOSABBCCIOSABBCCIOSABBC
      CIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBC
      CIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBC
      CIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBC
      CIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBC
      CIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBCCIOSABBC
      CIOSABBCCIOSABBCCIOyhOdtNWr276Z7xI9JAd0cxcoVi7Fofl7buImI6FgAXAnzqCjJkZQS
      QohZEKYAgJzSRRTZrADU79rInvp+lqab8JqjWL/qchQlXCUTQghjCFMAmLDbbei6TtDvobV3
      jPwCJz5vB7puYXR0BIvVRoTdjqKAruuEQqGJV4dCIRRFwWSSewMhhJiqsN0BqEEvB3bvpr6x
      kdj8pWTGRxDyJpKbNkpDQz3D7l4ssdmsWFQEcMrJXlEUFEXBbDaHq/hCCDHnKbqu62F7d11H
      VUMc2/Ua7tiFXF6aduJXmp+n//ICH/zwzURYTq0P8ng8mEwmHA7HhS6xEEJcMsJTh6IG8fj8
      6IDJbCEpIRbPmJeRgV5G/aHxKh+/F91swyy1PEIIMSvCUwWkq9Qc2MdYSEVBAZODK5fnoY72
      snv7FkxmM/5AiMvXrcdqktZgIYSYDeGtApoiqQISQojpkwoWIYQwKAkAIYQwKAkAIYQwKAkA
      IYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkA
      IYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkAIYQwKAkA
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='PFE Trade' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdeXgd933f+/fM2bHvALGRWAgCBBeRFClK1GJZji3Jsrz7uklTN0379Enb
      tE3ubW7SPvdet2nSm1w36c1N62ZPmqROZMeyJFvWZi2kKJEUSVDcQBL7ShzgYDk4+5nld/84
      IEiI4CKsB5zv63n4EJj1dwZnfp+Z3/xmRlNKKYQQQjiOvt4FEEIIsT4kAIQQwqEkAIQQwqEk
      AIQQwqEkAIQQwqHctxoxNTWFbdtrWZZli8fj5OTkrHcxhBBiQ9DupW6goVCIsrKy9S6GEEJs
      CNIEJIQQDiUBIIQQDnXLawDraWqkhzePXuSpr32OXKD3zPv0zdr4XQB+9j64l4CurXMphRBi
      Y8u6AFBWio6LfbiNOGZmCL0D4zzw7OfJlzpfCCFWTHYFgFJ0nX6Pqu37MaZenRtmMGtCwDKx
      NA1d19G0TBJYlrWgp5JlWaTT6fUouRBCbDhZFQCJmVEuT3t45v4Chq4NVBrtLfWcPHkSIxUn
      Yvj4qU8+hGeuCehaGFzz0d+FEEIsLosCwOb9dw6zZddjTE9Pk0glmZkOk1dUwLadezKTKMWZ
      t57nSjBJ+6YALpdrwRJcLhcej2cdyi6EEBtPFvUCsmls34srOcPY2BiRWJyJ8RDpVJJwJDY3
      jSKatMkLuG67JCGEEHeWRWcAbrZs3Tb/W3hklNZtTfjMFJ1nThIxADNNTv1e6gvlKF8IIZZL
      7gQWQgiHyqImICGEEGtJAkAIIRxKAkAIIRwqiy4CCyGEWCmReJrRUARQVJflk5/ju2kaCQAh
      hNjgTMsmEk8zNhXhbM84F/vHGQiGicQzT0YoL8rhH3xmN/tbq/G4r3ejl15AQgixAU1FEvSO
      THN5KMT5vgkGxmaIJY3bzrO7qZKvPd7OjsYKQAJACCGynmnZhMJx+sdmuDQQ4lzvOEPjYdKm
      xY01uN/rprI4l6aaEtq3lLOtvpRY0uC5Ny9wpnsMy1a4dI1Hdm3m60+0SwAIIUQ2UUph2YrJ
      cJwL/RN0j0xxsW+C4HSMeGrhEb7bpVNdlk9bfRk7Gitoqi6mrCgHn2dh675p2Zy+cpU//uFp
      gtOZJyvk53glAIQQYr0ZpsXoZJTO/gkuD4XoGp5iaHz2pun8XjdbqgpprC5hd3MlDVVFVJbk
      3fV6EimDN0718fzhTiZnExIAQgixXpRSjE1F+dbfvM/QeJiUYc2P03WN/ICXmrJ8djRW0Fpf
      TlNNMXkBL27X0nvwK6UIheN8751OCQAhhFgvKcPkV779Bv1jM0DmCL+5ppjdzVVsqyulvrKQ
      4vzAqqxbKSXdQIUQYi0ppQjHUvSPzXDi4gj9YzN43S7+1Vce4KEddWja2rzXRNM0CQAhhFhN
      SikSKZPRUISOrqtc6J+g7+oMM9EkAJoGB9treWhHHfoav+tcAkAIIVaYZdsMT0S4Mhiio3uM
      rqFJxmfiC6YpdsV42Pch2wLj7CluxR7W0OoeWJGjf3t2BOP889iTPWh5FXhaP4tr066bppNr
      AEIIsUymZTM5m6BvdJoTl0boHAgxMR3DsK6/s9zj1ikrzKGlrpQdJUl2Xf6P5KSDzFf3ugvf
      Q/8Sz76fQ9OXfpHXGjtH4oVfRMVD1we6/fgf/zXc7V9aEDByBiCEwyllo6YHsMbOgduHu+4A
      +Ivk/dq3oZQikTbpHclU+FeGJhkYCy/op69pEPC62dlUyc7GCnY0VLCpNA+/RyP5w/8VMx1c
      uFDbInXs27g2P4Srom1p5TJTpN7+rYWVP4CZJHn4W+RueQQtr2J+sASAEA6mzBSpo7+H0fFX
      oDJdEDV/Ib7H/y2e1s+uc+mySzJtMjQ+y/m+IBf6JjjfN04iZS6YJsfnoammmO2by9nVVMm2
      +tIFz94BUIkZzMFji6/ETGINvLfkALDDI1jjnYuPTEWwho6jt31ufpAEgBAOZpz7HkbHX4K6
      3lShkmGSP/l19JImXBWt61i69ZVKm0xHk5zrCXK2d5zO/glmYkkM8/q28nvdVBTl0t5Qzo6G
      CtobysnP8d22n745dByM2C3HKyu99EIraz7IF/WRZUsACOFgxrnvLaj856WjmJdfdlwAxJMG
      HV1jXBqc4MPuIGNT0QU3ZwEU5fnZ1VTJfc1VbKsvpaok72PdmGWc//6tR2o6rk27l1p89Pwq
      tIJq1MzgIst2oVctXLYEgBAOZkfHbjMueMtx9wJbKaLxNH1jM1zsn+Bs9xiXhyax7IX9Ygpz
      fTTXlrBjSwX3ba2itrwAj1tf8jUSdZvtqle04ardv6TlAmjePHwP/SLJV//dR472NTx7/z56
      aeOC6SUAhHAwvaQR++qHi48rbljj0qwupRRpw2JsOsrZnnHOdF2l9+oMM5Ek9lxnSE3LNOvU
      VxbSvqWcPVurqKsopDjfv2IXxfWSBuzJ7kXHuSra0VyepS9c03C3fIaAN4f0qf+BPdmd6Qba
      /iU8O76Mpi08U5EAEMLBvPu+QfLl/x3shU+Z1PIq8Gx/dp1KtXKuPffmTNcY5/sn6OyfYHw6
      xo3H+LqmUV9ZSEttCfvbamiqLqa8KHfVyuTd87OYfUfATC4c4cnBs+enl718TdNxNzyGu+Gx
      O08r9wEI4VzKtjEv/oDUsW+jouOgu9DLt+H/xK8teuNQtrNsm+lIkr7Rac72BunoGmNiJk4y
      fb23jq5rlBXm0FxTwr6WTbRuLqN8kUcorxalFGbPT0gf+V3s2RFAQy/egu/R/w3X5ofWtPut
      BIAQTqcUKhnOVEa6G714C5r75vfHZiOlFKZl0zs6zfm+CU5fucpgMMxsPLVgusxD1krY21LF
      jsZKasryyQt416nUGSoVwQ4PAxp6UT2aN2fNyyABIITYUAzTYngiQtfwJB90jnBpaJLZ2M0V
      fk15Pu1bKtjTUsX2zeX4vdLi/VGyRYQQWe3a6xC7R6Y4eWmU7uEpgtMx0ub17pket05Rnp/d
      TVXsbKqgrb6M4vwAXo/rNksWWRkA6XiYy12jtO5uwwMoZdF/pZNZw0Nr61Z87qU/J0MIkf0i
      8RRdw1Oc7QnSOTBBz8j0gufqQKY/fuvmsswNWFvKqa8sXNaLUpwoCwNAcfbUSTqvXKV+dxuF
      yub4Gz8ip+kA9UVJXn71LT731Cdxr/FjU4UQqyeaSDMSinCma4xzvUG6h6dIGuaCF54X5vmo
      KStgT3MV7Q3lbK0txe3W0eWZRUuWdQEQHr5INGcz5XmTAJjxaYaTOXylsQpQVLtOMxwx2VLo
      4aOXL5RSNw0TQmSfa806HV1jnO8d58rwJKFwfEGF73HpVBTnsr+1mh0NFTRWF1OY58f1kYM/
      2eeXLqsCwDJivHt6kE898yRvdZ8GIBkPE8grnJtCo7I8n+BEhC2FJZimiWVdbwc0DINEIrEO
      JRdC3I5SiqlIksuDk1wYCNE1PM3QRGTBNLquUVGcw86GCrbWFtO+uZTSgoWvQ0ynPtJ3XixL
      FgWA4srpY1Rv34v3hoTXNB11w7NKbMvC5cpc2PF4PHg81++a83q95OSsfVcqIcRCtq2IxFMM
      jc/yYU+QU5dHuToZJZEy5m/C0nWNwlwfTdUl7GqqYHdzFZXFufi9bnkU9RrJogAwCE7G0Y1u
      3gt2M3B1FPexDg7t3Ex89tLcNIrh8RjN7at3l54QYmmUUgyNz3Kic4SLAxP0jk4zHVl4xK7r
      GltrStjdVDn/XJ2iPP86lVhkUQB4+cTT159THRkeYf/BPQSUYu/mXN45cYYyb5pk4RY25UjX
      LiHWW9q0CE5F6ewPcaF/go6uq4Q/0h/f7dIzj1moK2Vfyya21ZdSkOOTI/wskbU3gsUiEfz5
      +bjIHFlEZqZI2RolxcU3XQS6Rm4EE2L1GKZFLGnQOTDBhb4JOrrGCIUXPmbB7dIpyQ/QUlfC
      fc1VtDdUUFoYWLPHLIiPJ2v/Krn5+fM/a5pGQXHpOpZGCGdKpU0uD01ysX+C012Zxyx89C1Y
      uX4PrZvL2NlQwY7GSjZXFsoNWBtE1gaAEGJtKaVIpk1GJiJ0DkzQ0T1GZ3+IpGFi3/CM/Byf
      h9qKAnY3VbJnaxWbq4rI8XnQ5d6cDUcCQAiHU0oxHUny8rEujl8cYSQ0u+ClKC5do7osnx0N
      Fext2cSWqiIqinNw6XLX7UYnASCEgwWnorx8vJvXTvQQT2XeCaBpUFGUS0N1Efdvq6Ztcxl1
      FYV3WJLYiCQAhHAYpRTjM3F+fKyL10/2Ek1kXh1YlOfn0/sbuX9bNbUVBQS80qxzr5MAEMJB
      piNJXnj3Em+c6iUSz1T8uX4PTx5o5qmDzav6JiyRfSQAhLjHKaWYmInzyoluXvugZ0HF//TB
      rTx9cOuKvvNWbBwSAELco65d3H3leDevneyZvys34HPz+J4GPvdQC5tK86TidzAJACHuQdOR
      BK+e6OGVE93XK36vm8f3NvCFh7dRWZK3ziUU2UACQGQdpRQqHoJUNDNAd6HllqF55EF/dzIb
      S/Hysa4FFX+O38PDO+v54iOtcsQvFpAAEFlFKYXV+zbJN76JSkxnBupu9JImfI/+Mq66g+tW
      gSllY49fwpq4BCj04gZcm3aj6et716tSinjK4PUPevnx8W7GpjLB6XbpPLGvgWcebKG+Urpx
      iptl7bOAlkKeBbTxmQPvk3jxX4CZunmkJ0DOV/4EV9WuNS+XSkVJvvJrmL1vAzfcJFV3AP+T
      /wk9r3LNywQQTxq8c6af5966yFQk8y4Mv9fNoZ11fOnRNmrLC9alXGJjkDOAdaTMFCo1C2ho
      /kKwDFQ6CroHzV+wYkeWyjYxr7yKcf77qGgQvaQRz96fxVVzPxpgJ6YwTv8lZv+7oGxc9Qfx
      7vs59NyyzF1Bayh9+i8Wr/wBjATp039F4OnfXtMyKWWTevd3MXvfummcNXSC1Ju/gf+Z313T
      M4FYMs1754b43jud80f8AZ+bg9tr+eIjrdRVFEoffnFHEgDrQSnMkZOkjvwO9sQV0F24KlpR
      iTD2zAB4c3FveRjfY7+CnrO8h+AppUif+EPSx/47zL1Yx57uxxx4D/9Tv4W77gCJ538Be/zi
      /Dx26ArW4DECX/6jZa//47JDV5Y1fjWo+BRm1+u3HG8OHkNND6CVNq56WQzT4s3Tfbzw7mVG
      Qpk3annc+nwb/+aqolUvg7h3SACsA2vsLIkXfhHScxc5LbBGTl+fIBnGvPQj1OwogS98G823
      9B4bKjxE+vgfzVf+88wk6Xd/F7vx8QWV/zV26ArGqb/A98gvL3ndS6HllKGi47cen7sOTXxG
      ApUM33q8mUAlZ1a1CImUwbvnhnj+cOd8xe/3unl4Zx1feKSN2vJ8ubgrPjYJgDWmlCJ58s+v
      V/63YY2ewRw4iqflM0tenzXaAbax6Dg7PIJx8Qe3nNccOoFvyWteGk/750mNd3JjO/t1Gp7t
      n1/jEgG+PLTcMlQ0uPh4bx5abvmqrDqVNnn/4jDff6eTgWAmhHweFw/tqOPZQ9to2FQkFb9Y
      MgmANaSU4vCHgzT1dnB3fTIU9vglWEYAoN2mXVrTQL/1V2A9erd4dnwFe2YIo+OvFo7QPXjv
      /4e4tz215mXS/UV4dn6F9Pv/ddHxnpYn0QtrV3SdKcPk+MURvvvWRQbHF1b8X36sTR7OJlaE
      BMAaSaVNnj9yiefeusD/UeCl0HPneQC0QPGy1uuqvR88OWDEbxqnlzTiaXmS1NH/svi8DY8t
      a91Lobl9+B79N7hr92PPDAEK3H5cNXvRS5vXp8ulpuHd/4/BSGBc+MFc91QFvgI8257C98gv
      rdjF8kTK5PjFYZ4/comB4AxKZW7g2t9Ww1c+sZ268gK5uCtWjATAKlNKEUsa/P73T3DswjAK
      uOw7QLN966aXeb583A2PLGv9Wl4lvkP/itTh3wbbuj7Cm4vvsX+Dq2oX5uD7WEPHF8znqt6D
      d/fXl7XupdJ0F+7mJ9Zl3beiuTz4Hv4lPPf9NCoyhkKh55ajF9Qsu/JXSmHZiqPnBnnh6GV6
      RjL3P7h0jUO76nn2UAtN1SVS8YsVJ/cBrLLBYJj//Lfv0z82g65rfHJvAz//mXb0Y7+Dce67
      13vmKA0Ndb0u8RXg/9Q38bR8ekXKYQ6fxLjwPCoSRC9txHvf30MvbgAy3VGNC89j9R9BKYW7
      /iCenV9F8wRWZN3i1pJpk2MXhvneOxcZGp8FwOt2cWDuiH9LVaG08YtVIwGwSpRSHL84wh+8
      eIqpSAKfx8Xf//QunnqgGY/bhbJNrNEzWKMdXJ1O8HvvWRRoUX7+gQCVm6pxb3kYrbBOdv57
      VDJtcqJzhO8f7qR/LNPU4/O42NuyiS8+0kpzTQkul7xxS6wuaQJaBYZp8aP3u/iLVz7EVori
      fD//8ssPsLdl0/w0mu7GXXs/7tr72WSYhE69RE80xfHALr5y3/Z1LL1YTYZp8d75IZ4/com+
      q5muo7qmsbeliq8/sYPm2hJ0CX2xRiQAVlgknuJPftTB2x39KKClrpR/9ZUHqCnLv+U8Po+b
      B9pqeO2DXo5fHObzD2/D417f58uIlXXtiP+Fdy/RMzqNUpln9exuruTLj7bRurlM3rEr1pwE
      wArJvGYvxrf+5n2uDE0CcGhnHf/kmb0U59+5Lf3B9jpe+6CXntFpgtMxeYbLPUAphWHZfNA5
      wgvvXqZreApbZa7ztG0u42uPt7OrqRK3NPWIdSIBsEI6usb49gsnGZ+O4XHrfOnRNv7eEzvu
      ug1/a20JFUW5jM/EeP/8EF99vH2VSyxWU9qw6Oi6yvfe6Zw/INCA9i3lfOUT27lva5U09Yh1
      JwGwTIZp8capPv7s5Q5ShkV+jpd/9oX9PLC95mNdwM3P8bGrqZI3TvXy/oVhvvzY9rvq9mcr
      hbJV5n8Flp3pVWTZCttWKOb+nxtnKyjK9eHzyp9+NaQNi9NXrvL8kUt0DU9i2Qpd19haU8LX
      n9jBzsYKad4TWUNqgWVIpAz++vVz/PD9KygF9RUF/OuvHaSpumRJy3toRx1vnOplcDzMX7xy
      Bq/HjWnZpAyTtGFh2QrDtDAtG8OySaZMLNvGslWmcrcVadMCBYZpY84NM63M/4ZlYVmKhk1F
      fP2JHRxoq1nhLeJsHV1j/OBIJx/2BLnWt25rbQlfeWw7+7ZtkopfZJ2s6gaqlM30RJCZaIKc
      ghIqy4rQgFh4krHQtYdteahvrMOzyNH1WnYDDYXj/L/fPcbZ3nE0LdOG/0+f3UdRnn/JyzQt
      m3/y2y/NP9d9Nbl0jZ/+1M6sv+CcNi1GJyJMRRLomobP60bTwDPXbu526WiaNvf/9d9duoau
      a3hcrvnpdF1b8fZ2w7Q41zvO84c7Odc7jiJzX9jW2lK+9GgbD2yvkaYekbWyKgCCA1cYiyrK
      S/IJDXcx66rh0N5mjv3oBxTufoBiF4CL8qpy3OsUAEopLg6E+L3vHWdsKopL13j64Fb+/qd3
      4V9ms4pSiv6xGf7gxVMk0yYetwu3S8fj0vF73Zmf3Tpulwu3+4Zh88Mzw7S5itLjygzzzi3H
      53WRNiz+7Mdn6BqeQtc0Ht1dzz//4gG8nuwIAaUyzVmWpZiJJvmTH53mbM848dTCB9q55prH
      dF1D1zKVvYaGy5X5X9e1TCDM9azRXZnprvW0ufa38npcmWDxuND1uYABPG4XHpc+31Tm82S2
      odfjIuB18/CuekZDEf72rQt82B3EtGx0TWPLpiK++ont7G3ZtOzvgxCrLasC4EbpWIgf/qSD
      Lz77BD/8wUs89YXP37G9arUDQCnFWx39/NmPzzAbSxHwufn5z+7hp+5vWrV1roZY0uD/+7vj
      vH9hGICdjRX8668epKxw9d65a841WcVTBtFEmnjSIBxLkkybzERThGNJYok04ViKRMokmkgx
      MRMnljQyR/xzZylpw7rDmtZGXsBLPGlgz+0+TTXFmSP+tpqsPqMS4kZZFgCK8FSIifExunuH
      2L7/EepL3bzwdy9RVl2Dprupa9xKbUUxmqaRTqex7evPuZ+amqKoaOVfiKES09j9h5ka7uKl
      czFOJptxF1Tyi1/cR3P1xnwcr2nZfPedy7x8vAfTsqkoyuFffnEfjbf5PJZtk0pbmf8NC8O0
      iCUNogmDeNJgNp4mljSIxNNEk5mfZ6Ip4imDeNKcv05x7QK1fYevngaUFeXwxYdbONBaBZBp
      W1eQNEwg00Rk24qUYaOUImVY890vLStTToDU3DWUawGSnPvfMK8PN20b44bxSjE/f9rIXHtJ
      mxbhaIrZeApNg6bqYp452MTerZVS8YsNJ+sCYCp4lYnJScaujlJYv5PdzdVzz8dRpOIR3vjR
      y+x7+qtU5d68s63GGYA12U3yh7+MPdU7P2xSFRF46reobDu0outaa7atOPzhAN9+4STJtEmu
      38M3nrwPt0tnNp4iGk8TjieJxtPMzh2ZJ9IGpmWTSGUuTKfNj3dErmmgkWme0TWNHL+Hglwf
      uX4veQEPRXkBCvN8FOX5KckPsKupkvwcb1aFbHAqSkfXGCUFAXY3V+LzSFOP2JiyLACuU0ac
      77/0Os9+4VncGvMVwMUjL2I0PMHu2tyb5lnpAFBWmvhz38AeO3fTOC1/E7nfeAnNs/SLvtmi
      c2CC33nuGOPTsY8977V28Ryfhxy/B7/XTa4/83NewEthro+8gJfi/AB+r5vCXB/5OZlh2Vax
      C+E0WXXo0n2hA5VTRklhDtOjfRRWbkYlIxw99SENW7ehpWe5MunmMw+uzVMq7cke7InLi45T
      katYox24Nz+4JmVZTW2by/n1f/Q4//ONc3zYM4au6fi9Lgrz/BTk+sgPeMn1eynIu/5zYd61
      StyHa663jXvuQrTc2SrExpBVZwC2mebq6AizsSR5RWXUVJWja2AmY/QPDmHrPuo31+O/RY+V
      lT4DMIdPkvjez8EtNpH/6W/h2fbkiq0vG0QTaXwel7RnC+EAWXUGoLu91NQ38NHbk9z+XJpb
      Wte+PIV1aP5CVGKRF37rLlzla1+m1ZYX8K53EYQQa0TO1W9Dz6vAs/NrZPqjLORpexa9ePPa
      F0oIIVZIVp0BZB1Nw3vwF9D8BaTP/A0qOoaWU4an/fOZd8TKBUwhxAaWVdcAlmvVbgRTCmUk
      wEqBywOeXOm9IoTY8OQM4G5oGpo3B1i9O2WFEGKtyTUAIYRwKAkAIYRwKAkAIYRwKAkAIYRw
      KAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRw
      KAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRwKAkAIYRw
      KPd6F+BG6USU3p5uJsNx8orLaW1pxOd2YabjXDx3nrjtpnV7O4W5PrT1LqwQQmxwWXUGEA3P
      UFi1hYceepCqQILXD59GKZPDr/6YvLpW7ttWy09efxPTVutdVCGE2PCy6gygpKp2/md/Ti7K
      jGJEp5hxldBYUQDk05ifom/KoKXMi23bC+a3bRvLsta41EIIsTFlVQCATd+lc3T3DRInl098
      4hHS0UF8gfy58RolxXlcnY5AWSm2bS8IAcuyMAxjfYouhBAbTJYFgE5D625qNjfSefYUJzou
      8tC2YpRtzk+RTqfwer0AuN0Li+/xePD7/WtaYiGE2Kiy6hrAteYbbyCfnXv2MxscxJtXTGJm
      AtNWKGUxEExSX5mzziUVQoiNL6vOAPovnWF4Mo7b7cJIxmlu34Pbl8+hXXW8/pO3yHFbBOra
      KfVlVW4JIcSGpCmlsqZLzc1F0dC0m4dr2uKdQEOhEGVlZatUOiGEuLdk1RnArSr2Ww0XQgix
      dNKWIoQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQ
      DiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQ
      DiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDiUBIIQQDuVe7wIspDBSCcKR
      OG6vn8L8PDQN0oko4WhibhoXJWXFuDRtXUsqhBAbXVYFwMTgZc73TVJVWUpkchSVv4UDuxrp
      eOt12LKdIheAh8LSYlxS/wshxLJkVQAUVDbwibptaJqGmazmBy8f5v5dWwildT69fRue9S6g
      EELcQ5YdAErZjPV18vbRk1S13k9edJTGB5+g1P/xLy/4fD4ArHSC4++8waate9HtFLHoLCeO
      HsXtDdDc0kpJQQBN00in09i2PT9/Op0mHo8v9yMJIYQjaEoptZwF9He8yn/64zc40FrCqKeN
      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
      ONu2sSxrjUorhBAbW1YFwGJcbi+2bcz/nkqm8JX6AHC7Fxbf7Xbj8/nWtHxCCLFRZdU1gMUE
      8ktITY+TthXKtugdS7K5MrDexRJCiA0vq84Axge76BoaZ3AkiFedJDK2ift3b+fR+7fy5k/e
      JOBWFDffR7E363NLCCGynqZuvIq6wYVCIcrKyta7GEIIsSHIobQQQjiUBIAQQjiUBIAQQjiU
      BIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiU
      BIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiU
      BIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUBIAQQjiUe70LcDc6j73JUNpHrgvAz94H
      9xLQtfUulhBCbGgbIAAUQ2MRDn3hk+Sud1GEEOIekv0BoNKEk2liExMkXR4KCwtwuzItV6Zp
      Ytv2/KSmaZJKpdarpEIIsaFoSim13oW4LWUxMjhALGWSjIXpHZ7hqc9+Cp+uYds2NxZ/cnKS
      kpKSdSysEEJsHNl/BqC5qNncmPlZKVyRF7g0mmB3bQ66vvAatq7ruN3Z/5GEECIbZH0vIDMV
      ZzQ4jmUrbMsgOGNSXuhd72IJIcSGl/WHyy63h0hwiN6uKyjbpmrHQ2zKy/piCyFE1sv+awAf
      QygUoqysbL2LIYQQG0LWNwEJIYRYHRIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIA
      QgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIA
      QgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIAQgjhUBIA
      QgjhUO71LsBGMBuLcXF4mFnbIE9z07qpmpLCgmUt0zBMuq+OMhKLoAN1BcXEkknG03H86DSV
      VVBdVoqmaSvyGSamZ7gSHCOmTIpdPlprasjPzQHANC36g0EGZ6dRQG1eIU2bqnC71+frYaQN
      Tvb1MmsbALjRqMkrpLmqCrdn/b6ysUSCSyMjhIwkCihyedleU0vB3HbcqNJpgyujo4wloriA
      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
    </thumbnail>
    <thumbnail height='384' name='PFE Vol Trade' width='384'>
      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
      gDBFQQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='576' name='PFE_StorePred' width='576'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='SPY CMA' width='384'>
      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
      /wchjsy20u99kAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='576' name='SPY CMA Trade' width='576'>
      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
    </thumbnail>
    <thumbnail height='384' name='SPY EMA' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdd5gcxZ3w8W93Tw67O7M5Z61WGeVEkgSIDALjgAG/DpizjX3YPs7GvrN9
      DocNB47Y2GRjMCZHgUCAEJJQzmnzanPeyanD+8dIi4SEECislq3P8+iRNDvVXdUzW7/q6gqS
      YRgGgiAIwqgjD3cGBEEQhOEhAoAgCMIoJQKAIAjCKCUCgCAIwiglAoAgCMIoZfqwH/T396Pr
      +qnMy3ELh8M4HI7hzoYgCMKIIH2ahoH29vaSkZEx3NkQBEEYEUQXkCAIwij1oV1AJ5uhq3S0
      NLGvvRvZ6mRsdTVuuwV0jeba3XT0hyitGke2x42EQTQ4wI5dNchODxOqK7EoInYJgiAcj2Gr
      RdVogEDCyvSZs5lYkcdrrywlphrUbXybfVEnM6ZNZMvKN+gJJdD1CEuXLqds/BkUp6gsW7GR
      T02/lSAIwjAZtjsAs8NDVYUHANnuxCzp6FqMbc0BLl9SgkmWmD4+n601rcxIH8BWNAWvywqu
      cZg2PYU/Nh27lDjkQXU8HiccDg9XkQRBEEaUYQsAAINd+9i2q5Y+X4hJs8/BLiXQTBZkSQIg
      zeNlsKmfAQbwpBfvTyXhsJmJROOkploPOZ7FYhGjgARBEI7RsHakp2UXMe/MMzmjupitG9YR
      00A2DNjfwZNIJDCbzZjNZlRVHUqn6RqyrAxTrgVBED4dhi0A6LqGYYBislA8ZhIeJYxPNeEi
      gi+ugWHQ2tJGfmE+GYVFdDU1YBgGhh7HH5FIcYgAIAiCcDyGrQso0L2PzTWtOKwWDD2BnlpI
      utPGWWfN4M3lb5HuseML21kw1YNZ9lKe2sCKVWsg4qN86pnYFGm4si4IgvCpMGwTwQzDQNc1
      dN0AJEwmBWl/37+uqWi6gWIyDT0PMAwDTVVBklEUeei9BxMTwQRBEI7dsN0BSJKEophQjtCT
      IysmPtjFL0kSJrP51GROEARhFBCzqQRBEEYpEQAEQRBGKREABEEQRqlhnQj2abHPv4+na5/G
      F/OhGRqGYSBJ0tDfGDA7bzbd4W6a/E14rB6+NP5LpNnSgOS8hpcaXmJX3y5CidAhaQ87FmCS
      TKiGimEY2Ew2bhh/A4XuwuG8BEN6wj08vudxeiO9GBjJKR0SRyyHhIRu6Ie8Xugu5IZxN2A1
      WY9+oo+hPdjOY7sfwxf3AWBgYJbNqJo6lDdZkg/Li4GBxPuDED74eVgUC3EtfsTPSZEUrqy4
      ErvJzuN7H0fV1Q/9TA++Jgcc/DOzbEY13p8Hs7hkMXPz5h5xIMSxqBuo47E9jyXztH/OzZHy
      ZFaS18ikmEhoiSN+/z6sPIdcm4Ou45HK98FroEgKqq4O/e4cSHrgOB/MY0JPHPL6B0lIRy3n
      B89z8L/n58/ngpILGIgO8PDOh+mP9r//PTnGch3tu3Ug30f6HTn4Oh58PQ9coyPVNR9Mq+rJ
      741VsXJO4Tm82/YuwURw6LqIAHACvFD/Ag/seOCo73lj3xvEtBgJPYEsyUzImMCi4kUADMYG
      +e2m39Ib6f1E58+0Z/L1yV//RGlPtBWtK7h/x/3oxifbS8Ismzmr4CzGeseesDy90vgKD+96
      +IQd71gFE0HSrGk8VfPUCT1uW6CNmTkzMSufbFDE07VP82TNkyc0T59WGzo3cH7J+Wzo2sAD
      Ox4YCiQj0Rv73jisjhEB4AS4oOQCusPdDMYGUXUV3dCRJRnN0FAkBQODs/LPoivcRf1gPR6b
      h8mZk4fSp1hT+PKEL7O9Zzv+uP+QtAf+PtCCgGQlmdATGIaBw+RgYfHC4Sr6YebmzeWqyqvo
      DHViYAy1SHRDP6Q8ALIkk9ATQ+VTZIVidzFF7qITmqdFRYto9DXSH+0fes2iWIiq0UPydPC1
      PrjVBhzWotMMDZvJlmyVIR32OZkkE0sql+A0OekOd6Pq6mHnOeyzNcCQ3m/lHjiPVbEOtXIB
      rqi4AuU4ZsJfXHYxHaEOVF1FNdTDzneghW832YlpsaHWZ/JCMNTqPjjNB8tlM9mIq/Ghz37o
      OnJ4+T74vTDJJuJaHFmSh1rHBz6DD6Y5+DM44ueGgYKSPIYBqqF+5Gd9gCzJnFt4LhISkzMn
      s6RyCT2RHlT9/WPIkvyR5TpwPY90XlmSUQ0VmSOnOdJnICGhyAqarh1W1xz8t91kH7rLsyk2
      FhUvYkXrCnwxHxISsiSLDWFOhAOX8Gitg6GuhINuGw/+wh3LMY527E/aHXCiHU854OSU5Xjz
      9Ekd/Jmf6OMezzUyDGNEt2RPpQPXeri+Q8fj4K6vA/+HQ8sg7gBOgIP7tD/yvR/yno9zjNPZ
      6ViO4c7T6XQtIHk9Trc8ne6G+zv0SR0pvwe/JkYBCYIgjFIiAAiCIIxSIgAIgiCMUiIACIIg
      jFIiAAiCIIxSIgAIgiCMUiIACIIgjFCGYbCusR9/JPGJ0osAIAiCMEIZBnz7n5v5y4r6T5Re
      BABBEIQRStUNegIxXtrWQTCmfnSCDxABQBAEYYQajMTRdIMuf5TmvtDHTi8CgCAIwgik6jq/
      e6OWNHtyVdj+UPxjH0MEAEEQhBGorivIM5vauP9L08lOsbGr3c/HXdtTBABBEIQRaPmebsoy
      nUwr9nL1tAL+sXYfCU0EAEEQhE81TTdYU9/HeeOyAZhZ6qU/FEcXdwCCIAifbitqeljX2M/M
      Ei8AvZpGNKER148eAHZ3+HlrT/fQ/0UAEARBGEGaekMs29lJaaaT6SVeNvhC/LihHVU3eKyt
      77DnAPU9Qbr8UQB+/OwOvvLwelbW9gAiAAiCIIwoP395F/9c30KW24okS3xnzz5mZLgAeHBf
      N37t0P24f/zcDu5ctpdIQqOuJ4jVpLCz3Q+IACAIgjBiqJpOS3+Ey6fk8a1zK9gSCNMVS/CN
      omwUWaItFGOLPzz0/piqsa1lkIFQnPruIGZFYmapl9quACACgCAIwogRjKmE4yqfmV7IrLJ0
      XuweZE6ai3ybBatJJsdk4u1+/9D7a7uChOIagahKXXcQt83MvIp0VtT0UNMVEAFAEARhJNB1
      g+e2tOOLJMhOsdIVS/Bqr4/LstKwmmRcVhPZkkJtODaUZn1TPwDdgRh13UEKPHYum1aAYVN4
      YF2z2BReEARhJHi7poe7X6/hprPLKU138r2aVtwmhcUZqciagcOqkG8ysSUUpaE3RG1XgH39
      YewWBV84wdbWQeweG/9Ws48Br4Un9nSKACAIgjASvLazk4XVWXzz3Apao3Fe7fXx90mluE0K
      kUQCGxJVusJqLc6SZzYTbPLjtpkwpVrw90fZ0jqIz5nCeb0K/6Pa+dWgX3QBCYIgnO403aC5
      L0RVtpuEbvBERz85VjMTXQ4MwyD6ThuOvhisbOcXURvBcBxdkRgIJ1AA3TAIRlR+32Twk1V+
      ptqsuKxmcQcgCIJwugvGVFr6I4zJdvNgWy9/bunmjqpC7IpMeEcvkfWd2G0mAjaFaat6mCwZ
      eBQLbyeiXNdr8LAhoZkkZk/NwzsuHUuBmwfbC8UdgCAIwumuJxCjwxehOMfFX1u7uX1MAVdk
      paEF4ww8VYP7zHyyxqbTlmPHdmkpMQmmV2bw5VnFLL5+Elanmer8VDIWFmEpcAMwLjdFBABB
      EITTTSim8l5DH6qmE1M11tT3kpNqY00oTFw3WJSegiRJhDZ0YUq345yTR4rNxBu7u1hr0gnY
      ZEonZ3PblRMor/BitShUZrswKfurfMNAUmOiC0gQBOF0YhgGv19eywOrGple7EU3DHa0+Zg7
      LY87mjq5sSCTNLMJtTdCaF0nrnl5yBYFj9OCAezpDDAYTpCyf58Am1mhwGNnXkVG8gQDzfDu
      3dC6QQQAQRCE00kwpvLi1nbGZLvJ99jxRxKMy0+lOdPMQq+TrxdmoSc0+h7bgznbgWtOHgCp
      +yv83kCMUEwlzWEeOub9nx+HvXcbPP5d2LcW8s6Aud8UAUAQBOF0oWo6T25spSsQ48Wb5+N1
      WtgXjfPL2nY2Dwb4c1EWJgMCq9vRwwnSrx+HJEsAeJ0WAOq6g1hMMpkuM4R6YdsTOHc8A717
      YezF8JkHoWgOmKwiAAiCIJwu/v5eM796eTfpTgsRCX5e38FjHX2c6XHzxORyyuxWfC81ENrY
      RdrlFZjSrMmEhoFN9QEGm1sGOcPeTeqz10HnZnCmw4yvwfgrwJl5yPlEABAEQRhG4bjKH9+s
      4/Ipedzx2l6+vbASj9PCzxrbaYrEuWtsIeenp2KSJWL7/IQ2dZN+bTXWirT3D7L7BcqW34lL
      +T5BTWKStRNzVgXMuRGK5oLVdcRziwAgCIIwjBp7Q9z/biN/f68ZsyKzZFoBD/UNsK6zn0cn
      lTHR7QAg3hak/7E92CekY6v0vH+AhhXw6g+pnHUdl3bn8fimbqoXXAvTCz/y3GIYqCAIwjBq
      6AnhtpmozHIxtdjD84N+/tXZz0MTS5ngsmMYBrGWAP1P7MVW5SHt0vL3E/fVwb+ugxlfhTO/
      T5rbjVmRmJCfekznFncAgiAIw8QwDF7b2cn8igxuu7iap3sG+XNbD7+sLGCK24ER1wm83UJo
      XQfmPBepF5YiW5Rk4lgQXv/v5APdOd8EJTnqxyTL5KXZj+n8IgAIgiAMk4Rm0B2IsWBsFsuD
      Ie5q7eanFflclJlKrNHPwFM1oBt4P1+N7eA+/0QEnrwB+hvg/70CpuTDYKtZxqxIuKzHVrUP
      UwAwCA32UVNXTziukZFbwpjSPPRYiPfeWztUmKyiSioLs0hE/GzbtpO4oVBRPYGMVAfS8GRc
      EAThhKjtCvDDZ7ezpWWQnlwb7XVhflaRz+dyvSSa/Qw8sQf7pExSFhUjW5X3Ew42w/JfJCv/
      654Fd+7Qj8yKjN2ioMjHVkMOTwBQw+yubaGiehIpNoVVy17EknopmUYXETmdRfMmD73VMFTe
      XraMsWdeSJY1xsvL3uKSyy/CcowFFARBGG66brCuqZ8Ve3v44uwiXDYzj67dRzSh842rJ3Bv
      YJAHJpQwN81FZHsvA8/W4ZyaReoFJUimgx7VBjrhsc+BKwuuuh88JYecx2FRhmYAH4vhCQAm
      J9NnnAGAYWhIWoKEqhMe6MPmyTnkrYlAH0FLJoVeJ+CkPDVBQ1+csZlWdF3HMIyh9+q6jqqq
      p7IkgiAIH8oAmvsidPgifPOxzdjNMv/a0AJAVNXJGp/OY5EA1+Z4meWyE1zVjv/NfbgWFOCc
      k4uGDmpyk3e5rxb5+W+gm53oVz0I1hT4QH137pgMij22Y64Hh/UZgBoLs2bF60TSqqjItDEY
      TyNe38iqlY0EIzEmTp+LWw1isTmH0ng8LtoHg7A/AOi6PvQzXdfRNG04iiIIgjAkrur8/b1m
      Cr0O/vPZXdhMMleckcfE6nR+8k494To/eqGTvAInt5VmcY5iZuDlehI7Bki5sATLeM/7dVki
      AntfQV75a4yi2ahn/wjD5IQj1HW5KRZyU7zHXA8OWwCIDHbw4stvMWHeAqpLcpAAb0ElCwoq
      AYj5O3np7TUsnl+FrieG0kWjMazpyWcEJtOh2TeZTFit1lNWBkEQhCNp7Pdz1/IGdMPAblaY
      U5WJqcrDT7r7mDwxm9a+BP9xyQTOyffgCKr0PbILZJITvEr3D+HUVWh6F965A3rrYMoX4Oxb
      sZiPbYTPsRieAKDHWbZ0ObMXX0mh1zn0QDccCmFzOJElQJKRJbC7vcQGNhHXDczoNHZGmTHt
      xF0AQRCEE6E3GGMgnOCZTa08u7mNhdXZDIbjtGoq9WUOdviD/GZMIRdmphI7oxxrXCO0sp2e
      9Z2Ys+x4v1CNZN7f3x8Pw2s/hN0vQdViWHIfuHNAOrHPPoclAGihPjqDCVr2bKEFQJIor56C
      1t/EnuZurBYToWCYGXPnI5udnDW9kjeXv4ndZOCpmILHLOavCYJw+hgIxfnifWvxRxMYBlw/
      p5gzp+Ryd10HHf0Bpjht/KA0lwKrGbU3Qnx9J75tvUhmGfc5hTgmZrw/vr+3Fp69CWI+uOYR
      KJl30vItGQc/RR3hent7ycjIGO5sCIIwymxpGeSav6zhM9ML+OqZpeyTDf5tVxOT3A5+XJbH
      BLcdLZzAt7SRyNYeLAVuXPPysFakIR8Ys6+rsPEhWPV7yJ8Ki//3kCGeJ4OYCCYIgnAcVE3n
      98truWRyLj+6bBx/aenhgdZebsjL4JaSbMwGhDZ14V++D9lhJvNrkzDnOZGGdufSoacG3r0r
      2ec/51sw7QawOI9+4hNABABBEIRPyDAMXt7ewfY2H49+bRZ3N3XxRGc/v64q4IL0VIy+CH0v
      NxLb5ydlYRHOadnINtOBxKAlYOcz8MZPIXcSfO5RyJt6yvIvuoAEQRA+pkA0wdqGfqYVe7jh
      wXUsmpDDlnSFbYEwd44t5CyXE//yfYQ3dWErT8O9oAhzVnJVTwwD/K2w6wVY/XuQlORaPnO+
      ecrLIe4ABEEQjpFhGGxt9fHzl3axu8PPmGw3TX1hwlk21vYP8twZFRQPqvQ9txttMEbaFRXY
      q7zvz+bta4CND8L2J5Obs5z9A6i+FBzpw1IecQcgCIJwjHa1+7nugbWcMyaTz80s4s4VdayJ
      R7GOSeOXFflc3JHA92oT1tJUUi8sxeS1JROG+2HTw7DmHsisgqnXwfgrQbEMa3nEHYAgCALJ
      h7km5cOHmBuGwRu7uyjyOvjlVZP4UW0b28rsjLen8fvCXFJfbsbfFSJlURHOmbnJvXqjftj2
      BKz9M9jS4LyfwYSrwTS8Ff8BIgAIgjDqqJqOP6qybFcnc8rSeae2l5e2tvOZ6YUsmZqPYXDY
      ipqabvBOTQ8VpR6u295AUzjGX6uKGFMfxPhHDYZZJvPGSSheG5IWgx0vwPr7INidnMU76+tg
      O7aNWk4VEQAEQRhVVE3n35/YwtIdnTgsCglVRwM8mQ5+8dIuOv1RdrT5uOfaqcj7Z962DoS5
      87W9bGvzsS7XzIKEmUd6zKS9W4Ou6bjm5uGcmYtslaBlLay8Czq3wZTPw7xbwJYyvIX+EOIZ
      gCAIo0Y0oXHvinrue7eRm84uZ2KFl9/vbWerGsdsVgi/3ooiS+gSfPNzEymyW9hd18+z61sZ
      tIAr086FhpmbOnScDgspCwuxlqchO81IvbWw7l7Y9TwUz4Vzf5Ts7z+NiTsAQRA+VXTD4MWt
      7UwpTKM4/dDJVFtbB7nv3UaunV1MVpWH7zV3kppq5tacbM7zuLngrXZUVccA7n1xD/FQgkwN
      vqLYKFesZDcb5Fgh7aIy7NVeZLsZgj3w1r2w7q9QMAOW/BXKFwxP4T8mEQAEQRjxogkNm1kh
      HFPZ3DLIz1/axfnjc7h8ch6KLDGt2APAG7u6mVyURrzCzc8bO/hSXgbfzPKS2NWP76U9pGow
      zmJlRTyG7I9zTaqLf8v04Ml0YPLYMOe5sBS6kc1A7bJka792GaSXw+LbYfLnQBo5a5WJLiBB
      EEa0Tc0D3Pr0NmaVejHJEo+va0E3DGRZIqHp5HscfO+8MQSiCZ7c0EpNioSpLIW/VhYyYdsg
      ka09GLqBY1o2bWVubFaFzz20noFwnEe/NJNZlfvrFE2FeAB2vwjr74eBJqi6CCYsgdKzhray
      HUlEABAEYUT79at7eHpjK5puEE1oFBenEs62UROJYarzI/uS+4kYgNmmcN6CUr5j2Ehd3QWK
      ROriEmxjPENLNOiGwZr6PvoCES4uAaVrO7RvgpZ10LUDzHY444sw4SrIGDN8BT8BRAAQBGFE
      6gvGeH5rO89vbmNeRQYXzSzkn539/Kt3gHEuO18vzKKtpp9lm9qYV+LlT2uauG9mGWW1AWRV
      J2VBEY7Jme+vzaNryQp+3xpoWAF9dRDqSS7KllkFBbOgYmGy0j9NR/V8XOIZgCAII4ZhGOgG
      yBI8sKqRh1c3I0lw1uwC/q12HzZZ5s6xhSz2pqLVDRLpUlkctRLYNIim2ClrCJI6Mxf75EyU
      VEtyM6pEFNb/Lbk2T29NcsP1yvOT3Tu5kyC1EBze4S76SSHuAARBOO3t7QywuWWASFzjqY2t
      /Oyy8fzgme1cekY+aWPS+GVDB1/MTefW4my0bb0E321DHYhiH5eObawXc7YDxWtDNivvH7S/
      ATY8ANv+lWzlT/t/yW6d1PzhK+gpJgKAIAgnjaYbbG/zMTE/9bCZtR8lmtDY1x+mLxjnh89s
      YzCSIBRTiWsGVdku9gQi5JxdQFAx+FlZHhe0JYis7UAPqzhn5uCYlInisSIdvI2irkF//fsV
      f0o+zL8lOWzTnnaCS3/6E11AgiCcNF3+KNc/sJZHvjyLKYVp+CMJVtb1csG47KOuuwPw1MZW
      fvrCTiQJqnNT+M9rJvJfW5rp3tXP3q4g8ngP5+Wmcb1uxftaB4FmP+4zC3BMz8aUetCIHF2F
      wX3QvBoa3oaa1yCjEq64B0rPAbPtpF6D05kIAIIgnDSD4QT+iMqPnt3O7Usm8fCaJp7f0sbN
      Cyr5xjnlKLKEAUNLLhxgGAbrGvtZWJ3FdeeU8ajPz7eb27lybBZ1fQm2+fv5Y3oGk5Z2Y/RG
      MJ2RRdrNZ2Dy2pItfl2Djq2w9xXY8XRyPZ6MSsg7A657FvKmJNfhP8GbrI80IgAIgnDC6YbB
      YDjOI2uasCgyNrPCtfe/RyCqkpJi5Y8r6plW6gXd4JE1Tdy+ZBJWs4wiy1gUiWhCZ019HxXT
      srmltZNcs4lHivOp3OHj9s4Y/chM2tSPa24e9up0TDmO9yv+plWw8WGoewNyJiS7eIrnJrt7
      zPbhvjSnFfEMQBCEE+7pja389ws7yHRZKUp3cPO5lXz7+W3Yi93UJhKY9/hIH5+OpT1Ma1cQ
      qyGR5jST5rFx/sIyWrb38NymNqxn5nBLahqXN8UwagYxZzuoH5tK2GPh3Kqsg7ZX1JOjeLY+
      ntxXt/J8mHvz/pb+yJmZe6qJACAIwgn19t5u/uOpbXxlfilfnF3MgKbxx5ZunuscoNJl4+ai
      bP7wz+3sDEeQAyrfWzIeNZDAqhvc8049AyYJOZBgnNPKt61OJkXBWunBNS8PS64LyXzQZupR
      H7RthHfuTA7hHL8Epn85OW5fVo6eUUEEAEEQTpxoQmPO/y7ntouqueKMfLoTKp/bWs/V2V7O
      TXczwWVHArbsG6S9PUDD5k6usNuxRnV0TeeW3j5qdY3zc9P4araH3CovpkwHpsxkOnQVOrbB
      7heSFb+eAG8FjL0IMqogo2KYr8DIIp4BCIJwwqyp78NqkjlrTCZt8QRf29FEntXCd0qyATA0
      ncDKNvK29pDZHWZqqhVbgQNbZRrWklRubh/EH1FZPCHn0AMHOqD+LVjxG4gOQuFsGHd5cvE1
      q3sYSvrpIAKAIAgnRDiu8se36lhYnY3DYebr2xrItZq5s6oQwzBItAXxv95MoieCa14e9rFe
      ZIcZyaYMjdWfW37QHbxhJEfy7Hjq/cla078MEz+TnK0runiOmwgAgiCcENtbfeztDPCTz0zi
      +m0NtMcS/HFcMZkmhdC6TvyvNWEb6yXj0nLMGR8yGkdXIdAJ7Vtgz8uw50XInwbn/xKqLxGj
      eE4wEQAEQfhE+kNx9nT6mV2WTpc/ypt7uqnOdfOnzl7MssTL0ypJl2T6H99LvC1A6sVlOKZm
      HTozFyARSW6fuP0pqH8Tgl1g9yS7ea66DyrOE639k0QEAEEQPpHnNrdx+6t7uPuaKfzX8zsI
      xVVKxmewtd/PI5PKSNclfK81Em8NkPHViYe2+g0Dwr3JzVQ2PAi9tcmx+nO/DYUzwZX9qV2A
      7XQiAoAgCB9J0w1UTcd60GJq+/rDKJLED5/ZRkw3KJiRQ51b5r/K85gSl+l9YieGauD9wthD
      K//WDcnW/tbHwOJK9utfdT94ioehZKObCACCIADJ5Re6AzE8Dgv9oThpDjOhmIrXaeGhVY08
      saEVr9NCutNCRZaLd2p7cJa66QzHsadakXMd3F+ey/T6MP3LtmPOceD93Jj31+UJ9sCWf8Dq
      P0D+VLj6ASiYDtbUUb8kw3AR8wAEQQAgFFP5wt/e49yxWTy9qZVMl5XuQIw/fWEq1963lpml
      XlrCMZpDMWJ9UZAgf14eN0zOZ16am7FWC9HN3fhebSLl3EJcc/OQTDJoCWheBa/elhy3f+5t
      ySGcYobusBN3AIIgEEto3PDgOra2+tje5mNsTgo5qXZ2tft5ZE0ThlkibVomawYDZJlNVGsK
      5VkuvlCQToGsEK0ZoH91O9pgnLTLynFMykBSZIgFYel/JPfRnXo9nPsjMDtEi/80IQKAIAg0
      9YWo6Qrw5XklFKc7WTI1nz5dZ08wwnNb2olXuKlLJPhtdRHz01zYFRkSOoEVrXTv6MVQdexj
      vbg+k4/Ja0su09C8BpbdBrEA3PAS5EwUo3lOMyIACILAlpZB8lLt3HZRNZIs8UBrL3c3d5Jb
      nsKFGS5mzMjjM/le7JKMHkoQ2t5FeHM3ejiBe34+9kmZKE5z8mB9dbDyruRSzBM/A2d+F9y5
      w1tA4YhEABAEgdruIIXeZNfMb5u6eKi9lzurClmYnoJlf3eN2h2hf3kz0ZoBlFQrjokZOGbk
      vP+QN+ZPbray/H8gsxqueQSK54lW/2lMBABBGKX0/eM/JKA/GCfbbeVfnf082tHHLysLWJyR
      igTowQTBd9sIre/EXOgm88ZJmNLtyFYlOZ4/HoLtTyZH+Ay2wNQbkksxW13DWj7ho4kAIAij
      UFzV+Z+XdqJqBjedU05Db4jScg93NXfy3ZJsLk1PIVY7SGhzN9EdvSheG97Pj8VanoZ0YG/f
      QEdySOfO58DigAlXw7QvgTvnqOcWTh9iGKggjDKabvC75TU8tbGVuKqj6waDCQ1lfg4XFnm5
      oySPyJsthLf0YC1LxTU/H3OWA9kiQ6QfOrcnF2erfR3Sy2HGV2DMYrEq5wgk7gAEYRQxDIMn
      1rfwyJpm7rl2Kl6HhS8/vJ70shTkFCv/nZGB76FdaL4YGdePw1K4v1KPh2DTk/LQzdMAACAA
      SURBVLDqdxDug9Kz4OI7oewcsKUOZ5GE4yACgCCcJmIJjS0tg+SkJjc2d1tNeJwWogmN9xr6
      GJ+XSqbb+omPbxgGr+7s5Palu/nJZeOZU5ZOQyRGxeISVvtD/MzmRn+yFtltIf2L1Sg2Lbnp
      ypbHk2v2WBzJsfxzvgmySUzk+hQQAUAQhlmXP8rj6/axoWmA9xr6sFsULIrM7LJ0Cjx2GnpD
      vLGniwvG5fCna6eifMJJVJv2DfKjZ3dw84JKLp2cxz87+/lNYyfjHDb+6cki94VmTBVppF5Y
      gNL0IrxzB4R6kss2nHsbjL1YdPN8yohnAIJwChmGwd6uAGvq+5hR4mVnu5/1Tf2srO1BkiRm
      T8jiqZY+DJuCqdaPZIBhkqDYhaU7ytVXV/PTynys8sdvfS+5ZxUT81P52eUTeKqznx/vbeXH
      ZjeL9oTQmv245uSSMq4b6bXbYKAJZt8EU66FlLwTfyGE04IIAIJwigSiCZ7a2Mr97zbS7Y9h
      NcvIkkQwpvLZecXsy7GyKRyh2mnniuw0svwaHqeFUCRBrz/K95/fgVGRwoSqdCZ7XFS6bMxI
      dZJrNeMxm456ZxCIJjjzN29x73XT6LFI/GttE9fvjVKtyjjGp+EsC2Gu+SNSw/LkMM6ZX4XU
      IrFkw6ec6AIShFPkuc1t3LWshosn5XLRxFyy3FY2t/v44fM7eEaJUYGZv08qY4LbjgUJVQkT
      bfAR3dXHyi4/smog7/WhtETZrkjUKzJvmmS8LislTisT011UpthJt5uR7SYUpxnJoqDYTPTF
      EygGhDd0kV7n4xcRnZSyIM7sWkydS5GW7YHcSXDtk1AwU1T8o4S4AxCEU0DTDc658y2unVXM
      TWeXoxkGf23p4a6mTjKRuak8h2vz0pE1g9CGLsJbe0i0BTDnurBWpLFd0bnh9V1oBlRkuijL
      dDIQjhNXdXyRBDFVJxhTCUZVJMAJpCDhQCINCQNoJ8qjchuZjhocKTtRQnvAWw6V50PVYsg7
      QzzYHWWG6Q7AIBryU1tTSyCikltcQUl+Bhg63a2N1Ld0kZ5bQmVJHrIEajzMru07COsmxo4b
      T6rTimifCCPJ7g4/PYEYC8dmMZhQub2hg1d6fdxRVciC9BTcskxkey+BlW3o/hiOqdl4rqrE
      lGZFMsmktfkwvSmjqzqXT8nl5nNK0NU4WiJONBJCi/iJBfqID7Th7++ivb2J7u52EnGDfiMF
      H06+Yqqj1LEXKbMCyhZB9W+TAUDssztqDU8AUCNs3baX8nHjGec08c7SF1Gcl+EONbBmVx+X
      LJrF7rVvskVTmFqezjuvLaVk1nmMsUV5+fU3ueyyxZhlEQKEkSGu6vz0hZ1cNjmf4gwnP29o
      Z50vxN8nljE5xUGiK0T/Wy1E9w7gmp2Lc3o2pvSDKuV4iDHxnfwmcykNgwaX7vkbNAaRoz7k
      qA9zpD+55r7FmdxL15nFeJcXcrLAmQmODHBmgPfzkFEltloUhgxPAFDszJw9A0mSMAwdm0kn
      HNPo2L2HKdMvxKSYGDtlOi8v38iE7MkMKl7KslIAN2XuGI39CcZkWNB1/ZDD6rqOpmnDUiRh
      9NJ0g5d3dDGzxENOSnKcvj+q4rIqyJKELxynoSfIDy6s4vmeQZ7qHODhCcWMS0gMPFtLeFsv
      5hI36TdOwJzlSB4zGkSufwOp/k2MvUsxYXBJ5jgozAXXFLTUgmSl7kjf/8ebHKIpyYf+OWKG
      xe+IkDQ8AUCSkotMqXHWr3ydPksxM7PsvBWMU+FK/gKZzHZ0NUooEsBqPzD2WMLrcdExEICM
      dHRdPyQIaJpGIpE49eURRq2YqvNObS/ff3IHX5hRwI8uHIOqG1x73zp+fGEVJekOgjGVQEyl
      IR7jZy193FqYSUVTkO7XWrCk20ldUo6pzA0KJAI9SJsewbT3RfA1Y1Rfhnbxb9GzxqO7suFo
      nZ/G/j8YgLb/jyB8uGEbBRT19/DKy8sonX42F1cWIAFmk4SqGYCErutIkoRJMWPo6lC6eDyG
      xWIBwGQ6NPtmsxmbzXYKSyF82mi6wbbWQSYXpCEfpZsxrmos3dHJqrpent3cRqbLSl1PGJvN
      Rn8oTnNfhMaBGP/xzC7SHGYsisyzwTDneN0s2RsluLod15w8UhYWIZlliAzC6j/BxgfB7k1u
      lD7+cnDniqF6wkkzPN8tI8HyV5cx6dxLKM9OHWrT5Oak09LWTVZlNuHBNqypubhSPEQGt6Lq
      Boqk09wVZcoUx7Bke7jphkGnL0qaw4zDMjKqBd0wkABphAwrfGtvNzc/tpn/uKAKm1nmmumF
      mJTDu1JW1vZy61PbyHBZ+daCSgI2mafebOD+uk5SQhoxVWd90wCDkQT+aAJzsZtd3QH+2KgT
      6onj/cJYbJWpSMEOeOe+5OJqtjS44FfJGbcW5zCUXhhthmUYqOZv58//eJkzJo3bnwuZ8urJ
      ZDg03nnrXcwuF0F/hJnnnEu6w0x77Ra2NvXjMGmYUguZe0bVESuUT/Mw0P5QnNuX7uatvT0s
      HJvF2WMyOX98Dspp/DBcNwzuXVGP3azwpXmlh/08FFN5bWcnV0zJP2pr+1TpDcT4ysPrCcZU
      mvrCyBI8/rXZTC3ysKKmhzSHmTOKPAB89t41VGa7+MbCSv7eM8B9LT2kvNdDtwmksIocUrFa
      FdK8dnInZ9LRH+K/61SmO2x4rqrE7PAhvXsX7Hgm2Zd/9n9C1YWi4hdOqWEJAB92yuRDYeOQ
      /x/p/R/Wmvw0BIC4qvNeQx/pLgsVWS58kQR7OwO8uLWdne1+Zo3J4IEVDWDAV88qw+u0cM2c
      YjI+4o6gyx+ltjvIvPL0U9Ya7wnEuOj3KwnGVO68ehIXT8pDNwwae0J0+aO8W9fLPW/X89PL
      xvPFWUVHbGmfTIZh0BuM43VakCS46HcriSQ0nrhxNg3+KN94ZAPBUILvX1LN6j09OC0Kd392
      CmZFZuav3uCSc0rZ4YS+hMpt2Rkktvbyw9X1eJGJY9COwflOO5dYbEyJgLPSQ9oFXpSdD8N7
      90BaESy+HQpnJhdXE4RTbFi+dUergI70s5HSfQAwGI7z0rYOBkJxdnX4+eWVE/E6k88s4qpO
      S3+YonQH5g9Udqqm0zoQYUvLILc+vQ1ZgtIMJz2BGP2hOCZF5sw5BTzv0rCkWNB8cf71TiNB
      Bd4IBnGl2ShPtTMuxcEEm5VgOEG3P0qXP0Z3IMbaxj52tftZ/r2zKfCc/C60tsEIN/19I6qm
      85X5pfzm1b1MKUyjtjvIvz+xBYsik9CSD/B/8dIuclNtXDA+h0hcw2qST8kdQW8wzjX3rqEy
      y8XXzy6joTfEfTdM55VAkD+2dBN2KKiBOHduaIKgilnVufCeVVy9oIxgTOVJn58LXB5uj1tx
      /6sRTdX5R34OUqqVn7b10OELc01JJjMLUrEWWbH43kD652+TG6Zf+juoPA/Mo7M7Uzg9iGbH
      CTQYjnPjIxvZ2jqY3ClP05lTls71c0sA+PPbdfxueS3fWTSG7yysHErnC8f58XM7eGl7B2ZZ
      oqzUQ08gyu6OAACGDIam09IR4MYmhUrVQRcJ8gnxTc1MbGUHPgy2SwYPSwa6buAiQqbkI40g
      WVKYcbKERg53PLaKX4/pQbHKyE4XstOMpMjJqf+m/WPPJQlyJn7ilR+bekM8sb6FHW0+bphb
      wmenF/L0xlZuX7oHzYB5FRksOKuYxxq7Wb+8GTWqcceqelxeG7/813aqctx8ZX4pJelOXLaT
      9xW96/UamvtCNPaGiKk6umGwF5X/re/hzrGFlBXn88iqJp7e0obTpBBTdRrDAX794i6sqsH/
      dkvM2dULCR37jBxSFhSSL0sQ9eF+sI3UQJizil7H4m+GpWsg3AtnfT+5wJpYQ184DYilIE6Q
      f7zXzP+9XgPAX744jd5QjGW1Pby3p4fnbjkTNaKy5J7VjMtLobY7yKu3nEUC2Nvm47+e3UGr
      muCys0pYVtOD4VCwtYbp6QwBMF2BrxNgHK24pQ1Y5BoUqQ/JpPKGMoc9SiUFch8Zkp9sqZ90
      /NilGCYMFEUGQyeo6WxgLN/u/Sx/cvyBUnMXB4YUOg0Vr6JAwsBQNSQ05LRUpFlfg/JF4C0D
      5dgq4saeEF96aB29gRglGU4e/9ps+tH5xfIamhoGsMoyjS4JU2UqC7wpbHi9iY7OIKpZxnZG
      OtqmXtKznGiDMaIJHa/TQmmGk4qs5PIHVdluMlxW0hxmUuxm5I95d/jkhhb+9FYdt11Uze1L
      93DxpFweeLcRAwhJBvaz8vhOZS5fL8xEAuobBvj3hzbw3apc/rq3k9ZEgjYMrpOs3FSeRcrE
      TBxj7Ugdq5F2vwAt6yDYxY2Rb5Kwenkw79nkomoVi6BiYXK8vlhuQThNiABwAmxv9XHtfe/x
      o4urmVOegcNl5pcNHbxa20N4bRfe2TnMU028vKuTosmZtK7rovScAvzdYUK7BqhCoqTAiUc3
      KAuHmOHbxWCikdWEWa6fwcXKZm40v4bssELJfCiaA+kV4M5NttLNtg+pVCRQzKgGBDQdTTbx
      /Sd2stfv4+xzC9gaiNAciWHTEuSYTIw1mznDZqUqEGXMykdxam9hsvmQcickR6ZUX5pcGvhD
      +qvjqs7X/76BUEzjx5dUk9AMinNdLNlcR7Q9TOe2HiQDzptdwK3zyilNSHz7yS00Ng/SaGjk
      ua0MhhJcX+QlVJxCWUEqpphGfVeQloEIDT1B9vWHMckSKXYzmW4rJenJoFDgtVOe6aJ4f/ea
      SZYO6zoMRBNc8Nt3MMkyJkViIBTn3uum8+CWFl7e3YXitfGbyydwdY4HzRfDt7SJWIOPqKrh
      TLOhV3sIeay8GQrzxTw3NrkGed8K2PMy+Ntg/JLk2vmZY3lrIAOHK5VZZekn4RsnCCeGCADH
      Ka7qfOXh9WS6rfzmqklEDIPv7mmhORzlq1EL//3qHiISKIbB1+xxiuUg/xtIYyxm6hjkVtMr
      XCG1okg+ZGkQRQogpWZCeiXkTcHnriA1zQue0mSlr5iPK79bWwa54cF1PHDDDKYWewioGtsC
      YXYEI2wLRNgbitIYjvF5rHy3x0Cr3YI19BY2eT1mpQWpYAqMvQTKF0BW9VAw0A2Du1+v4ZlN
      bTx+42yKvA50w+CHNa3UhWN8JyWN6/+2lhyHhUcXVuPZvQ+1cQ9NNKBIu/gfbRFNRi6lUhf/
      ND2JahSwyzGDHWOmYRtfwqwiDxVOGzFVo3UgQlNviOa+MA29Qeq6g3T6onT6ougG5HvsVGS5
      KPDYKdt/95CdYqM3GOemRzdy9zVT+NvKBvK8dqJjUlg+GOAcbwqXZ6WxwOMmvLKNwJstWMtS
      SVlYhCldQY50Qst70LMHevZC9+7kNok5E2Dc5TDuCrHEgjDiiADwEQzDYDCcXG0xoemE4hop
      NhNZKVZMsszTG1v5xcu7ePHm+XhTrHx1RxPdbT5+tbuBMv/bPKKq/F67lElSA/+0/Zag1cNF
      wR/iSXFxV+5yJqRGkFILkuu1uHPAUwKpBe9P6z/BdMPgu09sJRBLcO8Xpx028iaq6Tze0c/9
      bT08MrEUd8JA3j2AvrUNo2MvNvVdbPIGTJZuZE9uMhhUX8ry/gy+98wu7rx6MovGZQPwfPcA
      t+5t5eGKLLKaW1nwXCeL5Bb+aH4KM/XINgkpvQjypnJL43SebUtlUW6U+ybXQcdmjJaN6GGd
      HrmM97Lm01p9LkUVY5iVkU6WxTTUwtd0g0hCIxxX6RiM0tgbYm9ngMa+EA09IfyRBLphoBkG
      OSk2Xrx5PgAPtPXyl33d/HFcMTNSnRBW8b3aSHRnH2kXZWE3b0aqWwrtWyDqT1bw6RWQPR7S
      CqHifHCmixE8woglAsBH6AnEuPovq+kJxIjENQzAapI5tyqTiyfl8bs3arl6egGLZxZwe30H
      bG7ih20vUBj7F3JeFb1Vn2Pm0jwuL4O7F2dAagFre62UZbqPa3/X47G7w8+V96zigS/NYG75
      4derIRzjmi11dMQTeM0mcixmim0WCgMaJTV+qpsDFEcbsckbsJm30Ucbn9N/weLMfn5w5Szk
      gul0xhJ8afUqvuxfzdVNzxPob2Ve7LfcmrOZ66u0ZFdWzkRIyQfFzE9e2MnDq5v4/vlj+NaC
      /Q/IQ73QvBqaV0H9W6i9zex2FbE9Yxrm8VdQUDaLGd40TB/xHMAfTdDtj/Hazk7KM13Mqcrg
      zy09/L29j1tLc7ghP4N4R5DB5+oxomHSct7E0vssUjwElYugYAbkT0velZksJ+MjEYRhIQLA
      RzAMg+a+MLphYDcreJwW6rqDPLymidV1fZgUiVs/O4kndu7m7MZ1XNf1EOZMK9KC/4KxlxCI
      a1xw9ztcNa2A751fdULz9knphsFPX9jJznY/j39tNhbToXcBhmGgAz1xlYZwjF2hCPsicRoi
      MfZFYvhiKtXtUS5uV5k0kOBnmg+LrPKzlL+QH9+Oy+nF763C3LQaRctGH3stlouv5fUWiVll
      XtLslsM2HPnH2mbuW9nII1+eSaH3A0MjDQMMDXr2ou96E2PPqxidW4iZdLblzCdlwmWUls/C
      mll51F2xDMMgvr+Lbk8oyk2FmVxqsRN5s4HYpq045Ldx2d9ETklL7oFbfm5ydu4IGoYsCB+H
      CAAfwdBVot01GFY3NpsbFAtIMpIkMRiOs6WjHfntvzG9+wUcNgNpyhdg7s3J2Z0kK52Vtb2M
      yXaTk3r6rFPU0h/mkj+8y6+unMDFk459z9ewpuNXNbrjCRpCUR5+pYa29iC/t6eQ4ovRY+vG
      59hOVryHcv8EzDPOJuX8Mcj2o3eTxFWdQDRBuuuj74qMuEqirpbEtrVINa9g0TYiWVWk7LHI
      ledB2dmQNS45xv6gytswDH7R0MGTnf08PrGEMYMDRP75V6zB5ZgtbcieHJh/C4xZDPa0Y74m
      gjBSiQDwEWKBbuT7z8c82EjU5EByZYHFNbQpd2iwDWdaPsz7NlReALaUE3r+k+mO1/awfHc3
      z39rHlaT8rHTL9vZyS1PbOEv101jfmk6sUYf4S09RPf0YyQ03OcU4j6nEOkkTupK9ISJ7uwk
      vuE9TANrsCnrMEsNycq8fAEUz0t2N6XksScU4Wtr3uMOUy2zW5dB5/bkUspjL4JJn03OzDUN
      T7ecIAwHEQA+imEkR3tEfeBrgXAfxIMYQCKuo7pzcJTPAdPp07o/Vp2+KFfes4rvn1/FVdMK
      Plbapt4Q1963liVT8/nueWMOWbZDj6hggOwwnbJZ3HpcI97sJ7iqGbW5E3NsPXZlLbqpFrsl
      gpI7iS7ZibV5LQ4tDaPgbMzTzkIedwFYXackj4JwuhEBYJT7w5u1vLStg6f/bS4u67GNZgnH
      Nb72yHpMssS9103HZv74dw8ni2EYaAMxQhs6CW/tIegbJGKpoz1lK2mJBBX+iZhnn4d7QdVH
      dksJwqedCACjXDCaYMH/reDmBRVcN6fkI9+vGwZ3vraXF7a2888bZ5+SdYU+KSOhE60dILSx
      i1jNAJhk3Gfmk7KgaLizJginBdEEGuWcVhNfmV/Kfe82ctnkPFIdRx/muHx3N4+t3cddn518
      Wlf+AJJZxj4uHVuVBy2YAMNASRV9/IJwgFiUZJSTJIkvzEq2iP+xbt9R39s6EOZHz27n+rnF
      LBibfSqyd0JIiowp1YopzTaiVpYVhJNNBAABt83Mvy8aw1/erqc3EDvie0IxlR88vZ0J+anc
      dHb5Kc6hIAgngwgAAgAXjM+myOvgodVNh23AoxsG977TQF13kP+5fPyI2Y5SEISjEwFAAMBh
      MfGtBZX8Y20zzX3hodcNw+D1XV08vLqJX1818bTv9xcE4diJACAMOW9cNqUZTh5a3TT0WutA
      hJ++sJMvzS3hzDGZw5c5QRBOOBEAhCGKLPGtBZU8v6WN5r4QkbjGj5/bQVmmk5vOLv/Ym68I
      gnB6E525wiHOrMygOjeFe96uJ9VuZm+nn5e+fSZ2y+kz2UsQhBNDBADhEGZFZmF1Nn94sxaA
      O66eTMYxLNAmCMLII7qAhMPkpNgYDCe4bnYx540bOeP9BUH4eMRSEMJhogmNZbu6uGB89ida
      JVQQhJFBBABBEIRRSnQBCYIgjFIiAAiCIIxSIgAIgiCMUiIACIIgjFIiAAiCIIxSIgAIgiCM
      UiIACIIgjFIiAAiCIIxSIgAIgiCMUiIACIIgjFIiAAiCIIxSIgAIgiCMUiIACIIgjFIiAAiC
      IIxSIgAIgiCMUse9JaRhGPh7Wli1ZiPe0gnYQ92UTp9LillsIC4IgnA6O+4A0LZzBT/93VNM
      rPDi65CY56yhRsvlM/PLTkT+BEEQhJPkuLuAtq5excVfuYUl583GJEF2ZiadHR0nIm+CIAjC
      SXTcAaC4soy3X3qWHbUtDHa38PTSVYwdW34i8iYIgiCcRMcdAMaffRWfnV/CW+9tJzrQyriL
      vsrCCdknIm+CIAjCSXTcm8J/WHJJOvpDYE2Ns3fLGja1qnzxioUAxEP9vPr6CtIzswDIKqqk
      sjALX1cja7c1YDVBRvE4xpXmHPH4YlN4QRCEY3fcD4HXvvIoT7yx6ZDXzl3yVS47c/xR061a
      9iwJTx7R/sDQa9FgN66sscybWz30mqFFeOOdTVx05RJsssorz71AYeGVYpSRIAjCcTruADBx
      /sUUTD53//8MXvz7XykuLfzIdHPOW4LJHOLhvW8PvRbo7iMhp9LT04PdmYLLYSXq78OcloPd
      JAFmyrMsNHVHmZTvQFVVdF0fSq+qKrFY7HiLJAiCMCocdwBwpnr/f3t3Gh1Xfad5/Htrk1SS
      JWux5EWWdyHv8oIbg8ENhAwJSSANh6QzDKdzOpmZDulkkjBDFnriJJ2edJ8sM93kZBkyyZww
      nSbs4GBWg/cV27LxItnad6lUqirVvtw7L2QLDLYlW7Il+z6fV1ZV/e/93fW5m/+X3IKiob/X
      Vc9l18GTLC9fdcF2brf7Q58VzapiTlcf/r5eOg/tZfKcVczLj+NyZw/9xpubQ38kBnhxOBxn
      XQpyOBw4nc7RTpKIiC2MOgD2v/Ykz205PPR3S30t939t/SUNKye/mMr8YgDmzZ7JCy9v4brb
      V5FMvvdYaSgUIX9aLjC4w38/h8OByzXqSRIRsYVR7y3nr7iZB2dVD/3tzs5jVsWMSxpWT2c7
      uYVT8Ga5GfB3kpVfQvakIlzhHvqjKfJdKer7LO4o8Yy2bBER27vkp4DC/m7aevrP+V1RWTml
      hXnnb5yKceBQDbFknLY2P+XlUymft5DJzihH6xqxAMuRxYpVK8n1OEkM+Nh38BiWYTBzwVJm
      TZ3MuW4B6ykgEZGRu+QAOLHrZX6/cce5Bsm6TzzAx9ZWjbK0i6cAEBEZuVH/PwCwyGQyZDLv
      PY3jcLpwOa98R6MKABGRkRv1PYC+5iN8/4c/pbG9C2/hFCLBEA989Xt85iPVwzcWEZFxM+oA
      2PfmRpbf8zcs2vtHlvyHR+h47XfMWTB7DEoTEZHLaUyu0+QXFFJU6CEQSlNZUcTu/cfHYrAi
      InIZjToAlq1dT7S3m5s/+gme/V/f4idPbuf65deNRW0iInIZXfJNYMvMkEqbuN2u0/8b1yIc
      CpA2PEyelDvGZY6MbgKLiIzcJd8DiAXbePSRDZQtXsvN625k5bKF5OUXjmVtIiJyGY3iDMBk
      oL+XXdvfYueuPTR1Bpm3aBk333ILK5ctpiA3a6xrHZbOAERERm4M/h/A4DsBwoFejtbs51eP
      Pcbqv/w7Hrp37VjUd1EUACIiIze6x0Ati97OZo7UHGTrtu3Ut/Yya/ntrF+pV0KKiEx0lxwA
      iYEu/uHRR2kImCyuvp477/8CC+fPJj83h2FeBiYiIhPAJV8CSicjnKxvZ96C+XhcV77bh3PR
      JSARkZEbk3sAE4UCQERk5CbGobuIiFxxCgAREZtSAIiI2JQCQETEphQAIiI2pQAQEbEpBYCI
      iE0pAEREbEoBICJiUwoAERGbUgCIiNiUAkBExKYUACIiNqUAEBGxKQWAiIhNKQBERGxKASAi
      YlMKABERm1IAiIjYlAJARMSmFAAiIjalABARsSkFgIiITSkARERsSgEgImJTCgAREZtSAIiI
      2JQCQETEphQAIiI2pQAQEbEpBYCIiE2NawBYZprQQOSsz1KJGD6fj0g8+d7vLIuBgJ8+f4CM
      aV3pMkVErknjFgCBriae+sPv+M2Trwx9loz08corm+nx9bBz8+t0BuMAnDqwlX3Hm+hormXz
      zoNYlkJARGS0xi0ATtU3sP6uj1Pocg59VndoL7NX3sTCqkWsu3Ep+3YfIBMPcKAlyq03rGBJ
      9RqyAo10RTPjVbaIyDXDNV4jXn3TbUDgrM96+wZYvLIAA8jylpCJHiYSDpBbUIRhGADMKPXS
      3hNh2pwCkskkpmkOtU8mk0Sj0Ss4FSIiV69xC4BzMS1wnN7RYxhYWJimiWG8d6LicrrIZAbP
      ADwez1ntPR4PXq/3itUrInI1m1BPARUVeOkPDh7BpxMDODx55OUVEIuETv/Cots3QGnJpPEr
      8hpnWRbBRJBoKqp7LSLXuPEJAMsinU6TSqUxTZNUKkXGNFmwZAnv7ttNLB7j4J59VC6vxpVT
      SEVOlCNNPQR7W2lPFTAzf0KduFxTjviO8OCmB/nGlm8QTetymsi1zLDG4zAvFaPm3aPEk2du
      5hpMn1PJzNLJRIO9HKtrYtrsSmZMKQDAskya6o4SSLhYtOg6slznzi2fz0dJSckVmohr08aG
      jTy6/VHy3Hm8cM8LFOcUj3dJInKZjE8AXCYKgNGLpqJsbtlMibeENVPX4DAm1FVCERlDCgAR
      EZvS4Z2IiE0pAEREbEoBICJiUwoAERGbUgCIiNiUAkBExKYUACIiNqUAEBGxKQWAiIhNKQBE
      RGxKASAiYlMKABERm1IAiIjYlAJARMSmFAAiIjalABARsSkFgIiITSkAwEgg/QAAFudJREFU
      RERsSgEgImJTCgAREZtSAIiI2JQCQETEphQAIiI2pQAQEbEpBYCIiE0pAEREbEoBICJiUwoA
      ERGbUgCIiNiUAkBExKYUACIiNqUAEBGxKQWAiIhNKQBERGxKASAiYlMKABERm1IAiIjYlAJA
      RMSmFAAiIjalABARsSkFgIiITSkARERsSgEgImJTrvEu4P2SkT5efm0LU0rLACitWMCCmaX0
      d5xi77vNZLuhsLyKpfOnYxjGOFcrInJ1m1ABEA/3kj91ITetXTj0mZWOsXnHYe76i0+TZaTZ
      9PyLzJ79afLdCgARkdGYUAEw0OMjbk6io6OT3PzJFOTlEA/14Z5cRrbTANzMLcuisTvG8vJc
      0uk0pmkOtU+lUsTj8fGbABGRq8iECoDiOYtZ2BsgHg1Tf+wg3opqKifHcbmzh37j9WbTH40D
      uTgcjrMuBTmdTtxu9zhULiJy9ZlQAZCdV8icvEIAKsqn8sLLW1h0+2qSic6h3wSDEQqm5wLg
      cJx9D9vhcOB0Oq9cwSIiV7EJ9RRQd3sroWgCyzIJ9raRPbmM7ElFeKI9+CJJ0okwDX6YU+IZ
      71JFRK56hmVZ1ngXccZAXyfH6hpJmyaGO5fq6mV4PU4SYT/vHDqKicGsyqWUlxZwrlvAPp+P
      kpKSK163iMjVaEIFwGgpAERERm5CXQISEZErRwEgImJTCgAREZtSAIiI2JQCQETEphQAIiI2
      pQAQEbEpBYCIiE0pAEREbEoBICJiUwoAERGbUgCIiNiUAkBExKYUACIiNqUAEBGxKQWAiIhN
      KQBERGxKASAiYlMKABERm1IAiIjYlAJARMSmFAAiIjalABARsSkFgIiITSkARERsSgEgImJT
      CgAREZtSAIiI2JQCQETEphQAIiI2pQAQEbEpBYCIiE0pAEREbEoBICJiUwoAERGbUgCIiNiU
      AkBExKYUACIiNqUAEBGxKQWAiIhNKQBERGxKASAiYlMKABERm1IAiIjY1FURAJZlEujrobu3
      j7RpjXc5IiLXhIkfAJZF7f4t1NR34u9s5M3t72BaCgERkdGa8AFgJgIcbk+wfs1yFi5bhTfU
      TFc0c0XGbVkW9YF6moJNWJZF2kxT01uDP+7HsiyO9x1nX9c+YunYFannUkVSEXZ17KIj3IE1
      wcPTtExOBU4RTobHu5RRsSyL1oFWdnfsJpqKjmstGTPDO93vsKV1C/3x/nGtRSYW54YNGzaM
      dxEXEg100x7IUDmnHDDIBFvoMcuYXphNMpkklUqRTqdJp9O0t7fj9XppbGwkk8kQDAbx+XwY
      hkFTUxNer5f6+nocDgfd3d0MDAyQTCZpbW0d+i4rK4vm5mZSqRT1vnq+vPXLvHDqBRazmHdD
      7/KVt79CQ7CBgmQBD21/iGdPPksylKS6tJr6+no8Hg8tLS0kk0nC4TBdXV243W4aGxuHxgHg
      8/kIBAJkMhlaWlqGvnO73bS3txOPx4lEInR0dODxeM5qb1kWfr+f/v5+TNOkubl56DuXy0VH
      RwfRaJRYLEZ7ezvPtD/D93d9nwM9B1hiLcEyLfr7++nr6wM4q73T6aSrq4tIJEI8Hj9r3uTk
      5IzZvA2FQnR3d+N0Os9q3xZp46EtDxFIBpgan0osFiMWi9HR0UFWVhYNDQ0fmg9+v/9D03Fm
      PpyZjra2NnJycmhoaBiaDtM06e/vP+d0nJkP4XD4Q9ORnZ1NU1MTqVSKYDBIb2/vh6Yjlonx
      8M6H+d3R35EKpyiKFZ01H86sIwMDA3R3d+Nyuc5axoZh0NvbSzAY/NA64vF4aG1tJR6PD61j
      H1xHzqxj/f39HAsd40ubv8TGho009zZzY+mNtLe3X7Xz9sw6FgqFSKVSZ82bsZy3kUiEzs7O
      C87bD25/Z7bfq2XeYk1wAz311sbNe4f+btz/qrX7ZN85f9vb2zum4/ZFfdbn/vQ568GXH7QG
      kgPWoZ5D1von11v/uPcfrc5wp/WJZz9h3fD/brA2NWwa0/GOtadqn7JW/X6V9bW3vmZlzMx4
      l3NBPZEe6/4X77eeOPbEeJcyKrFUzPrKm1+xVv9+tfVS/UvjWkutv9a6+Q83W8v/73LrsYOP
      jWstMrEYljWxrwlkon089+ZB7vvkRwCL3a88x7S1n2JWgetDv/X5fJSUlIzZuC3LIm2lMTBw
      Gk4AUmYKl8OFgUHaTGNi4nF4MAxjzMY71kzLHKzbcOEwHBO61jPz3Gk4cRgT/grleVmWRcbK
      kLEy475+WJZFykxhWiYep+eqnq8ytj68F51gnDmFzMlLUlPfQbk3TpdZyPX5zisybsMwcBvu
      sz7zOD1D/3Y73R9sMiE5DAdZzqzxLmNEzjXPr0aGYeAyXLgmwCZmGMZZ663IGRP+DAAGHwNt
      rT9BMOmisnI+Wa5zH8GM9RmAiMi1bPwPT0bAMBxUzF803mWIiFxTdDFQRMSmFAAiIjalABAR
      sSkFgIiITSkARERsSgEgImJTCgAREZtSAIiI2JQCQETEphQAIiI2dd6uINLp9IR/ecgHZTIZ
      UqnUeJchInJVOG9ncE1NTaTT6Stdj4iIXCFXRW+gF8s0TdLpNB7P+bvAjcfjZGdnn/f7M+Hn
      cp37JOlC7Ucy/kQigcdz/n7ihxv/SNpbloXbff6ulS80DZlMBtM0L7k9QCqVwuFw4HSeu/vu
      4dpf7uGPtv1wy8iyLJLJJFlZ5+6Ke7j2I6khmUzicrlwOM59NXe4dXG07YercbTLYLTb0nDL
      YLj2MPy2MN7t4dK35auiN9BLcb4V+ozzrXBnWJZ1wZd4XKi9YRjDjn+474d7gchIhj9cto92
      Goabh4ZhXPI8HAmH48Ivtxlu+KNtP5KXvFxoHo6k/WinYbgahlvGI3GhGke7jozFtjSSeXgh
      w9Uw2vYj2Q5Guy2fbx5fk2cAYyGVSg2+1OMCR2dyeQ139CiX30iOwOXyymQyZDKZy7IM9BTQ
      eUzk1ybahZaByKDLtS3oDEBExKZ0BiAiYlMKABERm1IAiIjYlC0fcUmn4vT3B8HhoahoMk6H
      AVhEQgHC8TSFRcV4XGey0SIZi5AyssjNHnyONhWP0BcYGPzacFBYVEyWe3SPNNqNZWYI9vcT
      T5tMLiwi2zO4KqYSUfyBAYpLSnE5z9z4sohHw5jOHLxZ762yiegAgVCELO8kCiblonvGF8si
      OhBkIBInO6+A/NwcDAPMTIp+fz+4sykqmDR0A9KyTELBASYV5OMwDBKxMP3B8NDQDIeT4pIp
      uHRYeREsUok4/YEQhiuL4qICHMbg/mgg4CeatCguLj57W4iEsVw55JzeFiwzQ6DfTzLDB/Zd
      w3Nu2LBhw5hP0wQW9bezfc8RHB43YX87NSe7mTdrOj31R9h9vB2vK82+A+9SMXsOTsPkxIEd
      PPv004RzZjF/+mQATh3cTmPAwuuGVCpN7qR83FrrR8wyU+x6ezNh0wmpKPv2HWTarDk4k/1s
      en0b3rw83jl0jNmzK3AYGWp2bubZ516AkgVUTJkEgL+tjp019Xhzsuj3+yko0o7n4ljU1eyl
      oSuEywF1h/eRzi2jOC+LXW/+iQErm1BHHc1BJ+Wlk0mG/byx6UWe3riT629eg8cwSMbC+AMh
      UqkUqXiITZu2smhFNR4thxELdTWy62Adbo+bYE8Tx1sGmD1jCi1H91DTEiTLivLOkZOD2wIZ
      Du14k2effxFHaSUzS/KwLIu9W16hP+WGdJT9+w8xtWI2WSPcGGx3BuDOm8Ktt00fTFkrw8k/
      PE2MVeyvOcHNd91HfpYDZ9THkcYeqsugN5XHx29fS937uhgKhCJUXb+eafk66r8khoPV627D
      c/qof6C9kTZ/mPTJPcxddTMLZ+ST6mngVHeIuVlBQlnT+ehNGXxDA7DYsecQt37yPvK0t7lk
      sxauYIHHgwFMzUnwdl0zs7O9dGSmcd+yRUAVG595hkhVBb0tjcxeuZ6B4JtD7b35RczLLwIs
      Wo7sYMH168i13R5ldLKLyrnt1rkYANZcnv7D0yRXz+Odui4+cffdeJwQ632Fhp4ws91+BnLK
      uePGDIEzA7CiNPWkuf/WxRhAureVhp4Ay2cWj2j8ttt63B4PDsPAzKQ4vOtNPOWV5JAkmnaT
      lzU4O4rKSujv9uHOL+OWG1Z86IgmGAhyrGY3u3bvpb0ngB6kvTiG4cTjcWFZJj3NJzjhS1FR
      nEdHMMGMIi9gUFo2md7uAFnFFdyyevHZR/dWkFDERdvJw+zcsYOTzV2YWggXySDL48HAIjbQ
      xxvbD7F44Rz62tuYUlFx+jcOCvJchMIp5ixaRVXFlHMOyTLTHDzRzspFs65c+dcIz+kAzqTi
      7HvrZSYvqMZIRTHcubidBoPbQgE93QGyimdxy6pFuN5/qdPIobzYwdFTLfR2tdIYyDCrpGDE
      47dlXifCfbz+2hsUzq7mzupKDJJYGJyZrw6HE8s8f6+iH733AbAskvEw2994jeiaj7KgbNKV
      Kf4aYZlJ9m99g7ZYLnff80lyPQam9d4RicPhxDQz526cjhNJpCidWUlllZt9b28iZt3Istkl
      V6z+a0Vr7UF21DSx7iN3M6NkEp1dJo73pa3DMIYNV39TDa6pS8nPtuXuZNSigS5efe1tyhf/
      Gbcvmk0q1sf7j82dF9oWsMjO9hLy95IZAG9eAY6LuBdmuzMAMxXm+WdfYsm6j3HjyutO3wD2
      4HWliKYHV/Sgr4/8kvOdQlmD/XIYBp6cSSxZMIOWzr4rVv+1wLIsdr/+IrHJldx95y3kepyA
      QdkkDz3hBGDR5wtQWFJ47gG4iynKd5KXl4PD6Wbe/Jn4uvxXchKuCd2n3mHbcT/3fPoeyksm
      YQDFU6fR19l1+hcWA5EUk3LP3wWBZSbZvr+edX+2EN2Dv3jpmJ9nnn+Ntf/ublYvnjPY/Yw7
      FzJR0qbFmW2hqGTyOdtbwWZOhrysvX4Vy1esYn5JhgPH20c8ftsFQFftASbNv4Gp+R4S8TiJ
      RBLLMlg0bzr7D50gEvJxuKGfRXOnYmbSJOJxkqk06VSSRCKBaSXYs3UHnb4g4UAv+2s7WTx3
      2nhP1lXFTAc41eNg1XXlJBMJ4vEEGdNi4fJlHN27m2A4Ql13kgXTCjAzaeIfWgZuFs8tYW9N
      HdHoAMeOtzNv/ozxnqyri5Vm1/5abr91LWSSxONxUukMWVMWkBOqo6UnQFvdAYzS68h3QyqZ
      HFxOmQzJRIJkarAnU39rLa6ySgo82v1fiqbDeylfsZ7JWcbg/iiZxHBlU1mWw4ETzQz0d1Pn
      yzB/aj6ZM9tCOk0qmSSRSEJeGdnhNtp9/UTDAY6d6qFiRtGIx2+7riBCvnZONnVyZqJdHi8L
      Fy8iy2nR09ZImy/CgqoqJmW7Cfd3U1vfOvRbw+Giakk1WVaUUydPEk07mF95HfledZR1McxU
      hJqa47x3UutgTtUiivOyiYV81J5q4bql1eS4HQR72znV/N7ycrqzWbh4CdmuweXV2hOkYt51
      TCnwjs/EXK2sDA21x/GH40MfFU2dxdzyKZipOHW1tVg5RVw3txwH0HzqGL3B2NBvc4umsnBu
      Of7uDlz5U8jPOX9XxXJ+fZ3NNLb3Dv3t8RawqGoBLodFe2MdPaE0VYsWDm4LPW2cbOka+q3T
      k83CRUtwmzFOnawjkoQ5lVUU5p6/6+sPsl0AiIjIINtdAhIRkUEKABERm1IAiIjYlAJARMSm
      FAAiIjalABARsSkFgIiITSkARERsSgEgImJTCgARGVYmGeVU7XFau/yMZdcB6USYhqZ2dak+
      TtR/q8hVLpOI8Pff/DJNIQceTw7VN93BA/fdxaSx6p7ZyvDHX/wDe7rc3H7n3ZRPLSLac4JH
      vv1jIpkUsUSGXG82VTd9ioc//6mLGnSw+xh//0+b+M3Pv3vB373wqx/y9M5TZHvclFdW8+CD
      /545Zefp9z7Wz99952d89affRx2EX5jOAESudpZJZ1uUb/3sMf7lJz/A076DH/36OSwgGQ1x
      aN9utm3bSU8wimVlOLR/H5HEYG+ewe5mTjR1nTW4zsYTbNu+g3ZfCAtoOPYOb+6rZ+26tcwt
      H3wpjLe0in95/HG+918+h3vKYh5//HEe/vynCHW3cKKxg2BPC0dqm8mkk5w8epAtW7dxqrVn
      aByxUC+7tm/j6Km2oTMKM5Pk2MG97HnnMPGUeVZNgd4ubn/g6/zql49xx8I8vvPtHxBKDb6/
      uP7YIbZu3Ubt6emoO3qAE7XH2bFlC/vfPQVANNjL7h3bONHYqbON91EAiFxDPN5CHvjrL9Cy
      6xW6YrB145Ns3X+E2sM7eeTb38cft9j67K95eV8DABuf+AWHW/tPt7Y4tuWPPPrj31B34l2+
      982vc7DRT39vF5FQmKbmZnr8oQuOv+nAZn712yf4+S9/S1tvgKaat3lq03Ya64/zP77zTQ62
      BIj4GvnmNx5mV80JDh+sYbCP0RT/9s8/4ImXd7D79af44S+ePOelJofTw9qP38/i3E52Hu+m
      49gO/rBxCw31J/jxf3+EPQ19+Hu7iKcStDc309nrJ9Hfwrce+Tb7363l8Z98jzcONY/hHL+6
      6RKQyDUmq6iEImeCaMziz+/+HJP27KKjL0h6+246+mJ87JN38bOXX+XetWXsrw3yjS/OG2xo
      xnn6317ii9/6JTdUeFle5uC5P73FD/7mU8x+4nk+dt9nWFaaP+z4O7v8/Ld/+i7TJudgZdLc
      6yrgeEMHZXkZjp1sJR3dQV71PXz9oU/T17KXAz/aRLKvmVePhvmfP/8ueRk/Dz/0PXpSf0nZ
      OXqZNhxZTJ9WTCgUZsaN6/iskcu7J9uYVuji3eNN/PWtH6X0t29x74MPUgbsf+nXFC6/i//8
      hU/SdmAaP399M3es+PzYzvSrlAJA5BoT6e6gzyigINfkZ4/+LZmKdSyZW4bTOfg2tnkrbyH7
      N/+Vza9Px121jhn5p99nYaaJRE0KJuUABvkFBUSj4Yse/4Jlq5k2OQeAV3//U14+aXLH2qW4
      XS5M0yIyEGJK2dKz2iTjUfo7j/HIVx7CABxeD9EIcI4XYVnpKI0tvdxeWsTbf/w5Tx0c4M51
      1XhcLkzTBAwM470X1IQGBtj36ps8dGgTAKWLb7noabpWKQBErgkm/b5eWn1Rfv+rx1hz12co
      zsrQ3R/nvr+6jbxYG+nM4EUVR1YRH19fxU//+Xd89Uf/+71XObpyuWntAp754/P81cdX8MxL
      r7Pmrq+Pqqr2zh5Wr7uPpXO97Nk0eN+hYsEifvt//kT9mjk0H6ghAeRNqWDJ7Fnc+Lkvcf28
      KdQdPkJBztnDioT66e5sY+vGf6U7fxU3zC/k6Y3drLjxYyyvKuLQ5sHh48mmLC/Kvr11rJlX
      yuLlK5m6O8DXvvafyCNCbcfFh9q1yrlhw4YN412EiIyCZdLdeZJd23Zz6Gg9a+78LPffuRan
      w0V5aR4vPP8iCe8MZpXmsHD59Uz2uikqzuGVrU387X+8D4/zTAQYLFi6kp7jO9j4+naq1t/L
      X9y+Eqdh0dvVTWX1Sgqyz74mk05ECMRdrKmuAiARCZDKKmbx/HIAKmbNYNumF6jvy7Bw3kym
      zVvI8qXLyTd7eP5Pb5A/fQ7Fk6dw/eqVVC+rZPsrz/Pmtn1kT5nN0oVzcZ++SxnydXNg/x72
      7D9A/qxVfPmLnyUvy8XMWTPZ9dqL1HbFWbxgNqWzrmNu+VQWzJ/GpueeoiXs5s9vvY2ZOVGe
      e+4FDta1UbV0BTPLzvO+aZvRG8FEbCbo6+Ctl/6Vetdyvv7AHRh6na9t6RKQiM20nazB55nH
      F+69VTt/m9MZgIiITen/AYiI2JQCQETEpv4/6S5D5G3O+LEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='576' name='SPY EMA Trade' width='576'>
      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
      CGF3/h+B0hC9jNpQewAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='SPY FRL' width='384'>
      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
    </thumbnail>
    <thumbnail height='576' name='SPY FRL Trade' width='576'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='576' name='SPY FRLK Trades' width='576'>
      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
      AQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='576' name='SPY Trade' width='576'>
      iVBORw0KGgoAAAANSUhEUgAAAkAAAAJACAYAAABlmtk2AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdd3xc1Z3//9edrplRl1UsyU3uvYMbHUwNLRBqSEiykM1+N7spvyS7m91N
      9rud3e9utoQk1EBCCSUGYsAYF7CNce+9yepWr9Pv/f0xsmxh4yppZM37+XjwAF3duXPuYM+8
      55zPOcewLMtCREREJInYEt0AERERkb6mACQiIiJJRwFIREREko4CkIiIiCQdBSARERFJOgpA
      IiIiknQUgERERCTpKACJiIhI0lEAEhERkaTjONcTo9EoHR0dvdkWERERkT5xzgEoEolQV1fX
      m20ZsCzLorGxMdHNEBERkU6G9gLrfZFIhK1bt1JSUoLf7090c0RERJLeOfcAycWz2+04nc5E
      N0NERCTpqQhaREREko4CkIiIiCQdBSARERFJOgpAIiIiknQUgERERCTpKACJiIhI0lEAEhER
      kaSjACQiIiJJRwFIREREko4CkIiIiCQdBSARERFJOgpAIiIiknQUgERERCTpKACJiIhI0lEA
      EhERkaSjACQiIiJJRwFIREREko4CkIiIiCQdBSARERFJOgpAIiIiknQUgERERCTpKACJiIhI
      0lEAEhERkaSjACQiIiJJRwFIREREko4CkIiIiCQdBSARERFJOgpAIiIiknQUgERERCTpKACJ
      iIhI0nEkugG9wrJoa2mgtq6RSMzC5fGRX5CHx2k/5bxwsI2q6lpCkRgubypFg/Nw2IzPnGbS
      XFdDbVMrDrefwYX5uO3KjiIiIpeqAReAooFmFr/xErsr20lPS8NhNwh1tNISdnL7l+5nfHE2
      AFYsyObVy1i6eivejCw8DhttLfVYqUN56P67GZTq6jwvyvplb/DhhiNkZWcSbmsk4h/CQ/ff
      QW6qJ5G3KiIiIhfIsCzLSnQjelK4rYHt+8sYNWo0Pq8HmwGxaJj9n77HCyur+csfPYbPBrs/
      fpMle8LcdeeNFGSmYrcZRMMBlr/+FAddU3jsi1diA6p2ruB/39zK1x9/lOJsP2a4g6WvP8M+
      czSPP3ADrs/0Fp1OJBJh69atjB49mrS0tN5/EUREROSMBtw4jsufxYxpU0jzp2C3GRiGgcPp
      ZtycOaQ2HuVYW/y8oilX862v3UtxTjoOuw3DMHC6vVw2bw51Bw4TAMBk2dJlzLnhNobmpGIz
      DBxuH1ffchfBwxsorWtP4J2KiIjIhRpwAej0LKr27SGYNYRB/viR1LSMU2p9wKLyyBE8g7Jx
      AUTrOFppMX7ssG5nuVOzGZFt52BFQx+0XURERHragKsBOpkZi9Jcf4y9OzezeuN+7rz/Qfyf
      F/msGIe3fswrK/Zx1yOP4wRobqDRnk1m6mceZHOTm+vnSG0jMKTrcCgU4nQjitFoFIBYLEYk
      EumRexMREZELN2AD0DvP/yur99QTDgVJzR/DQw9/hZL89NOeGw22sPyd11i1p4F7vvo4E44X
      SpsmltuD65QyHwOv10ssFut21GaznTYA2WzxABUKhXA4BuxLLiIicskYsJ/GNz/0HW40ozQ3
      1LJ35zbefPa/GbPgC9w6fzLHR74sy6KhfDcvvvAq9uJp/NmfP0SG14lxPPAYBkTCRCxI6RaC
      LILBIIavezJyOp2nbYvReUGv14vf7+/ZGxUREZHzNmADkM1ux2a3k51XxNy8IqZPn8J//b+f
      M3xkCZMKfADUHdrE/z6/iMtvvo9rZ487pSbISMsgPdxIc4dJmu+kYTArQl1dG4OGZJ53uwzj
      7LPGREREpHclSRE0eDIKKSn0UlkVL1yOtFXz4m8WMe+uR7nh8vGnKYgGXLkMLYix70BVt8Ph
      tkYO1UYYXnj+AUhEREQSb8AFoKpDuzl6rJnPluK01x1ib1mAosHx+p4Dm1cTGDSFq6YM4/P7
      ZOzMm38Zq5e+T2MgXshsmTE2f/weZu44hg/Smj4iIiKXogE3BBZpr+WF53+LK2sww4cU4LLb
      6GipY8++o1x+64OMz/MCUHroAGYoi8Vvv3XKNVLS8pi/4DJS7DBs2rXMOfwc//2f/834scPp
      OHaEg41Ovv5H95Li0HCWiIjIpWjArQQNYEbDVB49TEVNPZGYhcefzqjRo0nzurp6e0r3bKbs
      cxYydHkzmTJlAu7OrcMsM0Z12QEOl9fi8mUxYeJYUhzn3nmmlaBFRET6lwEZgPobBSAREZH+
      ZcDVAImIiIicjQKQiIiIJB0FIBEREUk6CkAiIiKSdBSAREREJOkoAImIiEjSUQASERGRpKMA
      JCIiIklHAUhERESSjgKQiIiIJB0FIBEREUk6CkAiIiKSdBSAREREJOkoAImIiEjSUQASERGR
      pKMAJCIiIklHAUhERESSjgKQiIiIJB0FIBEREUk6CkAiIiKSdBSAREREJOkoAImIiEjSUQAS
      ERGRpKMAJCIiIklHAUhERESSjgKQiIiIJB0FIBEREUk6CkAiIiKSdBSAREREJOkoAImIiEjS
      UQASERGRpKMAJCIiIklHAUhERESSjgKQiIiIJB0FIBEREUk6CkAiIiKSdBSAREREJOkoAImI
      iEjSUQASERGRpKMAJCIiIklHAUhERESSjgKQiIiIJB0FIBEREUk6CkAiIiKSdBSAREREJOko
      AImIiEjSUQASERGRpKMAJCIiIklHAUhERESSjgKQiIiIJB0FIBEREUk6CkAiIiKSdBSARERE
      JOkoAImIiEjSUQASERGRpKMAJCIiIklHAUhERESSjgKQiIiIJB0FIBEREUk6CkAiIiKSdByJ
      bkBPs8wYZQd2smHTJvYdOEpHJIYvLYfJMy7nqvkzSHGcyHxWtINVSxazetNOgqaDkRNncdst
      15HuPjkXWjRXH2bx4nfZW3oMd2oO86+7kblTRmE3+v7+RERE5OIZlmVZiW5ET+qoL+Ol199h
      5JS5TBpbgtdlp7m2nPffeoP6jKl8+8GF2AywrCjv/fpn7AoXcd+dC0l3hFj+9qtsa8rmz755
      Hz5HPN0E6o/ws/9+mnFX3cXVM8fSVr2f3/z2d4y+9kFumzMW4xxCUCQSYevWrYwePZq0tLRe
      fgVERETkbAbcEFhKVhGPfuNxrrxsClnpfjwpKeQNGcWDX7mP5i1rqAjEz2s8uIGPDsOjX76H
      wpx0/Bm53Pbg18gP7Gb1tqNd11uz5C0yJy/k1iunkepLoaBkEo88eDtblr/HsfZIgu5SRERE
      LsaAC0CGYWCcplsmFouCw42z84737tzGiGlzyXSfdK4thXmXTWTb9t2YAFYbO3ZXcPns6Se9
      UAY5xWMo8rRzoLKhd29GREREesWAC0CnE2iu4Y2X3mTkVdeT6wGIUVVZTfHQIaecm188hPbK
      CtpNoO0Yx4LZFOR7u51jOL0U53kpr+oegGKxGNFo9JR/YrFY792ciIiInLcBVwR93O4NKzhU
      3cKxyqMcazGZueAmrpg5rjPxRQkGoxSkpp7yOEd6Ou5IB5EoWMEgYV8qPvtnz7KTnpFKeSDQ
      7WgkEsE0zVOuGY1GAQgEAqftnRIREZG+NWADkMPlweuNkpmVTVNrJaUH9lJVMoQhOZ2hxwKL
      09R/W3Q7+nk14qc77vF4TntuJBKvFXI6nbjd7vO6DxEREel5AzYAjZp8OaM6/9uMhdmz7kOe
      ffJpHv/O/yHP6yDF66S5pRXoPisr0txE2OXD5QDD48HT0Up7FLzdXqkYzU2t+Id2Hxo7G4fD
      gcvlupjbEhERkR6QFDVANruL8ZffwNjMVrYfqAHsDC4azNEjpaecW3W0FH9REV4b4M8nz9tI
      RVV7t3OscAdHawIUDc7qmxsQERGRHjXgAlAkEjndwBYQo709iNPpBGDcpGkc2bya+uBJZ8c6
      WLV2J9Mmj4+/MIaXqZOG8snaDZwoY7aoLd1JZTiNUYMze/FOREREpLcMuCGwnStfY/m+IDNn
      Tmf08EJcDjvtTTV8snwJdalTuG/MIADShk5l4aRPeeqpF7j7joWk24OsePs12gsuY97Eoq7r
      XXb97Wz8r1/w+ntOrpo1lraq/bzyxrvMv/1RcrzORN2miIiIXIQBtxJ0LNzBvp3b2blrF0cq
      a4lETVLSspg4ZQZzZk/F5zoxpcuKhdj48VLWbNxJwHQwatIsrr9mHqmu7lthtNWV8+HSpew5
      Uo3bP4h5117PjLFDsZ3jhC6tBC0iItK/DLgA1B8pAImIiPQvA64GSERERORsFIBEREQk6SgA
      iYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERERSToKQCIiIpJ0FIBEREQk
      6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERERSToKQCIiIpJ0FIBE
      REQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERERSToKQCIiIpJ0
      FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERERSToKQCIi
      IpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERERSToK
      QCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERER
      SToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUg
      ERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSceRiCe1LItgKAyAx+3C
      MIyevDjBtkbWrV7Jp5u2Ud/cjuFwU1QygS/cfhvF2b7O80zK9mxk8dKVHK2oI4ZBek4h8665
      nrlTR+OwGZ2XM6nYu5Hfv7OE8toWHG4/0xZcz81XzSLFae+5douIiEifSUwAAlat3UQgGOSq
      ebNI9ft6LASFWmt58ZmncA+ZyX1f/zaFOelEgy1sWLmYp59+ie995+v4HVCzfx1PvbSMWx94
      kK+OLMZhi1F5aDev/OYFOqyvceOM4QC0VOzkmZff49q7H+KxCUMJ1JXz6m9+zRsxO/ctnIW9
      B7ObiIiI9I3EDIFZFrsPHGLVus0sXbmWtvaOnru2zcVVtz/EA3deT3FuBjabgcubztyFdzAo
      uI9Dx0IA7N6ynpJ5NzNr7FBcDhs2m5OikZP5wnXT2Lh+K5HOy6364F1GzLmFOZOG47TZSMst
      5ov33snhDSupag72XLtFRESkzySsBsgyLQKBIKvXb+H95atp7wj0yHXd/gxGDh+C/TM9SlYs
      RChqw9k5bOXzp9Le2nrK49vb2vGlpWIHMJvZc6CBGdMmnvRCGaTnDWOYP8yBysYeabOIiIj0
      rT4fArMsi1A4gsMeDyLBYJBVn24GDBZePRe/z9uzNUFALNzOsjdfJlp8OSNz4rc8/arb2PHU
      s7yx1MH86ePx2KLs3bqGD7c288DX74kHnpZj1EYHkTfI1e16hiOFwnwfFVX1ML6g63gkEsGy
      rFOfPxbruvfT/V5ERET6Vp8GIMuy6AgEWfbxpxw+WoFpWlgWhMNhVq/bBJbJ9VfPI62HaoIs
      y6Kp+jBvvfkGjc4hfOOhW3F2XtbuzeKuL93JM798hi2rluAwLAJRJ/d//TGKMlPij49EiHl9
      pJzSFBv+VD/hcLjbUdM0MU3zlHYcD0CBQACbTRPvREREEq3PAlA8/ARYvmo9H32ykUAwSLwz
      JB6CAoEQq9dtxrTgxmvmk+q/yJ4gK8qutR/y+w/WMX7eQu69Yka3WVt1h7fwwu9Xc/V932T8
      8ME4jBjHyg/y1u+fp+mae1gwaUj8MrEYsdNcPhaLwWcmgbnd7tM2JRKJdP0+JSXlwu9JRERE
      ekSvBSDLsmhpa6e8opqWtnbsNhtHK6pZt2kbHYHu4Sc+L8yiIxBi9aebsCyLW66/Ar/Pe2FP
      bob5+O2XWLarmXseeYyxQwZhOzlMWUGWvr2YCdc8wtRRRZ0HbeQPHctdtzXx5KvvMnnMY2T4
      fPgCzbSHwd9tFCxKY0ML6aNSz6tZdrsdhyMhE+9ERETkJL32adzW3sGS5WvYsmMP7R0BDMPA
      NE2i0Wi38BOviYn/t2EYBILxEORN8XDjNfNwOp3n98SWxc7Vf2DZ7jYe+5PHyU91nXpOpJ2a
      +hBjB2We8itfdj5G4APaOiJkpOczOKOF0rIm8koyus4xg20cqQkx+6qs82ubiIiI9Au9VpDi
      TfEwumQo3hQPsZhJJBI5Y/jJzkznistncMWcGcydPY2SYcXYbOe/0GCkrYb3lm/j1vvuI+90
      4QfAlUbJ0FS2bt5F7OSiZMvkyLaNWJnDyPQ7wXAze9ZEPl75EcFovLbHsiwO71hLg7OAkQUZ
      p7++iIiI9Gu91gNkt9uZMHYklgWL3ltGbV3DacMPQEZ6KrfdeDUzp0zA6by4JjXVHqUp6oKW
      Y+zdU9v9l4ZBftEIMnxOrrrtLp5+6iWebalg5sTRuGwxDu/azKZ91dz2wKP4Opsxcf5NbH3q
      lzz/ssmcaaNprz7IB2u2c8v9XyPdrZWgRURELkWG1Yvzsi3LIhYz2b57P6+9vYTGpuZTen4y
      M9K4beFVzJ42EYfDcdGzvxrLd/H2krVET/dLm4N5C+9kTEG8difQ2sCOLRvZc6iCqGWQWzyK
      2TOmkJPh40QrLEJtTWxav5Z9R6pxpeZw2bx5DMvPwnaOTY1EImzdupXRo0eTlpZ2UfcnIiIi
      F69XAxDEw86Rskqee+n31NU3YHauhWNZFh63mztvuZa5s6fh7IHw018pAImIyKXKsqwB+fnc
      q4vSWJZFbX0ji5d+RFtHB2NHjWBQdlbn78CwGRQW5A3o8CMiInIpisVMmtuCLFq1l9qm9gG3
      kG+vToNvbWvng5WfUF5Rw7ULLmPOzKkcKavgzT8spfpYPZYZfzEVfkRERPqPaMzkrdV7eXvN
      Pppag7y//iA3zCrhC/NGYx8gC/r2WgAKhsJ89MlGjhyt4JYbrmDGlAl43C4m+UeDZfHa2x/g
      cjnxerUwoIiISH8RjsRYtGoPryzfSaRzBnRlXSuvfLiDksGZTC7JS3ALe0avBCDTNNm7/zBH
      yiq55formDB2JA67HcMwcDjsTJ4wBoDG5hZyMjWVXEREpD+Ixkx+9c5GPtx4mJjZfcgrEI7y
      zOLN/MM3rsXrOc81+vqhXimCtiyL5pZWAsEQeYOyMQyj2zDX8SJo0zSxdwajgUxF0CIi0t8F
      QhGeXLSBFVtKz3jebXNH87Vbpl3yn929MpBnGAYZ6WkU5A3CZrOd8iIZhoHNZuuRae8iIiJy
      cWqbOvi3Vz45JfxkpnqYMrL7kNfitfvZV97Ql83rFQOjkklEREQuSF1zB0+8vIb1eyq7Hc/N
      9PHDB+bznXvnMCjjxN6cMdPiyUUb6AhG+rqpPUoBSEREJElVN7TxT79ZxZ6jdd2OD8vP4Mdf
      voKxQ3NI97l59OZp2E5a/fdwZSO//3hPXze3R2lrchERkQHMsixMyyISNWntCHGoqon9ZfWU
      Vjexq7SOtkC42/mjirL44YPzyUmP9/oYhsHscYXMnzSEj7bGh8gs4O01+5hUksekEbl9fUs9
      QgFIRERkAImZJoFQlMaWAMea2tl7tJ7D1U2UHWumuqGNz5v6ZACXjS/kG7fN6Ao/xznsNr5y
      4xT2ldVT3dAGQEcowotLtvFXX15Aqtfdy3fV8xSARERELlGWZREMR6lt6qCyrpXDVY0cqGjk
      WFM7xxrbCYZPuzPmKew2g7kTi/nm7TPxpbhOe052upf7r53Iz17/tGuK/J6jdbzzyX7uu2bC
      JTepKeEByIxFCUeiuNyec95cVEREJBlFojHqWwIcqmyk7FgL+8rqKa9toS0Qoj0Q4ULWtRk/
      NId7rp7AuKE5pLjPvL7PgilDWLurnE92lncde2PlbuaML2JYwaW1rl9CApBlmZRuW8VTz73A
      p1sPEI6l8eTbi7BtfZnvPvEu//KL/2Z8fmoimiYiIpJwlmURMy2iUZPyuhb2Hq2jtKaZLfur
      aWoLEomamOe5jJ/dZuB2OchJ8zJmSDaji7MZkpfO8IIM3M5ziwN2m41v3DadbQdraO+cBRaO
      xnjyrQ389NGrcTnt532viZKQAFSx7QMe+5O/IW3EdK6aN40/vL8dExg5aS6DHb9iySd7GXfn
      TNQhJCIiySAcidEWCNPQGmB/eQNHqho5WNnI0ZpmQpHYeV/PYbfhT3GRnZbC8IJMRhVlUZyb
      xrD8jM8d4jpX2WleHr1lGv/zxvquELbnaB2LVu/li1eOu2SGwhIQgEzeeOFpvOMX8uT/+zEt
      W3/Pkg+2A+BMz2FcUR77d+/DumMml8hrKCIics5M06KhJUBdcwelNU3sL2+goq6VyrpWmtqC
      5309u80g1esmP8tPQbafMcXZFOelk5/pJys9BVsvfJheMWUo63dXsHZXBQCWBb//eA/TRxVQ
      UpjZ48/XGxIQgIKUl9Ux4ZrLyfY6aDnNGYFA+wWNY4qIiPQ3bYEwR2uaKTvWHO/dqW6ioSVA
      c3uIaMw87+v5PE4Kc1IZmp/BiMGZjBicSVZqChl+T58NQbkcdh5eOIW9ZfU0tsZDW1sgzHPv
      buZHDy/Ae5Zaov4gAQHIQ05uKtsPHSLcbfzSoqOunK2HKsm/sUDDXyIicsmI73EZn4JeWt3M
      wcoGDlY2sr+sgdqmdoKRaNfO6ufjeO9OyeBMRhVnMX7oIIYXZOJ22XE5EruXZmFOKg9cN4mf
      L9qA2TkrbPuhY6zYfISbLhvZ74fCEhCAbNxx1z28/eNf8tN/8zC3MIhpxdi7YQXPv/xz9jT7
      +doNl2tGmIiI9FvhSIyOUISGlgD7yuo5XNXIvvIGyo41X1DQsRkGHpeDNJ+bwTl+xhTnMCQv
      nVFFWQzK8PXCHVw8wzC4Zvpw1u4sZ+O+KiC+QOJz725hSkkehYP69+bfvbIb/NlYZpQPX/1f
      nnzxHY5WN2ACGDZyCku4/+t/ygM3X45zACUg7QYvInLpipkmDS0BGloCHKlu4kBFI+W1LZQf
      a6GlI3Te1zMM8DgdZKd7Kcj2M7wgk5LCTAZnp5Kf5b+kZlIB1DS08Z3/WdJtRekpI/P46y9f
      icPRf3fcSkgAgvhU+KbaSo6W1xCMRHG4UigoHkZBdtqAK35WABIRuXS0tIcoO9ZMRV1rfMuI
      mmZqmztobgt2LQB4PpwOG4MyfAzNS6doUBqji7PJy/SRne7Ff5EzsvqLxWv384u3Nnb9bDMM
      Hr99Bgtnj0xgq84sIdPg2+rK2XO0njETJjElt+jE8fqjvP/OJ0y96kryUz2JaJqIiCSRaMzk
      aE0z+8vrOVzVxIGKeM1OezByQUNZAGk+N6MKsxgxOD79fGh+Bv4UFyluB3Zb/+0RuRjXTB/O
      hj2VXUNhpmXx0oc7mDQij8E5/XNdv4QEoDee/AlvHh3Ci09O7nbcZbd449l/YVc4kz+/e7YK
      oUVE5KJZlkUkZhIKR6lr7uBgRSP7OgPP4apGojHzc/fH+jyGAW6ngxS3Iz6ENTg+jDWqMJus
      tBQMg35fBNyTPC4HX144hYOVjV1T+Rtbgzz1h0384IF557zQYl9KyDT4PbsPMXbe7fg+U+fj
      yshlXHEeu3fsxrxrNvbk+bMjIiI9JBozaW4P0dDSwdGaZvYejW8XUXaBNTsAKW4Hmf4UcjN9
      jCrKYnhBJkPy0snP8uF0XFo1O71lWEEGX7xqPM8s3tw1K2zzvmqWbTrCjbNL+l0gTEAAMrDb
      bdQ3N2MCJ3cGWpEQLe1B7Ln6wyQiImdnWRbtwQiVda2U1jRxqLKJg5UNNLQEqG8OnPd2ERCf
      el6QnUpepo8RnT07BdmpDEr3XvQqygPdDbNGsHlf1WeGwrYzfVQ+eVn+BLeuuwQEIDczZk7h
      ibdeY/mtV3LNpCIMwLJibPzgDT7aVc1990zVNHgRETlFOBKjtqmd/eUNXbU7lfVttHaELmjL
      CICs1BRKCuM9OqOL4vtjpXrdeD0Dt2ant7idDh5eOJldpbUEQvGd6JvbQvzy7U38+JErEty6
      7hIyKHfzQ99i8UeP8VfffIhps+dRUpRF+Z5NfLrtICPm3c0Xrxir+h8RkSRlWRamGa/biW8X
      0cye0lrKjrWwv7yBYDhKLGae144BhgFOhx2Py8GowiyGD85kZGEmIwuzSPd5cNht2PTNu0cM
      L8jk3qsm8Pz7W7uObdxXydINh7hu5ogEtqy7BE2Dt2irLeWlXz/PinU7CERiuLwZzF94O/ff
      dRPZvoHVxahp8CIiny8aM+kIRahvDlBV38qeo3WU1TRTWtNMfUvggq7pdTtJ87nIy/QzZkgO
      w/LTGZafQX62X706fSASjfHjp5ezu7Su69igDC8/ffTqfjMrLGHrAB1nxqJEYyZ2hxP7AE3f
      CkAiInGmZdEeCHctKlhaE98fq765g5rG9gvaG8vpsJGT7iU/y99VoDw4O5XcTB9eT//fk2qg
      2ldWz0+fX0lrx4kFEhdMHsKffvEyXP2gcDzh89JsdgeuxL8OIiLSC4LhKLVN7RypbuZwVSOH
      KhuprGulLRCmPRi5oGvmpHsZkhfv0RkxOJPhBRmkprhI9bo1jNWPjCzK4ubLR/HKsp1dx9bs
      KGP66AKumT48gS2L65MAdGjdYp7/wwauuusRrp5SwNLXX6W06fOnIuaWTOeWK6epEFpE5BJw
      fCPQaGfNTtmxZnYdqaW0ppkj1U10BCOEo7HzWmvHAGw2A6/HyfCCzK6endHFWaR53Tgddhx2
      DWX1ZzbD4M4FY9m8r5p95fUAxEyLF5dsY/KIPHIyvAltX58EoMbKA6xY8THD5t8B5LD6vTdZ
      c7Ttc88fd42bm6+c1hdNExGR8xSNmQRCERpbg1TUtrC/ooHDVU2UVjddcM1OituBP8XF4OxU
      SgqzKBkcn5VVnJvW79aPkXOX4nbyjdum8+OnlxMMx2eF1bcEeP79rfz5PZcntBcwF80AACAA
      SURBVMeuT2qA2puOUXGsmaz8InLS3DQ3NBCOff7TOtxeMlJ9A2ZPMNUAicilyjQt2oNh6lsC
      HK1p7pyJVc+xxnaONbVf0HYRToeNNK+bwTmpFOakMmZIDkPzMxic7SfFrZqdgej597byxke7
      ux374YPzmDOhOEEt6qMeIF9GLqMzcjt/itFcX0u76WbEyBG4Vf8jItJvBEIRaps6ugqUD1U2
      UlXfSnNbiI7Q+dfsGEZ8b6yinDRGdPbqjCzMIs3nJtPvwa5hrKRw79Xj2bi3ktKa5q5jzyze
      wqiibHLSEzMUloAi6AhP/cN3+LRhEP/76+cpSR8g3TwiIpeI4x3/MdOivjkednYeia+zU9pZ
      sxOMRM97fyyITz8vyPYzftig+MKCxdlkp6Xgdjlw2m0azkpSHpeDx74wg799diXhaHzBymON
      7byybCeP3z4jIUsTJCAAeZg1ayrvv7CKlZ9sZfhCrfosItKbYjGTQDhKY2uAitpW9pXVc6iq
      kSNVTTR2blx5vlwOO74UJ7kZ8e0iRhdnMzQvnaH5GSpOllMYhsG4YYO4ff4YXluxq2sRy2Wb
      DjNjTAGXjy/q8zYlZBr8LV/7IbWtf8/rTz7BkLy/45qpw7DpW4GISI8IhCLUNLZT09DGwcpG
      DpQ3UFXfRk1jGzHz/Lt1XA47qV4XeVl+igelMbIwi+K8NIoGpZHqdffCHchAZDMMbp8/ho37
      qjhU2QjEC+qfXbyF0UXZZKWl9Gl7ErAQYphlb77GkfpWtn7yIdvKTW6/80bSTyoGyi2Zxk0L
      Bk7PkIqgRaS3dQQj7Cur59PdFRyqbKC0prlrL6bzYTMM0nxuBmf7GT44k+LcdEYWZpLpTyEj
      1aPeHblo2w7W8H9//VG3vdtuumwkj31hRp8OkSagByjM4t/+ihWHW7uOvPjUk93OmHTjY9y4
      YGpfN0xE5JLS3BZk0/5qNuypZNeRWlo6Que9krLP46QgO5XRxdmdCwtmMCjDR4rbgduZ8LVy
      ZQCaNCKXhbNLeGv1vq5jS9YfZMHkIUwYnnuGR/asBPQAWcSiMcwzPK1hs2G32TUNXkSE+PYR
      lmURMy1a20NsPlDN2p3lbD90rGttlTMxAIfDRoo7XrMzvCCD8cMGUZybxpDcdJyO+PutCpSl
      r7QHw3zvfz6gsv5EZ8jg7FT+5ZvX9dmwah/He4tgeyvNbR0YdheZmRk41Z0qvcQ0LS2LL/2S
      aVlEoyaRWIxI1CQciRGJxmgPRghFojS3hWjpCNHSHoqvwdMcIBKN0RoIc6SqicBZQo/dZpDu
      95Cf6aMoN41RRdkU56ZRmJNGmk81O5J4Po+Lx26fwf/99Udda0lV1rfy0oc7+Not0/pkVlif
      BSAzEmD5ohf47e8/pLK+BZvDzbCx03j0sceYPjIffUxJT4rGTJasP0h2mpeRhZlkJ2idCUke
      4UiMYDhKKBKNB5lwjPZguCvEtAcjNLUFaQuEaWoNEghFCEVihCIxAqH4VhEXUrNznGFAboaP
      SSNymT2ukJLBWWSmap0d6b8mjcjl5stGsWj13q5jH248zMwxg5k+uqDXn7+PApDFtqW/5SdP
      PEXOyGnMmTcJM9TKulVL+FFpHU//6l8pTvf0TVNkwGtpD/G7Fbt499P92G02MvwevvulOYwu
      zk500+QSEonGaA9EaA+FaW4L0RYI09IRoiMYobk9RDAcpaktSGtnT00gFCUaixGNWYSjMWIx
      87z3v7oQORleZo4ZzJzxRQwvyCDN59ZQllwS7DYbd1wxlm2Hajhc1QTEN899/r0tjCrK6vWh
      sD4JQFY0xDtvv0XO1Jv5+b/+iFy/C7Ao3/Yh3/yzv+HtVfv441sm90VTJAms3n6Ut9fsxbIg
      gkl1Qxs/fX4lP/nqVZQUZiW6edLLjm/MebxuxjQtTMsiFI7Fh5faQ109Ma0dJ3pomtqCNLUF
      aQ9GaG4LEorEul3j+DUTxTDiM7RSvW7SfG6mjsxn5pgCxgzJwe20K/TIJSkrNYX7rp3IEy+v
      6RoKO1LdzGsrdvHIjVN7tYyhTwJQNNrGkcNVzH/0B+SlHk90BsWTZjNrRD67d+4BBSDpAcFw
      lA82HDrlW3drR5i/e/4jfvjgfMYOzUlM4+SCWJZFNGYSjZnEOntXojGTYDhKWyBMezAcH1Zq
      C9EeiO9ZFY5EaemIH2/rCNMRitAWCCf6Vrqx2QxcDjtOuw2nM76zucthw+dxke734HU7yUrz
      4PO4yPB7SHE7SfO5yMv0k5vpS3TzRXrM5eOLuGbacN5ff7Dr2Ntr9jF7XGGvzgrrmyEwK0Ik
      7MDv/0wdhs1NWqqLskBHnzRDBr5tB2s4Ut102t81tgX515fX8N0vzWH8sEF93DI5WTRqEghH
      iETju4oHw1EC4ShtnaEl3iNzomemrSPcWS8TjW/TEI7SEYr0+vDS+XA6bDjs8ZlWXrcDl9OB
      1+3E73XhdTtJ87rJSHXj7ww4Hlf89x53/N9upx2vx6meHElKD90wma0Ha6huaAPi27T86p1N
      /MM3rsXr6Z0NcvtwFphFNBImGDx52fUQMdPCjEW7HbfZHTgdjgEzDV76RiQa46Otpd1WuvV6
      nHQET2zgWNfcwROvrOEH989jzBD1BPWUmGkSCEXj9TAdYQKdPS7tgXDXUFO8Xib+71AkSjgS
      I2ZahCLR+EyoaAzzAlYp7i3xMOMgxRUPMT6PE6/bSWZaCj6PM94zk+rB73GS5nPjT3Fht9lw
      Oe24j/foOO0J2eNI5FKT5nPzyI1TeOLlNV3v4Yermvjdil08cuOUXnnOPlkHKBKo4uu33saB
      sPczC2tZBDvaiRlOfCknip3GX/sV/vMvvox9gAQgrQPUN8pqmvnezz/oWhfF6bDxwwfms2ZH
      GR9uOtzt3HSfm7/5ypWqCToPlmWxcW8V2w8do7k92K2Opj0QxuxcpyZmmvG6G9MikXHGMMDA
      6FrfxmYY+FKcpPs8uJ12MlI9ZPg8pPncpHpd+DwuUr0u0nwefB4nmakebIaBzdb5T+d/K9CI
      9I6YafKz19axYsuRrmMpbgc/enA+U0bm9/jz9UkPkGFzM23uleSc40jX0GGaFi/nx7IsFn96
      oNuicMPyM5hcksfUUfkYhsHSjYe6ftfcHuInz63kLx9eoJ6gc1Be28K7aw/wwYaD3Zav7yvx
      4GHgsNtwOuw4bAYOh50Ul4N0v4dUr4uMzuCS7vd0BZ1Urwt/SjzcaP0bkf7NbrPxyI1T2HO0
      rmsoLBCK8uKSbQwfnElaD88K65MA5HBn8Wd/92998VSSpNqDEdbvqeh27MbZI3E543vMffOO
      mZiWybJNR7p+39we4l9eWsP3vjSHcaoJ+lwt7SH+6/V17Dla12PXtNsMXE47Locdj9sR/7fL
      QarXHe+d8XvI8McDTYbfg9/r6qypceDzuEhxO/B6nOqNERlgstJSeOC6Sfzs9U+7tnXZV97A
      4k/2c+81E3p043Rt9CIDwurtR6ltOtHFmO5zc9n4oq6fHXYbj39hJjbDYOnGE8Nh8ZqgT/j+
      /XMZq56gU0SiMX7zwXb2lp05/NgMA4/bQYrLQYrbiT/FiccVH0byeVydPTJu/Cnx4aYMvwen
      I96b43Y6cDni9TJOh/2MzyMiA9+8icWs3VXOmh1lXcfe/HgP00cX9Oh6bgpAcsmLRk3eXrOv
      27G5E4tJ9bq6HXO7HHzjthmYltWtJ6iuuYN/enEVf/2VKxkxOLMvmnxJsCyLJesPsmTDwW6z
      rSaNyGXB5KH4Upxk+k8EHKfDjr2zRsZu7/y3zdCsJhE5Lw6Hja/dPI2dh4/R3B4C4kuc/OKt
      jfzTY9f22Bcl9R/LJW/30Voq605sqOdy2PnCvDGnPdfjcvCtO2dz3Yzh3Y43tgX562eWs6+s
      vlfbeinZdaSW59/b2m1mVnFuGt+7by4LZ5cwf1J85+ZhBfHdwzP8HlK9brweJ26nA4fdpvAj
      IhckJ8PL12+Z3m02+IGKBhat2ktPzd1SAJJLmmlavLNmf7ep75NL8hiU8fl7fznsNr55xyyu
      md49BLV2hPmn36xid2ltr7X3UlHT0Ma/v7q2W8Fzus/Nn987hwy/tq0Rkd43b1IxcyYUdzv2
      2spd7C9v6JHrJywAWZZJdelePlr2Ie8uXkpTBBoq9rNy7WYCCZhlIpem0pomdhw+1vWzYcAN
      s0actYvUYbfx+O0zuPYzPUH1LQGeePkT9pT2XMHvpaY9EObnizZQ13yipspmGHz15mmUaIhQ
      RPqI3W7jywunkJ2W0nUsEIrywvtbCYQiZ3jkuUlIAGou28zXv3Qnj3/nr3n5pef5yd/8MxUB
      cFpBfvmP3+eVj/YldP0QuTREYya/W7Gr2xYHl48vYsaYwef0eLfTweNfmMlfPrwAr/vESqN1
      zR389PmVPLt4c4+3ub9raAnw0+c/YsuB6q5jKW4Hf/HQfK6cMjSBLRORZJSf5eMvHlpA+knL
      WGw/fIz/+N1aItGL6yxJQACy+N2v/oNy+1D+45fP8r2v3oa788t6auEIphbnsHnj9n61xL30
      T0eqmli/u7LrZ5fDzg2zSnDYz/2PtctpZ9bYwfzlwwtIcZ+YE9AejLBo1V6e/sPmrqmYA10w
      HOV/3lzPnqN1XX//HHYbX71pGjPHDu7VTQlFRE7HMAxKCjP50jUTu6bAWxas3VXBii2lF1UP
      lIAAFOTA/jJmXHEDw7K9nymStONy2WltbVYPkJyRaVos33yY8EnfAIYVZDBpxPlvnGcYBhNH
      5PIXDy3Ad9KeMxbwzpp9/Pr9rd2eZyAyTYvXVuxiw97KbsevnzmC62YOVzGziCSMYRhcP3ME
      k0vyuh1/ZvHmbsufnK8EBCAn/lQP9bV1fPYjJdxyjD1Hj5GRma2VoOWM2oNh1uwo7/rZMODG
      2SUXNT1y0ohcvn//XPwpJ6bPm5bF22v28eKSbUSiA7cnaOWWI7z58Z5ux8YPG8SXF07RYoMi
      knAup52v3zqt28aoHcEIv3p74wUPhSXgnc3B9Tdcx/Zlr/Ds68toaAuCZdFYeZBf/ee/s6Ui
      wlVXztRGqHJGq7YdpaE10PVzmtfNzHOs/fk8hmEwdWQ+3/vSnG49QaZp8fbqffz6/S09Nv2y
      PzlQ0cBz723tNtSXmerhW3fO6rVdmEVEzlfRoDQeuG5St2Mb91WxfPORC7qe/W//9m//9uKb
      dX4Gj5qCo3Ybz/36RRYvX0cg2sGyP7zNtkO13PTlb/PwzZfhHED1BqZpUlNTQ3Z2Nm639iO6
      WOFojF+8tZHG1mDXsVvnjO628vOFMgyD/Cw/o4uzWburvCsUWMC+snoC4SiTS/J6dDn2RKpp
      aOOJV9ZQ09DedczjcvD9++YyqihLQ18iycqysEwTKxLBikaxYjEwOhc2TdD7gmEYDM1L50hV
      I5X1bcebycGKRmaPKyT1PPcKS8hK0Danl0d+8ATX3LmNjdv20RGO4nT7GDftMiaOKFDvj5zR
      ntI6Dlc1dv3sdtm56fKRPXZ9wzCYXJLHXz18BX//wkd0hOIbrFrAW6v3ggUPL5x8yW/bEAxH
      eebdLZRWN3cdc9ht3H/tRCaX5Cn8iCQpKxwmsGUr7StXEj54iFhrKza/H9eI4fiuWEDK9OnY
      EvRl3uNycN+1E9lbVk9rR3wGcENrgF+/v5Xv3Duna//Hc5GQHiAAw7CRnlPAuAkTmTx5MiOG
      FJDiceJ2u3vk27VlRqmpKKOispqGphYcbi9up+OUcGVZJk21VZSVV1Df0IzhSsHjdnarQYqf
      U8nR8kqa24L4/H4c59FDpR6gnmOaFs++u5ny2hMrP88YNZjrZ47o8VlKgzK8lBRmsWFvVbci
      6P0VDYTCUSYOz72k62NeWbaT99cd7HZswZQhPHDdpEs+3InIhYm1tdHw9DM0/+41opWVWMF4
      mYoVChGtriawbj2R8nI8EyckLARlp3kxTYvth2q6jlXWtVKQ7WdYfsY5f3lLSA/Q0c1Lee69
      7Tz8R99keLaHze8/xz/84veEogaTrr6LH/7xA6S6L/AN2DKpPryTt/+whBbTTYbfSyzczrH6
      Dq69+0HmjDsxTGJG2nj/9VfYXtFKVkYahhmhobGFeV94kLlj4/UkVizCuqWv8+GmowzKzSbU
      Uk8opYiHHriLvDStiNvXymtb2HH4xErNNsPg1rmjsJ/H1Pdzdbwm6LtfmsMTL6+hPRhfeMs0
      Ld5avQ/Tgq/ePPWSHA5bs6OMNz/e3e3Y2CE5fO2Wabhd2iJQJBmZ4TCNTz9DxydrP/8kyyKw
      fgP1sRg53/7ThIWgW+eOZuO+KnYdiX8emJbFC0u2MWVkfreFE88kIe90Sxf9lg1lQ/luppto
      0wH+7T+ewyicyQ3j0vj9m7/gzWmzefiqMRc0EyzQUMFri95n5vV3M3V0MW6nHcuMUXNgHf/z
      wm8Z+VffZ5DHAMtkxevPcdgcxeN/fDWpHmf8f2xHO1HjxMtStXsV72w4xh89/scUZvkwwwGW
      vfEMLy9azuMP3oh7ANUq9XeWZbFyy5FuCx+OHpLdo7sDf5ZhGEwblc8PHpjHP764ikA4PhwW
      nx22F5sBj9x0aYWg0uomnly0odustjSvm2/dNYt0n0K9SFKyLDo+WUvHp+vO6fTg5i20r1hJ
      6g3XJ6QmyONy8PVbpvGDXyztei9raAnw9Dub+P79c8+pFygB/fchDh4oZdy0afhsBoe2fkpp
      Q5DHfvgT/uTPvs2VY/NZ98mmC14I0eEfxFce+xaXTxyOx+XAMAxsdgcFY2Yz1FdLeV28cLat
      cjvLD5g8dM9C0lJcGIaBYbPh9aeS5jueHk2WL13OnBtuozjbj80wcLi9XHnznYSObKK0tv3z
      GyI9rqE1wEfbjnb9bAALJg0hxd27M5UMw2DKyHx+/MgVeE7qHbEsWLR6L88u3nLRK5L2lYbW
      AD97fV3XDssQX+n5/9w9myG56QlsmYgkkhWJ0PbhMjDPcbkPy6Jt2XLMUOjs5/aSksIsvnjl
      +G7HPtlVzocbD5/T4xMQgGJEoxYOhwOw2L1jG0H/OKaN8IHdTZrfTTDQccELITrdHvzeU7u/
      go1l1LT7yEqLd9ft27GNoZNmk3amz85IHUerYPyY7lsAuFOzKcm2c6iyZzZkk3OzeV81xxpP
      hM7cTB/zJhWf4RE9a8LwXH704Pxu6wRZVnyxxN98sL3fh6BgOMoL72/jQMWJP7d2m8E9V42/
      6CUEROTSFmtqIlpVefYTTxKtrSVWm9h9E++YP7bbKIBpWry6YifVDW1nfWwChsBSGDo8n3fX
      rWTDzDTeX7mVYVNvIssGZqCFozVNDBpZ0KMLIbbWlvLKC79l6LybKU6LZ76qijIyR0xi3ccf
      snX7DhpaAnjSBzH3yuuYPm4odgNoaaDRnk1m6mdyos3NoNxUjtQ2AkO6DodCodOuExONxodN
      YrEYkcjFb+CWjMKRGB9uPNTt2MwxBfg9jj59TScMy+bbd8/iP15bd6ImqHOxRJfDzt1Xjum3
      w2HvfXqQlVuOdDt2+fhCbpw9glgsSqx/5zc5m1iMWFUVZkN8hqQtKxN7QQHYVdAu3ZmWRXVD
      O7VNAWKmSYbfQ36oFbP9/FZVtoJBwm2tkMDPNbsNHrp+Iv/w4iqC4fibWE1DO68u38kf3ToN
      +xnKVBIQgAy+cO8DvPbHP+VP//RjIoaXv/zubQBUH9zGztJWHv/upB4ZUrQsk0NbPualt5Yx
      fv5t3HLV9M4urzCtLSF2f/oxrimTuP72L5HmcVB9ZDeLXv0lVTc8zG1zx4JpYrnduE5pi4HX
      m0LsM58YNpvttAHI1jlTKBQKdfZ8yfnaVVrP7qMnvmm4HHbmjs8nGAye4VG9Y2xROn9yxzT+
      842NXX/hjm/MGomEuWvB6D5v09nsPlrPC0u2ETNP/Pkcnp/OQ9eOw4xGCEYVzC9VlmUR2biJ
      4LvvEqs5BuHOGjmXC3teLp6bbsI5Y7qWNRAAdpfW8+rKvZTXtRIKx7CwcDnsZDnhSv8QLmsp
      xXGuYzAOB2HTxEzA+/DJhg3ycfXUIby77sTQ14rNR5g4NItZY/I/93EJ+TQunHoLL/12GGu3
      HGTYxJlMGjkYMGkPO3jke3/FdRMGX3QPUDTYwvuvvcCnpRHueeRbTBw66KQ3ADtOl405V97F
      wqmFXWErK3s+eVku/uvF95g7fQzZhgHhMBELUro1yCIYDGLzdW+l03n68bTjz+v1evH7/Rd5
      Z8npwy1butWFTRmZx4SSwoS1Z86kVNJT/fzd8x91K4x+c/V+nC4X91494YzfPPpSRV0rP39r
      S7eVnv0pLn740ALyMn0JbJlctFiMpt++RPvid0/9XShE7GgZ7b/4Jak330TGA/erNyiJmZbF
      olV7+c0H20/Z4DkUiVEVgZezJ7HXk82DtVtwW2fvEnZkZpJWVIStH3yuffnG6ewtb+JQZbwH
      NGZa/ObDXUwdXURm6ukndyQkABmGQd7widw+fCKWaRKLxjAcDkZNv4pR0y/++pGOel556pc0
      Zkzgz//8JjK9nw0mdrKyMymrqcUwTv4QNUjNHUWa8z3aO8LkpGWQHmmgucMkzXfSMJgVoa62
      lUFDss67bfoWdv5qm9rZvL+662fDgBtmlST8tZwwPJcfPTSff/7t6q7hMMuC11bswgC+eNX4
      hK+n09oR4n/eXE/DSatmuxx2vnXnLPIyfWd9Da1olMjRMoI7dxKpqgbDwDm4AM+ECTiLizD0
      gdrr2gNhdpfWsau0lsbWIP4UJ6OKspkwbBDOj5bR+t77Z71G63vvY8/MJPXWWxL+90b6nmVZ
      rN5exktLd5wSfroxDDb7C0mNhfhi/Y6zdkR4pkzBnpaWsJWhT+b1OPnGrdP5m2dWdK3bVtcc
      4KWl2/nmHbNOu05cgsZjLNobKnl30RssX7uNjnAUjz+Ledfewq03LCDjlMByHswIqxe/Tl3q
      eP7o/lvxOk9f5z1i1BiWfbiZ0A1TcZ90ihntIGa6cTkd4MplWIHJ3gOVFE85sX5QuK2BQ3VR
      birMvPB2yjlbsv4g4ciJbyODs1OZOvLzuzX70uSSPL5331z+7ZVPuqbnx0yL11bG19i59+oJ
      vbJG0bkIR2I8++6WrnUyIP4+de/V47lsfOFZPwhjjY00/uYlAuvXY31mpofh8eC9/DIyHnwA
      e2pqr7Q/2VmWxbaDNTz/3lYOVTaeMiiRl+Hl2ootzDYtzhpDTZPWxe/inT0LR17e2c6WAaYt
      EOHV5Tu7Leh6Jp+kDuWy1jKGhJs/9xx77iDSbr25X4Sf48YPG8TNl4/k96v2dh1buukws8YV
      MnvcqSMGCXlnjjSX85fffpx//cXLNMdcFA/OJ1B3iP/6x7/ge3//JM3B6AVfO9BYyZqdtdx6
      67WkfE74ASieOJvB4UP8YfUuTuRhix2ffIiraAo5fjtgZ96Cy1j9wfs0BDq3QzBjbProPczc
      8QzL1Rt/b2vtCLFs05Fux66fVYLT0T9WYD6+TtD3vjQH70nT8Y/XBL26fGdC2mVZFkvWH2TF
      ZzYJvGx8EbfOHX3WFaxjzc0c+5cn6Fi16pTwA/Hix/YVK6n7t38n1tp6mivIxfpkZzn//NJq
      Dp4m/ADUNHXwinckSzJGndP1Yo2NBLZt79lGyiVhf3k9Zcdazvn8iGFjk//zSwxsaWnkfOuP
      ceTm9kTzetQ9V09gSN6JJT1M0+K5d7fQ1HpqnVJCtsJ4+5d/x+ubWvjJz37Jnz16H9deey23
      3XEXU4tcvPHirzGGzmH6yNwLqgOqL9/Byk/3QizIgX172LPnpH/27ceTVUyGz4lhT2HcmKEs
      X/QSa3ccorr8CJ+ufJ8tNS4evv8O0j3x71TpuUMxqzfz+uJVHKutZsNHS9hYAY88/EWyzrGn
      SlthXLjV28tYuaW06wMgw+/hsS/M6Fe7lB/fQHVMcTaf7DxpA1ULdh6pxQLGD8vp09lhG/ZW
      8b9vru/W3T00L53/7/55Z90w0IrFqP/5LwjtPHt4i9XVY7a0kKIi2x5VXtvCv768hpb28BnP
      swyDg54shoaaGBQ9+7pk9rQ0vLNm9lQz5RLx0dZSth86du4PMAwcTgeXR45BLBZ/M7PZ4j2/
      s2eR/Sd/gnPokH75d97psDE4O7XbZtatHWHC0SjTRxV0a3MChsBCrF+/makL/4jrpw470RCb
      m8sW3s2Vixazcd0mHr1hYnwq+nlKHVTCHXfcxGlHOQ0bKa4T33z9eSX86fd+wMF9e6lt7qBk
      3BQeHD282070Noeba+7+GhPKDnKkog5XyTjunTCalH7SAzGQxUyTFVuOYJ5U/TxnQhHp/v4X
      Ig3DYFJJHn/x8AL+8Ter6DipJuh3y3eCZfVZTVBlXSu/WLShW3d3qtfF/7l7Nhn+s6/0HNq7
      j+CWLef8fB2frsN/ww24S0ZcUHulO8uyWLx2P42n+cZ6OqZh473M0YwJ1GI/y+wds0OLtyaj
      4zWK5yNSOITBP7yXcGkpZlsbNp8P59AhODIz+9Ww12cd38z6hlkjeHv1vq6/EUs3HGbW2EKm
      jy7oOjcBAcjCMsF1uhlThh2n045lXugyiODLLODyuQVnP7GTzZnCqAlTOVMnsmHYyR8ymvwh
      /W9680AWjsSInrRdg8fl4Jrpw/v1BqSTRuTy/c+tCTK45+rxOHqxJqixNcB/v7mO2uYT63nY
      DIOv3zKdUUXntmVIcNs2rPCZex5OZgWDhHbsUADqIYFQlG0Ha85+4kmqnanUOn3kR868+Js9
      Q3WLySgz9dz2xjpZVloK9swMUjIzeqFFvcv2/7N33/FVlIn+xz9zWnoPKSQBQkLovXcQFLFg
      x+7q7uqqu+rd9a5775bf3d17t/d11y02bOuKYkFFUAQUEESQAIFQAiFAeu85OefM/P4IAiFB
      akg53/frxetF5jwz55nT5jvP88wzNoPrZwwmc18xh0paxjE1e30sei+TLHm1eQAAIABJREFU
      9KRowkNaTqI74UgSyIiRg9i6cilbD50wk7Jlsu+zVazbdZhho4bRRa4glk4U6HJw0+whRIQE
      0Ds2jB/dNYO0Lj7w/IsxQY/ePJmQwJPHBO1k8eqd7c4VdSF4vD5e/jCLXSfdLHbBtIFMH9Hn
      S9Y8aTv5ZzcbbMs6+We9jrTP7fG2mvH8jNax2al0nP4gFzBo4LlWS7qxIX1jz7rRZmi/Xh1T
      mYskKiyIr145qtV0JHnF1by6ZtexvzvlKrAFdz7AW2u+ycN338aEyVPpmxBOwb4dbPx8J5GD
      57DwkuEXdCZo6Z6+uBv7d2+dQkx4ML1ju8eg8xNvoNoyO+nRmcBNi8Wrd2KzGSycNbTdyzLP
      lWlZrNi0n/c/29+qE2TUgAQWzh5ydleinem9gE5gncM6cmpnm5EtwDrNr6YjKYnAEcPPvVLS
      bfVLiGRYatwZjwMKDXIx64QhKt3VyPQErpg0gLc/2Xts2bsb9jJpSBJDU+M65yqw4MShPPHk
      37lpzhgOZW/hw5Wr2FvUwBV3PMzffvMD4sNcp9+I+AXDMBjeP77bhJ8vfHED1R/eNZ2ggNY3
      UH1l1U5eWXWa+TjO0s7cUl78YHurA2ef+AgeuHYcIYFn931yJJz9ZdLOhK4xLUFP4HLYiYk4
      uy6LAMtHhO/UY4aMwECibr9VUxb4qQCXg7vmjTzlhIAnstsM7po3ktjI4ItQs45lMwwWzh5K
      0gnHD59p8be3NlNT7+6cq8DAICi8FxNnzOGGG2/khhtu5JabFzJ9/HDCutDVPReKrgLzX3GR
      IaT1jmbLnsJjg5ItC3YfKgdgcN/Y824JKq2q52cvrG11h/fQIBeP3jyFfgnn0n9v0bDx0zNu
      CTKcTiJuugFHbOw5PJeczGG3cbC4+tiMtmci0VPHpZX72j2jtYWFEf3VewieMKFLD16VjhUd
      HkS/hEh2Hyo/Nj7xZMGBTm6fO5z5k9K77D0Nz1aAy0FsRDAbdh45dkFNTb0bwzA6KwAdZ7PZ
      cDgcPebFbo8CkP/64hL5vvGRbN6dj+doq49pWew+VEZkaCADks9+RvEv1Dd5+OOrG9l/wsHS
      bjO496oxTByS/CVrnpojOprmvXvxlpxZc3nQ2DGEXX65ZoW+QAzDICY8iE+yDtHsPX0INYB7
      5o+iX0wIZmMjVrMbw2HHER9P8JTJRH/1HgKGDu2SlyzLxWMYBokxYUwakoTDbqfR7cXd7MUw
      Wk7UJg5J4t6rxjB5aEqXvtDkXCREh1JR09jqdzK3sArD6qgRmSco3L2J9z/NPuPycf1HMW/a
      yB4zENrj8bBt2zYyMjIIDw/v7OpIJ7Asi4278vnD4g24T5jVOiY8iJ9+bTbJvc7+c+HzmTy3
      YhtL1+1pNe7nmmkD+cq8kec1A7WnsIiS//0/fBUVX1rOkZBA3Pf/G0dc9x4w2dWYlsV7G/fx
      zLLM03aVXja+P/dfMw6bYWA1NWEdvTO34XRiBAYq+EgblmXh9vho9viwLAunw06gy3FBxyV2
      NWXVDfzwqVUUlh+/UvKiBKDPl/6Vx/78xhmXHzLnK/zhv+48p3mAuiIFIPnC5t0F/Prl9a1C
      UK/IYH545wz6JZ55d5VlWXy4JZe/vbW51QFyTEYi37ttKoGu87++wVNcTMXf/4l7796WydBO
      5HAQMGgQMQ/ejyP63Fuw5NQsy2Lt9kMsWp5JeXVjm8fDglxcNSWDG2d17NQKIj3F+h2H+P3i
      jcd+My9KAHI31FJV23D6gkc5A0OICg/tMd3VCkByog1Zh/nzkk00uI9PTpYYE8p3b5lCWtKZ
      hYl9R8r58bMfterL75cQyQ/unE7cBbzDu9XcTFNWFo2Z2/AWFQFHb4Y6ahSBw4ZiODrpdoJ+
      pKKmkY27jrDr4PGboWakxDBhcBLJvcLVwiNyFv706kZWHb1F0EUJQP5OAUhOZFoWG7OO8Pjr
      rUNQ79gwvnvLFPr3/vK5jipqGvnBU6soKDt+D67gACc/+soMhnTzuTtERDpSZW0j3/nL+1TU
      Nl6sy+AtcjM/4oXFS6lsOPWNTgt2b+B3v/4L+8s0Xbv0XDbDYNKwZB66YQIBzuMDhwvKavnl
      S+u+9KaFXp/JE29+1ir8ANw9f6TCj4jIaUSGBnLPFaOAizQTtOVt5t9P/ZF12WWEBJ76SpHo
      XnFkrX+NJR9uP80dbUS6N5thMHloMrfNbT0xXXFlPT9+dg15RVVt1vF4fTy3fBubd7eeqfny
      ielcOi6tQ+srItITGEd/e6eP6HNxApDXW0tOTgHDRg7H9SWjzAOjExneN5Gc3Xs5j9uBiXQL
      hmEwf2I6U4a2vly9rLqBX7y0rtUlm5ZlsW7HIZZvyml1cjAiLZ6vzBvZo6/eEBG5kJwOO7fN
      HX6RusAsC8sC38lXkrRTzmdaZz8PvEg3FeBy8K0bJjJ1WEqr5YXldfz2359woKASy7LIzivj
      2WWZNJ9w9VhiTCjfWDCW4B44eaiISEfqHRt2cQKQwxlOeloin679mBr3qee0qM7fx+Z9+QwY
      PLDHzAEkcjohgU4evG48U04KQQVltfzqX+vJyi3hiTc/azXTc3Cgk69fOeac5g8SEZGLNAbI
      sLtYcMO1FHz6Jj/+/bMUVdW1tPRAS6uP10PBvi38+Ic/ocieytWzdDNU8S+hQS4evmFCmxBU
      VFHH/zyzps3A6JtmDWHswMSLWUURkR7l4kziYRgMnXkLj9x9iD8/909u+vANJo4fTWxkGJbX
      TVlRHhs/3YYrpg/f/n8/YGB86EWplkhXEhTg5D9unAhYfJJ15Nhy3wkD4gxg+si+XDd9kOZ/
      ERE5Dxd1HiDL5ybr0zW88vo77D2QR3FZBTZnMHEJiWSMmMjNC69naGpCj2v90TxAcjYamjw8
      /vomPsk63OaxQX1i+f6d04gIOf1dnUVE5NQu6jSuhj2A4VPmMWzSXGqrq6iurcNwBBAeEUlY
      SGCPCz4i5yI40Mk3rxuPAaw/IQTFRATxwLXjFH5ERC4AzQR9EagFSM5FQ5OHzJwi3vlkL+MG
      9Wba8D70igxW15eIyAWgG/mIdFHBgU6mDEth/KDeOB2nnkBURETOnm4hLNLFKfyIiFx4CkAi
      IiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIiIn5HAUhERET8jgKQiIiI+B0FIBEREfE7
      CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIiIn5HAUhERET8jgKQiIiI+B0FIBER
      EfE7js6ugMiFZDU3487JoWlHFt6SUgyHHWdyMoHDh+Hs2xfDMDq7iqdlmhYHCivZllPE4ZIa
      TNMiMSaUEekJZCRH43TYO7uKIiLdngKQ9AyWhaeggMoXXqQpayd4va0eNoKCCJkxnciFN2EL
      CemkSp5ebYObRe9tY92OQzQ1t96HJR9nM3pAIl+7cjTxUSHdIsyJiHRVCkDSI3iKiij5xa/w
      lZW1+7jV2EjdivfxFpcQ+/C3sAUHX+Qanl5tg5tfvrSerNySdh/3eE02ZeeTV1zFL+6dQ0xE
      19sHEZHuQmOApNuzPB7KH//rKcPPiZoyM6le8jqWaV6Emp05n2ny/Irtpww/JyquqOf3izfi
      9XatfRAR6U4UgKTba9y8hebc3DMuX7/mozMKSxfTkdJa1m7PO+Pyuw+VkZlT1IE1EhHp2RSA
      pNtr/PxzsKwzLm/W19OUvbsDa3T2sg4U0+j2nr7gUV6fyZa9BR1YIxGRnk0BSLo9T0HhWa/j
      Leha4eFIae1FWUdERFooAEn3dxatP12VdQ77cC7riIhICwUg6fYciQlnv07C2a/TkXrHhp31
      OknnsI6IiLRQAJJuL2j0aDiLOXGMoCACBg/uwBqdveH94wl0nfmsFHabwZiMxA6skYhIz6YA
      JN1e0PhxOPuknHH5kBnTcfSK7cAanb2UuHCmDDvzfchIiWH0AAUgEZFzpQAk3Z4tIICYBx/A
      Fh5+2rIBgwcRccMNGPaudTsJh93GXfNGMCA5+rRlo8ICeeTGibicXWsfRES6EwUg6RFcffoQ
      94PvEzBoILQTbowAFyEzZhD7nW9jD++aY2eiwoL40V0zmDospd1w47DbGNE/jp99/RISokM7
      oYYiIj2HYelSkg7n8XjYtm0bGRkZhJ9BK4WcO7PJjXvXTpq278BTUoLhcOBMTiZo5EhcGQO6
      xf2zfKbJ7rwyPt9XxJGSanymRWJMGKMHJDAsNU4tPyIiF4AC0EWgACQiItK1qAtMRERE/I4C
      kIiIiPgdBSARERHxOwpAIiIi4ncUgERERMTvKACJiIiI31EAEhEREb+jACQiIiJ+58xvP93N
      WL5mcrJ3Ulhejc0VTPqgocRHhpzypuE1JYfYln2AmD6DGJKa0Hpbpo+Cg3s4cLgUV2gMw4YP
      JsSl2XhFRES6qx4XgCzTy76ta3lj2UeEJPanX0IMzQ1HWPnOUsZdeTtXThnMyRnIdFfz5iuL
      ya+qJmZ4QKsAZHoaWb74abYcMRk+pD/1Odt5d8Uq7v76PaTGhbXZloiIiHR9PS4ANVYUsC5z
      P9d/7RHSE6OOtfhcOmMXv/3zYkaN+BHJocd7/izLZPv693EnjGZa0n6yT9re/s3vs7k4lIce
      voOoIAeW5WPzin/x6uvv8dDXbiLYqQgkIiLS3fS4MUABEYncduddDOgd1aq7Kywhg+SwOkqr
      3CeUtqgt3sfqzGLmXzoVR5tXw8v6dZuYNvcyooJasqJh2Bk17TJc5fvILa3p6N0RERGRDtDj
      ApDd6STQ5WqzvLZwD4frI0mIDjy2zDKb+eCttxk84wqSIgPbrENzKUdKXWSkJ7Za7AyJon8v
      J7n5FRe8/iIiItLxelwX2Mksy6T0YBbPP/8q46+6g4TgL5qFLA5sep9c+wAeGpPa/liemiqq
      XVFEBJ30qOEktlcY+yqqWi1uamrCNM02m/H5fEDLXeHdbnebx0VEROTi6tEByOuu47M177Hi
      0xzmXHcPU4cfDzpNFXm8tnIntzz0HQJs7Y/jsSwTnC4cbR42CAgIwDKtVksdDgeWZZ1cGJut
      paHN5/Ph8XjOc69ERETkfPXYAFRfmc9rL71ImT2Zex74Jn16hR8LP5a3ifeXLmXQ7GvpG9G2
      u+wLht2B4W6i2YLWjUAWDQ0N2CNaXwrvcHz5yxkYGEhoaOi57ZCIiIhcMD0yADVWHeHZJ54k
      avQ8Hpg7keCT5uwpO7SDdZv3EphXzY7Vx5NNfXU5TeTyf1kfMvXqu5g9NJooXzkVNSYREScM
      lzLdlJTUEZ8efbF2ya+YpsXWnCI27y7gcEk1Xp9JYkwoowckMn5Qb4ICnJ1dRRER6eZ6XACy
      TDcfvvkqrsFzWHj5ZJztdG9F9xnJj37+c07urNq8/EV2M4g7Lh+HKzAYHHbS+rjYuTuXfhPT
      jrYgWTTVlLG/3OSGpKiLsEf+w7IsKmub+Osbm8jMKcbrOz6eKjuvjDVb8+iXEMm3rh9P/95R
      GKea1VJEROQ0etxVYPWlh9ia5+bKORPaDT8AdoeLsPBwwk/6F+Ry4HAFER4eTqDLARjMnDub
      zz54m4Ml1ZiWhaexnlXvvE54xkT6xqo760Iqr27kJ4vWsHlPYavw8wXTsjhQWMkPn17N/oLK
      TqihiIj0FD2uBai2spCaqgre/Ndzbef1sdmZceXNDO4ddsbbixswiWumlvLKM/8gPCIcT0M1
      RlQad1w/A82BeOF4fSYvfbCdg0XVpy3b0OThL69v4pf3zSUwoMd9hEVE5CLocUePmD4jefBb
      SbRtPwAMG72i2pnv56hhM66hP8EnreJg9KxrSBtZRkVVHXZXMAmJ8bjsSj8XUn5pDeuzDp9x
      +byiajbtzmfGyL4dWCsREempelwAcgVHkJoWcU7rhkXH017bkGHYiIiOIyI67vwqJ6eUlVuC
      2+M74/KmZbFlb6ECkIiInJMeNwZIuqfC8rqzXqeovLYDaiIiIv5AAUi6BPspBqx/+Tr6+IqI
      yLnREUS6hJS4s++2TIkL74CaiIiIP1AAki5haGovQoNOPSv3yew2g3GDkjqwRiIi0pMpAEmX
      EB8dyrzxaWdcfnj/eMZkJHRgjUREpCdTAJIuwWYY3DhrCJOGJHG60UApceE8dMMEjQESEZFz
      piOIdBnBgU4euXES180Y3G53WIDTzoyRffl/X5lJTHhQJ9RQRER6CsOyrJNviSUXmMfjYdu2
      bWRkZBAeroG7p2NZFoXldWQdKOFQSTU+0yQhOpTh/ePpExeBo80U3yIiImenx02EKN2fYRj0
      jg2jd+yZ37JERETkbOhUWkRERPyOApCIiIj4HQUgERER8TsKQCIiIuJ3FIBERETE7ygAiYiI
      iN9RABIRERG/owAkIiIifkcBSERERPyOApCIiIj4HQUgERER8TsKQCIiIuJ3FIBERETE7ygA
      iYiIiN9RABIRERG/owAkIiIifkcBSERERPyOApCIiIj4HQUgERER8TsKQCIiIuJ3FIBERETE
      7ygAiYiIiN9RABIRERG/owAkIiIifkcBSERERPyOApCIiIj4HQUgERER8TsKQCIiIuJ3FIBE
      RETE7ygAiYiIiN9RABIRERG/owAkIiIifkcBSERERPyOApCIiIj4HQUgERER8TsKQCIiIuJ3
      FIBERETE7ygAiYiIiN9RABIRERG/owAkIiIifkcBSERERPyOApCIiIj4HQUgERER8TsKQCIi
      IuJ3FIBERETE7ygAiYiIiN9RABIRERG/owAkIiIifkcBSERERPyOApCIiIj4HQUgERER8TuO
      zq5AR7Ask7rKUrZnbqWgrBqbK4SBw0YxMDUJp904Vs7ndVOYt5/tO/dQ2+ghJDqBCePG0Csy
      FONYMQtPUz27tm1mb14xAWG9GDdhPInRYSeUERERke6kx7UA+TyNbFjxGn/5xyKO1EG//mkk
      Rrn4YPHTvLz8U3xHy9WXH+Llp//Oy29/hCsijvS0/tjrDvPXx//M9ryyY9vzNlaz+Jm/smZ7
      ASmpaQR7S/jHX/5KZm4JVufsooiIiJynHtcC5K4pp7DRxT33f4v4yJBjrTRjRg7kd795irwp
      4+kfZedQTjbxw+dw44QhBDqO5sBxY+kX8xpLV6xj8DeuxQXsXL+MI/Y0vnX3dYQ47VjWGJJi
      3ub1pctIe+AuwgN6XIYUERHp8Xrc0TswKpFrFlxNQlRIqy6qwMgk4kKbqKn3ADBg7CXMnTz0
      ePgBwKB33340V1XTUsrDp5u2M23WLEKc9pYSho2MUdOIaMznQHHVxdotERERuYB6XACy2ew4
      7PbWCy2L4r2fkteUSJ+4AAAcDifGSYN4LF8zm9ZvJD4jjWCAxiIKKsPo3y+mVTl7UDj9E1zk
      Hqk46Wmsdv+JiIhI19LjusBOZnqb2bN1La8v+4Qrbvkq0a72Ry431ZWz+u3FfF4Wzn33TMAA
      qKulLiiCsICT1jGcREWHs7umptVit9uNaZpttu31egFobm6msbHxQuyWiIiInIceHYCaakpZ
      sfR1dhb7uOYr9zG0b1ybMpZlUrAvk9fffI/APqP45r2XERnkbHkMC8PuwN5mrZYWpJNHQbtc
      rnZbfOxHW6TUIiQiItI19NgAVJm/m2ef/RcRA6dy//2ziAoJ4OS2H8sy2bp6CW99vI/ZC25i
      6sh0nPbjvYKGw4m9sYEmC4JarWxRX1eHM8bZans2W/s9il+0CgUEBBAcHHwB9k5ERETORw8M
      QBbVhXv42xPPM+bae7hsbDo2WzvdXpbJ9g9fYcmmMu775sP0iQ1pMyaIiF7EGGWUVniIOiHs
      WL5GCorr6T00BhEREel+etwgaMvTwLIlb5A29xbmjTtF+AFqC3fx2uocvnb/vfTtFdo2/ADY
      ohicEcnnmdkn9HZZ1JUe5mCNnQFJUR21GyIiItKBelwAqi07RE6lk1njBrUfao7K3voZccOn
      0T868Eu3N3XOZexd9y6f783Ha1rUVxbx1utvkjJmFr0jgy509UVEROQiMKweNiq3qnAPy1dn
      EhUbTZvGH8PG4DFTSI4OYtvad9hbZhEZ2jYABYbGMn7CaALtLeOEKkoKOJSXR3l1AzZHAClp
      6aQkxhPobG94dFsej4dt27aRkZFBeHj4BdhLEREROR89LgB1RQpAIiIiXUuP6wITEREROR0F
      IBEREfE7CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIiIn5HAUhERET8jgKQiIiI
      +B0FIBEREfE7CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIiIn5HAUhERET8jgKQ
      iIiI+B0FIBEREfE7CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIiIn5HAUhERET8
      jgKQiIiI+B0FIBEREfE7CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIiIn5HAUhE
      RET8jgKQiIiI+B0FIBEREfE7CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIiIn5H
      AUhERET8jgKQiIiI+B0FIBEREfE7CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MAJCIi
      In5HAUhERET8jgKQiIiI+B0FIBEREfE7CkAiIiLidxSARERExO8oAImIiIjfUQASERERv6MA
      JCIiIn5HAUhERET8jgKQiIiI+B0FIBEREfE7CkAiIiLidxSARERExO84OrsCHcUyfdRUVdLQ
      1Aw2BxFRUQS5nBhGq1J43U1UVFbhs2yERUYREug6qQxYlkVDbRU1dY3YnIFER0fhtJ9USERE
      RLqNnheALIvygv2s/OBDDpfX4bDbMX0evAQx7/qFjEyNO1a0umg//375DWpMOw7DpMnr5IqF
      tzGyX6/jmzO97PhkOSvWZ2F3BWI2NxGaNISF111OdIirM/ZQREREzlOPC0BNVQX8e/ESMibN
      5/IRAwgPDsTndZO7fS3PP/8vUv77P4h2gdVczcuLFhE/5Ra+MnkwLsPHgW0fsejZ54h99GGS
      wlvCTWnOJpas3s2t99zLgN7ReBuqWLb4WRa/u56v3TgbpzoRRUREup0ed/i2B0Zx8933M3fS
      cCJCgjAMA4czkAFjZpHizCevpBGAvO2fUBCQwVXThhLotGNzuEgfM4dJfS3WbtlzdGsWH61c
      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
    </thumbnail>
    <thumbnail height='576' name='SPY Vol Trade' width='576'>
      iVBORw0KGgoAAAANSUhEUgAAAkAAAAJACAYAAABlmtk2AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdd3xU153//9edrpE06hKiiiaK6NWAacYY27g7sePEiR2nOJu2my3Z3Wz5
      Zn+bbMtmN2V34/Q4TuISG1dsYxtjYzC9997UUG+j6ff+/hghJBAYBNKA5v18PHggXd25c2ZA
      M+8553POMSzLshARERFJIrZEN0BERESktykAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKO
      ApCIiIgkHQUgERERSToKQCIiIpJ0FIBEREQk6Tgu9cRoNEpra2tPtkVERESkV1xyAIpEItTU
      1PRkW/osy7Kor69PdDNERESkjaG9wHpeJBJhx44dDB8+nLS0tEQ3R0REJOldcg+QXDm73Y7T
      6Ux0M0RERJKeiqBFREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUg
      ERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgk
      HQUgERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCI
      iIgkHQUgERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKO
      ApCIiIgkHQUgERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERE
      RJKOApCIiIgkHQUgERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcB
      SERERJKOApCIiIgkHQUgERERSToKQCIiIpJ0FIBEREQk6TgS3YAeYZlUlx/j4OGTtEZipPpy
      GTduLD6v64I3aaw8xpbdh8ktKmHCiP7nXC5G6ZE9HDxRhTs9l0mTx5Pmsvf0oxAREZEe0ucC
      ULi5mqd++RNOx7IpGTUcr8tO+aGtvPbiMm5+8LMsnDQU45zbxIINLHv2ear9zWS2pHUKQLGw
      n+V/+Bk7q11MGT+S2v3reGPFSh75wucZWZhx3rVERETk2tfnApDNmcLij3+Bgf37YTPOxpN5
      B9fy379dxuSSvyDLefZ8y4qxY80KzIHTmWUcZN851zu8cQU7G3P52tceIsPjwLJMRrzzDMte
      fIOvfeEBUp0aRRQREbne9Ll3b4cnjcEDCjuFH4D8YSNIDzbQGOx41KKp4iDv7azltptvwHHe
      sxFl7YebuXHRzWR44lnRMGyMn3UznoYjHKtq6smHIiIiIj2kzwWgrlkc2LCO2KDRFKZ1OGqG
      WfHyq4xfeDuFGZ7zbxaqoqzGw4hh/ToddqZmMizPybGy+h5ut4iIiPSEPjcEdkYo4CcUDlNV
      doKd2zZzrM7O5x59CHd7x5DFoQ9fpzSlhHsnDum6lqe5kUZXFhkp5/zUcJKTm86huoZOh4PB
      IKZpnneZaDQKQCQSIRQKXfFjExERkSvTZwPQey/9ig2H6giHgrh8A7jj7jvJTTs7CyxQc4wX
      3z/MJ7/2pzhtXZcyW5aJ4XTiOO/HBm63G8uyOh11Op3nHQOw2eIdbbFYrD0MiYiISOL02QC0
      5KGvcYtlEvA3U1l2grWrlrF5RwmPfPwWXGaAN195lZJF9zDId+Gp8YbdgS0YJGRB504gi1Z/
      K47Mzk+f3d711Pgzocjj8ZCamnqlD01ERESuUJ8NQBAvWPamZTBs1AQGFw3h59//HtuPTWcY
      h/hwy0Gcx2rZ9MbZZBNobiDEYf7ftjeZe89j3Dw+myyrhrqmGJkZHcKNGeJ0VQsFxdkJeFQi
      IiJypfpcALIsCwzjvJoeh8tHXraHxiY/OROm8M//OZ5zB6s2LX+SPYzl0aXTcThd4LAxssjD
      rj1HGDq7uO2aFoGG0xypt3hgQFavPCYRERG5uvrcLLAjO9awfvsBGpr8xEwTLItIOMDxvR+y
      p8LO6GEF2OwOPCkppJzzx+mwYXc42762AwZzF93E1pWvcbi8DtOyCPmbePvVF8kaPYtBORrO
      EhERuR71uR6grJwcPnhtBWtXRnG5nBiAaUaJ4uGeRx5jcIbzI6/RUd7wGdy/oJYXn/o5nhQv
      0aAfT+EYPrl0Dk4tAy0iInJdMqyupi1d5ywzRnNTA80tAUzLwuHykJ2djctpv+jWFf7GGgKk
      kJvRuWfHskz8TfU0NLVid6aQm59zwZljXYlEIuzYsYPi4mJ8Pl83H5WIiIhcLX2uBwjAsNnx
      Zebgy7y826Vm5NLVoJZh2EjLyCEtI+eqtE9EREQSq8/VAImIiIh8FAUgERERSToKQCIiIpJ0
      FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERERSToKQCIi
      IpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERERSToK
      QCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUgERER
      SToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgkHQUg
      ERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCIiIgk
      HQUgERERSToKQCIiIpJ0FIBEREQk6SgAiYiISNJRABIREZGkowAkIiIiSUcBSERERJKOApCI
      iIgkHQUgERERSToKQCIiIpJ0HIluQI+wLCLhIIFgiJgFdrsDr9eLw24777xYLEJra4BYzMLm
      dJKW6sVmGOecZhEOthIIRbDZHaSmpmK3dT5HRERErh99LgDFwq2se/cNth04QWsgTMyysBk2
      fHmDufOeOxmUkwaAZUY4vm8b76z6kLqWIKZpYQKDRk/jntsX4vM42s6LcXDreyx/dyPBqAUW
      9B89jfuWLsTncSbwkYqIiEh39bkAFAm0EHBkcNfHH6YwPwen3UbI38jmVa/wy9++xN/82cN4
      DDi6ZSUvrDnBLbffS3FRf1JcDvwN1bz+3G948d1MPn37dGxA3fGtPP36Zu59+LOMKyog1FzN
      K8/8hj++4eWRu2/EoUFEERGR606fe/t2+/K4edEihvTPx+WwYxgGnrRM5ty6GFfZfipa4udl
      DBrHlx5/jEmjhuB1OzEMg7SsfBbfPJeTu/cRaLve6rffomTeUiYM64fdZuDNyOOOe+/j9O61
      lDUELtgOERERuXb1uQBkGAaGcW59jkVTZQWtqXlkpcSP5PYbiM977hCWRWN9Hfa0VJwAsVoO
      HfczecJozl7RIDV3AMMyTQ6V1vXgIxEREZGe0ueGwDqyTJNAazPlxw7w+purWPyxh8i80CO2
      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
      CMKg8/8BJYbeHiG/EwMAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='576' name='SPY_StorePred' width='576'>
      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
      t5/BQ0v4YMd6Sks9+M04R2tamLZsOCm+jrfFtixsnw/vaUHMIBBIIpFIdDlqmma3AQggHo8T
      iUR64UpERETk0+qz3eABDMPEHwiQkVPExPFjqK89xv6yCqLRWC+/ss3+d1/i6Q+bePA7f03q
      iYRjhXn+4f/myeZ2brtsRsdA7WiUmA1JRtfnh8NhzOSuycjj8XT/arZNPB4nEAhgmtrlTERE
      pK/1SQCKhlo5criMrR9u4L0Pt7Bp8xaaIwbFJUOYd8WtXHHVJb07OjsRZO3qD1hyy7dI853y
      Sq4kll/9Gf7jv1ZSt2gaeWkZpMcaaG63SEs+pZwdo662ldzBWZ/6pXtv9puIiIicrQsSgGzb
      pq3xGLt27uSDDW+xcdtuDpSWEbHcjBgzkRU3fpGli+cyZuQI0pN9vb8PqhUjHLVwd7Mmj2G6
      sa0o8bgNgTyGFlrsPVBJyZRBnWWibQ2U1sW5ojizt2sqIiIiveCCBKB4pJa/+9LdvHe4iQQe
      xk2fw10P3sLi+bMYVJhPst/bqwOeT+NJZ+qkQax9fTWT7rkWv+v4i9tx3nvjdQJDJpKT0hGO
      FiyawyOvv8r00Z8nK8mNbSXYtO4VrLzxDM1LvYCVFhERkZ5yQVaCjkVq+fkPf0bBlAUsXTKP
      nLRkXC6zV1p6wi3VrFu3gfY4gM2RPZsIJg9lbEk2AEWjpjJ7wlCsSDPPPvYw26tjjB01DK+Z
      oHz/HmJpw7jrjpvJT/MCYMUjrH72Yd7eH2TcmKG01xymrNXPF+//PMUZSWdVJ60ELSIi0r8M
      uK0wosFGtm/fTeQMs82zikcwdkg+0BFM6isPUXqkmrhtkF04hFFDCk5bi8i2E1QfOUhZRR3e
      QBbjJowmSXuBiYiIXLQGXADqjxSARERE+hfNyRYRERHHUQASERERx1EAEhEREcdRABIRERHH
      UQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhER
      EcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQAS
      ERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdR
      ABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERER
      x1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIR
      ERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EA
      EhEREcdRABIRERHHcfd1BXqTlYhTtnsL0fRhjC3JPr2AbWMlYhzev4sD5dXg8jFiwiSGFGTh
      MowThbASccr37WBfeTW+lFymzZhMqs9DZxERERG5qBi2bdt9XYmeFo+GKNuzldffXEtpeSWz
      r/syNy0ed1q5cHMljz30MK1JRYwfOQgjHmL3jl1Mvuw2lk4uASARbeP5x37F7sYAMyaPou3Y
      QTaXtnDnffcxpjiTs8lAtm0TCoXw+Xy4XK4evloRERH5tAZgC1CEdc8/xb6gn2XX3cX4D56l
      prtiiRDP/f5h0qdexeeXTMZ9vDNwxWVXEktYncX2vfcqu1rz+NpXbyXd58a2lzH8zT/y7LOv
      8LUHbiHFo15EERGRi80A/PR2M3PFddx/102MHVpwxgusP7SVPeECrl58MvwAGKaJ13MiF8bZ
      sGEjC5evIN3XccwwTCbOXU5ScymHalp69UpERESkdwzAAOQiLSMNl/nxnVP7dm1n2IRp+D+u
      RypSTUWdn5HD87sc9gTSGZ7noayisQfqKyIiIhfaAOwCOxs2NdXHcBc28swTj7D3wEGa2sK4
      fSnMWHQZly+dScDjgpZmmn2ZpPk/EqYMD9k5aexraASGdR4Oh8NYlsWZxGIxYrFYL12TiIiI
      nC2HBqAowbYYR49WcdmieXzm+lsJ+NzUV5Xx/B8f48n2BJ+/dj4mNobbg/u0xiQDr9fLR4eP
      ezweuhtTbts2sViMRCLRWxckIiIin4JDA5CHQMDDhJmLmDqhpPNoTtFwbrzlc/znr1+mbsUc
      8l1uzHCIiA1JXUKQTTAYxJ3R9e070wyvEwHI7/drFpiIiEg/MADHAJ0Nk5y8XCqPVp72iD+t
      iGRvO+FIHNKyybTraWj+SMuNFaG6OkhBXtYFqq+IiIj0JIcGIBg9biIHt7xHS6zrmJ1YuJ5o
      PIUkvwfc2YwelsTWHQc42bFl0954jINNNiMHKQCJiIhcjBwbgPJGz2RmfjuPPfMGTW1hbNsm
      HGzizRdfJH/KQnICJmCwaPlytq5+kb1H60lYNpG2Jl59/s/kjF9ASVagry9DREREzsGAWwm6
      ra6MP/7hWVqOT7Zqqj5CxJtFfmYyACNnruDqhRMBiLbV8eIzT7H/WBCf142ViJM9bDKfu2o5
      qb6OsTq2FWfnu6+xcv123F4fiWiY1JIJ3Hr9FaQnnd0QKq0ELSIi0r8MuACUiIWpq2sgcYar
      8qekk5WW3Pl/24rT1NhIKBLD408mOzMN8yObfNm2TXtrEy1tIUyPn+zsTNyfsM7QR5+vACQi
      ItJ/DLgA1B8pAImIiPQvjh0DJCIiIs6lACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAk
      IiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6j
      ACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIi
      jqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQi
      IiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMA
      JCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKO
      owAkIiIijqMAJCIiIo6jACQiIiKOowAkIiIijqMAJCIiIo6jACQiIiKO4+7rCvQm27axbQsw
      MU3j48taFgnLwjBNXGbXXHjiPJZlYxgGpmliGB9/PhEREem/BmwAioWD7Nv2PitffZ2hS+7i
      xsXjzljWtuK89dzDPL16M+MvuYMHrpt38jHb4sju93nupTc51tiGyxNg4rxLuHr5HAIe14W4
      FBEREelhAzAAJTi4eQOvrf8Ad+ZgCnPSsT+2vE1t6SbeP2Jy2bwJHP3Io81Hd/C7P67ispvu
      Yua4EkINFTz12CM8bbm5/YrZuNQQJCIictEZgGOA4rSE3Vxx093cd+d1DM5J/fjS4WZeeeUt
      Flx+BZlJp7forH99JSPmX8XsCUNwmyapOYO44abrKd+0lqrmcG9dhIiIiPSiARiAfEybN5eh
      hdmYnzROx7bZvn4l4fxpzBiZf/rjVhN7DzQxY9qEU94og7T8IQxJiXGgorGH6y4iIiIXwgDs
      Ajt7bdW7WflhDfd9/SY83Q2SbqmlLpFDfo63y2HDlURxYQoVx+pgQmHn8Vgshm2fucPNtm0s
      y+qx+ouIiMi5cWwAsmPtPPfUc8y75m7yU7p/G+xYjEQgGf9p2cgkJSWZaDTW5ahlWd0GoBPH
      QqFQT1RdREREzpNDA5DNrndWUp8+lZsnFH98yUSCRDfH4/E4+Loe8/l83ZTsCEChUAi/36/p
      8yIiIv2AIwNQsPYgf37lA4bPW8rba9d0Hj9UXkste1izJsLgsdMYnpZCcqiZtiikdOkFi9PU
      2ErG6LRP9bqmaeJyaeq8iIhIXxuAg6A/mWV4mbNoMRlui/b29s6vaCxOPBalvb2dWDwBSQUU
      Z7ZSVt51sHMi3MqhYxGGFGf20RWIiIjI+XBkC1BqzmAuvXLwacc3RI9iMIkrrzy5EOLsWRNZ
      tWYtU4ZeS5LbxLZtSrdtoNFXxMiCjAtZbREREekhAy4AxcKtHCpLN7u3AAAgAElEQVQtJ2YD
      WFTWt9KYOMzOnR2zr1Jzihicf/YtNxMXXsG2vb/id48lmDttNG3HDvDme3u49o4vkuZTd5aI
      iMjFyLA/bt72Rai9sYKVL6+iLd7944MnzmPZjNHdPnZw81qOMogl00acctQmGmxm66b32Xvo
      GL7UXGbPn8fgvAzOdjzziUHQPp9PY4BERET6gQEXgPojBSAREZH+xZGDoEVERMTZFIBERETE
      cRSARERExHEUgERERMRxFIBERETEcRSARERExHEUgERERMRxFIBERETEcRSARERExHEUgERE
      RMRxFIBERETEcRSARERExHEUgERERMRxFIBERETEcRSARERExHEUgERERMRxFIBERETEcRSA
      RERExHEUgERERMRxFIBERETEcRSARERExHEUgERERMRxFIBERETEcRSARERExHEUgERERMRx
      FIBERETEcRSARERExHEUgERERMRxFIBERETEcRSARERExHEUgERERMRxFIBERETEcRSARERE
      xHEUgERERMRxFIBERETEcRSARERExHEUgERERMRxFIBERETEcRSARERExHEUgERERMRxFIBE
      RETEcRSARERExHEUgERERMRxFIBERETEcRSARERExHEUgERERMRxFIBERETEcRSARERExHEU
      gERERMRxFIBERETEcRSARERExHEUgERERMRx3H1dgd7UWl/FBxveImn4POaNH3Ta4/FwK3t3
      bGPLzr20hmIkZxUwd958RgzKxTROlLIJNdfx3oa32He4Gl9KLnMWLmT04PxTyoiIiMjFZEAG
      oPamat5dv5qNeyqJB2sZmTbxtDJNlXt47PFnMbOHMnvGXDJTfNSW7+XJh37BipsfYN64QgBi
      bbU8+utf4i6ZwZLll9JWdYCnfvdLlt14LwsmDEIZSERE5OIzAANQiLUrXydRMIr7v3IN21Y+
      THU3paorq5h15e1MH1uC+3hTzvDhw8lPtnjsjbeYPu4mfMDmNS8SzJnOgzdcjs9lYo8YTnaq
      i0dffokJI75Ipt91Qa9OREREzt8ADEB+Lr/1DgAMwz5jC83oGUuPlzm1hEF6dg52aD8JADvM
      B5v2sOjuG/G5zM7yg8fNIu/V99hf2cjs4Tm9dSEiIiLSSwbgIGgDwzA+Emy6KdVNGSsaZPWb
      b1EycSxJAO3HqG7NpKQ4rUs505fMkAI/Ryobuj7fskgkEqd9WZbVExcmIiIiPWQAtgCdm7aG
      Cl586gmqPCO4d+m0jpaj9nbaA2mkeD5a2k1GZipVbW1djkaj0Y8NO5FIpKerLSIiIufA8QHI
      thMc3PoWf3xuNcNnX8qXV8wlydMxrsfGxjBd3TaTuVwusLse83q9Z3gNm0gkclYtUyIiItL7
      HB2ArHiEtc8/yppdLVx/55eZPDwf85SAYnh9uINttFuQ1CUFWbS2tOLP93U5n2l236No2x1J
      yev1dgQnERER6VMDcAzQWbLjbHjxUdaXe/jqN77K1BEFXcIPAKl55Hrrqa6NfOSpIY4ea6e4
      KPsCVlhERER6imMDUOPhrazcVM99995GXpqv+0JmGhPH5vHBxm2cHNlj01R1kPJ2PyOLMi9Q
      bUVERKQnOTYA7dm2ieIpCyhO637czgnzVlzB0fdfZt3m/cQSFs3HDvGHPz7H2AUrKEg9Q3AS
      ERGRfs2wTwxQGSBaju3lFz97iMYYgE08GsUy3XjdHWNvJiz5HHdfOYeXf/dvvL6tFq/n9DE5
      6QVjePCr95Lh7Ri/U1u2g2dfWMmhinrcgQzmLLuCyxZMwes6uwHNtm0TCoXw+XwaAyQiItIP
      DLgA1B8pAImIiPQvju0CExEREedSABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERER
      x1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIR
      ERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EA
      EhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHH
      UQASERERx1EAEhEREcdx93UFnCQajfZ1FURERAQFoAvG7R44b7Vt2yQSiQF1TdJB93bgisfj
      uFwuDMPo66rIeUokEgC4XK4+rsnFTb/lLgDDMPB6vX1djR5jWVbnh6Rpqhd1ING9HZhs2yYe
      j+N2u/WhOQBEIhGAAfW50hf0G05EREQcRwFIREREHEcBSERERBxHAUhEREQcRwFIREREHMew
      bdvu60rIxcW2bSzLwjRNTakdYHRvBybd14HFsiwAzdQ8TwpAIiIi4jiKjyIiIuI4CkAiIiLi
      OApAIiIi4jgKQCIiIuI4CkAiIiLiOApAIiIi4jjaDX6ACbc2cKwpxuBB+ZifYrmP+kNbWL0v
      xI2fmfcJJW0iwWaqG0IUDyrEdR5LioTbGqluilBSXHCGutqE25qpqKohZkFqRjb5uVm4P82F
      XaTi0XYOHyrHnZpDSWHOp7qXPcWKhThSUU3+oKH4z+M3RTzaTkVVPQXFxfjc3f/NFY+0U1lZ
      SXskgT85jaLCfLxnKHsxS8RCVFZUEgzHcHuTyCsoIC3gu7B1iLZTfqSOQSMG4zmf80SCHK2q
      p3DwYLxnuFWxSJDKo5WEYhZJKekUFebhcQ28+xqPBKmoqCQUTeALpFFUVHDG7/UeZSeoPFJO
      cs4g0gPnfjdtK07V0QpScotIS+r+PFYiRk1VBc1tYVzeJAqLikj2n893UN9TABpgako38uS6
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='XPH CMA' width='384'>
      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
      dT51xefO/uWyqJwIRilxOcixXfo5sKIqqPlu0gM+iGso2Q6Ut/H6S+GPg/qGeAAAIABJREFU
      JLn3Dx38tyePs6PbR1NJNhWn+it0w+Tbj7Xz0WuqSKYN2j1BvnpnC5OKDijU5bgodtopczmo
      zXFxQ10R96yrIBZPE45o7OuaothmQ4tohOMaP//cJpkSUgixtKR1g2891s6uPj+PfnHz3AH0
      Dbpp8vyYnyyrhRtL8992p67uC5M+6cFMpmcHlaspQslxzrtzOJ7S+cpvDtE5EeKbd7TyhyMe
      9vT7uWddBV+7rZnhQJTP/mI/P/vTTWh2ODwZYlmug9b8LFbmZ+O4QI3EME2eODzGtx5rRwG+
      8d4WPn9j/eLXAC6H1ACEEG9FVRWurS3kX/cP0++LcseqsrMOzm+MC9Q5E6Ux143tbQ77oGY5
      sFQWoDisGJ4Z9KEAZiyJku0Em+VtBcGQP8pDe4ZYU5XPr/cO8cQRDz//7LXc3FzCnavLqSly
      8/Odgzx+eIwOTwhdUahtzCNuGmwuz+e6ZfnUZLsu2lSuKArNpTn0eiNEUmnuff9K3Har1ACE
      EEvT3n4/f/rL/Xzn7jY+fu3Zo32mdIOHBybYUpJPY677srdhmiaGZ4b0kB8znMDaUIKltgjl
      Eq4wMkyTLz10kG0dk6yrzmdgKsqXb2ngP93ccNZyM7EUP3q1j3/dN8xt11Vy15pybikveNvB
      BbMT6MQ1nSzHbNOVDAYnhFiSNtUV8snravjec51sqiukftnpTl+7RaUqy8lAOD6vAFAUBUtl
      AWpZHvrYNOnOCXRfGNua2fmHL1Qb6PVG2NXn5z/f2sjT7ePUFrn5ky215yyX77bzjfe20NZc
      SFI1ub4k77IO/jBbO3rj4A9XwVhAQghxJSiKwtdua6K6wM13njhO8k13ANdkOfElUm85PtDb
      2pZFxVJdiP26OjBNUnv6MIMXvlz0j0c95Ltt/NmtTTz+5a384nObzrl5yzRNAkmNFz0BIorB
      jWUFb6vj+mIkAIQQS1a208r/+sgajo0F+fXe4bOeK3LaMICphLYg25odS8iNfVM9akEW2vEx
      zPT5h50IxTUe3jfCp66rwW5VyXXZKMyyn7WMZhh0zER5emQKi6pwd1Ux5S77edf3dpmGgRGK
      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
    </thumbnail>
    <thumbnail height='576' name='XPH EMA' width='576'>
      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
      sHjxIkI+k3Q6M53NEhERkTluWrbCSI+N0NbSzKs7XuClHbvZuWs3wymDmto6rr/jA9zx9i3T
      m8xERERkTrsiAci2bUYHu9i/bx/bX9jGK3sOcORoMynLzcIlK9l6z8fYvPE6lixaSDTku2SL
      IIqIiIhM5YoEoGyql/96/2/xUssQOTwsW38tH/7U+9l4wzXMq6og5PfOyoJnERERmZ2uzBCY
      YdCw8gau/9CNbN50PaUFIVwuUz09IiIiMi3m/FYYV5pmgYmIiMx8qjUWERERx1EAEhEREcdR
      ABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERER
      x1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIR
      ERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EA
      EhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHH
      UQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhER
      EcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQASERERx1EAEhEREcdRABIRERHHUQAS
      ERERx1EAEhEREcdRABIRERHHcU93A0RkMsuy6OvrY2BggIKCAioqKnC5XG/4N7Ztk8vl6O/v
      J5vNUlZWhtfrvUItvvQsy2JoaIiRkRGy2Sy2bVNYWEhxcTGmObu/t9m2TTqdpqenh2QySUFB
      AaWlped8jt/M/cRiMWKxGAUFBRQUFGAYxiW9j5kkl8sxNDREIpGgpKSEQCAwpx+vXDxnBCDb
      oqvlEC88/xyvN3dh4WLeouVs2bKF2tLwqVfkyO5t/OrpF+kfzVBRt5Q77rideSWhaWu6OE9L
      SwvPPvssqVQKj8fD1VdfzYoVK97wzdy2bfbs2cPevXuxLIu6ujo2btyI2z37TnHbtmltbeWF
      F14gkUhg2zYAfr+fDRs2sHjx4ln9wZZOp3n++ec5duwYuVwOn8/HunXrWLFixSULd7Zt09vb
      y9NPP83IyAjhcJjNmzdTXl5+SW5/prFtm2PHjvHyyy+TTCapqKhg48aNRCKR6W6azGCz+6vU
      +bDSbPv59/j6Dx6lsOFq7vvU7/LpT9zLwnCcr331H+mO58avaNP00sN862cvc/0dH+Azn76f
      VWVpvvp3/0D7cHpaH4I4y759+0gmkxM9Bfv37yebzb7h3ySTSV5//XVSqRSZTIaWlhYGBgau
      UIsvLcuyOHjwICMjI+RyOSzLwrIsEokEBw8eJJfLnftGZrD+/n5aWlomeraSySSHDx8mlUpd
      svuwbZumpiYGBwfJZrMMDQ1x+PDhS3b7M00mk+HQoUOMjo6SzWbp7Oyko6NjupslM5wDAlAG
      V8kSPve5z3Dz9WsoKYxSWFzBTW/7ANfNy/DCq835qyV6ePBnz3HPvfextrGWaGEJ193+fm5f
      7udnj7+INb2PQhzE5/NNuuz1es/Z42Ga5qQhL9M08Xg8l6V9V8Lpx+CE8zkWM53b7T5juMvj
      8VzSoT3DMCYdw9MvzzWGYZzx+p/NQ8ByZcz9AOQOcf0NGwj7zhwK8Li9QL57vfvY68SLlrC6
      5tQhMYOrbryJnn2vMpS2r0x7xfHWr19PeXk5Xq+XoqIirr766nPWh/h8Pq666irKysooKipi
      7dq1FBYWXqEWX1qmabJy5Upqa2sJh8MEAgH8fj9VVVWsWbNm1tcAFRcXs3r1aqLRKH6/n/Ly
      ctauXXvJP7AXL17MggULKCgooKGhgaVLl17S259J3G43q1atoqamhmg0yrJly6ipqZnuZskM
      N/sKBC4Jm+4jO3jhyCi//Y75APR2d1JeU4fJ5G+XvqJaQkYvQ7E0xaX5b1AnCk6nYlnqK5KL
      U1xczB133EEikcDv9+P3+8/Z62EYBvX19VRWVmJZ1qwuADUMg5KSEm655RZSqRS2bWPbNn6/
      f870AK1atYpFixaRzWbx+Xz4fL5L+rgMwyAcDrNp0yZSqRQ+n29W9wiei2EYlJeXs3XrVrLZ
      LH6//5IXlcvc47gAZFsZXnv+MR781Svc9oF7qS/Of+tKJccIFUQ5Lf/gcvnxB1yk0mngZABK
      p6euC8rlcti2zejo6OV8GOIAHo+HXC5HPB6/4L9NJBKXoUVXnmEYE8Egk8mQyWSmuUWXlsvl
      IpvNnrPG62KlUqlLWmM0042NjU13E2QWcFAAskkMdfGTH36fptECPvLpB2goi5zMOzZnhJ+z
      MQyDQCAw5e9OfMvS+LOIiMjM5ZAAZNPfvJf/992HmLduCw/cesMZNUG+gJ94T+yMIJTLJUmO
      5fCdEmjOZzhCAUhERGTmckQAivce45v/8hCrb/0gt127BHOK/FJWWUPv7mNY2LhOSUCpoTbi
      lFFUMHdnUIiIiDjN7J5OcT7sLM8/9nOiy7dy67WNU4YfgIqGpYQHD7K349R6C5udzz1HxfK1
      RNWhIyIiMmfM+QCUiw+y5+gQ69cuJJlIEI/HJ/1LpfPFh2agjLvuvIEHv/119jR1MBIbZPuv
      /p3HDmZ4163Xzv0DJSIi4iCGfWKd+TkqOdzFt7/xj3RPOSnLYPXmu3jPppXjl/NbYTz21Av0
      jaSprF/GHXfcftp2GW+sq6uL7u5u1qxZcymaLyIiIpfBnA9AV5oCkIiIyMynkR0RERFxHAUg
      ERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEc
      BSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERER
      cRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSAR
      ERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwF
      IBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFx
      HAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBER
      EXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUg
      ERERcRwFIBEREXEcBSARERFxHAUgERERcRz3dDfgirJtRod66I7ZNNRVTpn+cpkkLceOMjKW
      pbC8hvmVxRiGccWbKiIiIpePYwJQarSfbU88xtPPv0Jo4SZ+7+PvOCMAZWJdfPMb32DUU0ZF
      oZ/25h8xb/1b+cDbrsetDCQiIjJnOCIAHdv9BP/6yHZWbtjIh+8q4kevZs68kp3h5//6LTyL
      t/LZt2/AbRhkRrv56t/8HU/VzGPr2tor33ARERG5LBxRA1RYvYzPfv7zvHPr9YT9U2e++PHX
      eanN5D23X4vHNDEMA2+kkrvfdiMvPPMcSfsKN1pEREQuG0cEoKLyKsK+N+7s6mxvpqRhOYWe
      yT8vX7wCd38T/aO5y9hCERERuZIcMQR2PoYHBoiWLAEmF/u4vcX4/UlGR8cgEgbAsixSqdSU
      t5PNZrFtm3Q6fbmbLCIiIm+SAtA4y7Lw+nyn5x9M08Tn82LZJ8fADMPA5XJNeTsnZoydLSCJ
      iIjI9FMAGmeYJplUCmwmhSDLskin0pinTIU3DAOv1zvl7bhcLgzDIBKJXOYWi4iIyJvliBqg
      8xEtKma4v498Ajopmx5gLOUnHA5OT8NERETkklMAGlddt4CBlgMMZSf/vPfIAbLFCykJ6VCJ
      iIjMFfpUHxeqXMzVNVl++qsd5Gwb27bJxnt56JFtXL/pRvw6UiIiInOGYdv23F7hJh3nqSce
      p3s4CUC8r5UDXVnWr1yACQSK67jj1uvwAOlYJ9/8p2+QCFRRVeSntekQ1VfdyYfetuG8k2JX
      Vxfd3d2sWbPmcj0iERERuUhzPwDl0hw6+DojY1Os/gx4QyUsX1rPiTlducwYzU1NDCcyFFfO
      p67qwvYCUwASERGZ+eb+LDCXl8blq8//6p4AC5euvIwNEhERkemmyhYRERFxHAUgERERcRwF
      IBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFx
      HAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBER
      EXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUg
      ERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEc
      BSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERERcRwFIBEREXEcBSARERFxHAUgERER
      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
      t/N/B6Jes2BKh58AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='576' name='XPH FRL' width='576'>
      iVBORw0KGgoAAAANSUhEUgAAAkAAAAJACAYAAABlmtk2AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdd3hc5Zk28PuU6erNarbce8E2xmBjbMAU00kgobeEkpBNSNm03U0j2Swk
      bDYJ+TYhCYQaIAuh22CqwWCMe69yUe/SjKaeOef9/jijsWzLXVPP/bsuXwhpyitpNHPPW55H
      EkIIEBEREVmInOoBEBERESUbAxARERFZDgMQERERWQ4DEBEREVkOAxARERFZDgMQERERWQ4D
      EBEREVkOAxARERFZDgMQERERWY56vBeMRqMIBAKJHAsRERFRUhx3ANI0De3t7YkcS0YKBoMI
      BoOpHgYRERGdAIm9wE5NU1MT2traMGHChFQPhYiIiI7Tcc8A0dHZbLZUD4GIiIiOEzdBExER
      keUwABEREZHlMAARERGR5TAAERERkeUwABEREZHlMAARERGR5TAAERERkeUwABEREZHlMAAR
      ERGR5TAAERERkeUwABEREZHlMAARERGR5TAAERERkeUwABEREZHlMAARERGR5TAAERERkeUw
      ABEREZHlMAARERGR5TAAERERkeUwABEREZHlMAARERGR5TAAERERkeWoqR5AwgkdDXt3o92r
      YeSECci1m5mvraEWje2+ga+jOjB69Gh4HNn/4yEiIrKirH+F72ncjmeefh5NrQHc+eP7MaHY
      AQDoaKzFph0th10+EujAhl09uO9732UAIiIiylJZ/QpvaAEsfvUNzLr4Cqz850sHfW38rIUY
      P+vw66xe/Dd4XeNRVWhP0iiJiIgo2bJ4D5DA9pVvot09CXMmVUM6jmsY4Xa8/fEunHfuWVCl
      47kGERERZaKsDUDBjj14dVktrrjiPNiP87vc9vE7QM1sTKjMTezgiIiIKKWycwlMD2HJC//E
      pIVXY2iBAwgf+ypGqANvfbAR53/pu1APmfwxDAPh8MA3Eo1GAQCapp3qqImIiChJsi8ACYHd
      a97DLmk4vjFjxHEtfQECu9Z8hN7SqZheffjsjyRJUBRlwGtKkgQhBEKh0KmMmoiIiJIo6wJQ
      oHM/Xnt/C66+9R7YleOLP3qoG+8sW4dzP/cVyAPs/ZEkCXb7wJuiFUWBJEnIzeWyGRERUabI
      sgCkY9V7S7CvrRtL/vE45L4so4fR5O3GK0/+GcsLi3DVtTegxN13HYF9m1ei2zMK00eUHOeM
      EREREWWyLAtAEqbOvxLDTj9kOUrrxpP1rZh97kUYWexGnuPAl4yIH8s+XIVZC26Cy5a1e8KJ
      iIionywLQDIKSstRUHrIp8OtcKo2DKkehmHF/dKPEGitXYu6SCmunHB8R+WJiIgo81l6ykMI
      De8ufR8zFpyPQsfAm5yJiIgo+2TZDNARqHm4/LovoDLnkG9X6Jh2zpUYNm5EasZFREREKSEJ
      IUSqB5HJmpqa0NbWhqlTp6Z6KERERHScLL0ERkRERNbEAERERESWwwBERERElsMARERERJbD
      AERERESWwwBERERElsMARERERJbDAERERESWwwBERERElsMARERERJbDAERERESWwwBERERE
      lsMARERERJbDAERERESWwwBERERElsMARERERJbDAERERESWwwBERERElsMARERERJbDAERE
      RESWwwBERERElsMARERERJbDAERERESWwwBERERElsMARERERJbDAERERESWwwBERERElsMA
      RERERJbDAERERESWwwBERERElsMARERERJbDAERERESWwwBERERElsMARERERJbDAERERESW
      wwBERERElsMARERERJbDAERERESWwwBERERElsMARERERJbDAERERESWwwBERERElsMARERE
      RJbDAERERESWwwBERERElsMARERERJbDAERERESWwwBERERElsMARERERJbDAERERESWo6Z6
      AAkndDTs3Y12r4aREyYg135I5hMCvq421DW2ICokFJVVorKsELIkpWa8RERElHBZH4B6Grfj
      maefR1NrAHf++H5MKHbEvyZEFKvefhFLV+1DReUQqLJAZ8trKJ2yEDdcdHoKR01ERESJlNUB
      yNACWPzqG5h18RVY+c+XDvmqwPaPXsbSbWHc+bWvoyTHDgDQoxqC4WjyB0tERERJk8V7gAS2
      r3wT7e5JmDOpGocuaBmhDrz29kZcc/21KM11QJIkSJIE1WZHbo47JSMmIiKi5MjaABTs2INX
      l9XiiivOw6HbfgCgbc8WBErHY0yJM/mDIyIiopTKziUwPYQlL/wTkxZejaEFDiB8+EXamptQ
      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
    </thumbnail>
    <thumbnail height='576' name='XPH Trade' width='576'>
      iVBORw0KGgoAAAANSUhEUgAAAkAAAAJACAYAAABlmtk2AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdd3xdd2H38c85507tvSzb8t7bjpN4ZJMNJswCDRseCm2B0odSaJvyUNpS
      2gcKBcooJORJmNl7L8cjcbz31rC1t3TnOef5Q7ZsWZItOda9ku73/Xr5leh3f+fc35Wudb/+
      TcN1XRcRERGRFGImuwEiIiIiiaYAJCIiIilHAUhERERSjgKQiIiIpBwFIBEREUk5CkAiIiKS
      chSAREREJOUoAImIiEjKUQASERGRlOMZasV4PE53d/dItkVEREQkIYYcgGKxGI2NjSPZlnHL
      dV1aWlqS3QwRERE5xdBZYCMvFouxfft2pk2bRkZGRrKbIyIikvKG3AMkb59lWXi93mQ3Q0RE
      JOVpErSIiIikHAUgERERSTkKQCIiIpJyFIBEREQk5SgAiYiISMpRABIREZGUowAkIiIiKUcB
      SERERFKOApCIiIikHAUgERERSTkKQCIiIpJyFIBEREQk5SgAiYiISMpRABIREZGUowAkIiIi
      KUcBSERERFKOApCIiIikHAUgERERSTkKQCIiIpJyFIBEREQk5SgAiYiISMpRABIREZGUowAk
      IiIiKUcBSERERFKOApCIiIikHAUgERERSTkKQCIiIpJyFIBEREQk5SgAiYiISMpRABIREZGU
      owAkIiIiKUcBSERERFKOApCIiIikHAUgERERSTkKQCIiIpJyFIBEREQk5SgAiYiISMpRABIR
      EZGUowAkIiIiKUcBSERERFKOApCIiIikHE+yG5BMx3ZvYsfhun7lE2cvY8nMCae+crFjUQ7v
      3c7Byjr8GYUsWb6YvPQAhpHY9oqIiMilkdI9QG+99gyNUT95eXl9/qQHfb117EgnD979Ax56
      eSfBzGy66/byvf/4AXuqm3CT2HYRERG5eCncAxSivq6LNXdcz7xCa9Ba+zY8yYHIBP78M+8n
      02/huqupePkBHnnoKSZ/9k/I8KV0hhQRERmTUvfTO9xCQ3cOhbmDhx+IsWHjVlZfcx2Z/p56
      hmEyd8XVpHcc40h9W2LaKiIiIpdUygagcHMTHVm55J2vDyxSx4mmNKZPLexT7EnLZmqxj6M1
      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
      Wi5gWtC9azOKiIjIV1yXBCCXO4r+/VJZ9/5K6lvNM5arO7yXDXsPkz0gV2sAiYiISKfpkgBk
      OIOYM/cySte9zE///BhltY1tLT3Q1urj91G6dyM//cnPKHNmMXuyboYqIiIinadr7kFhGAya
      dA3fu/EQf338Yea98x/GjBpOQkwklr+VyrKDrF23haD4Xtz1vz8mNzmiS6olIiIi9tSlN0O1
      Aq1sW7eCZ196nT1FBzlaWY3DHUZSSio5Q8Zw9VVXMCgr5SvX+qOFEEVERHqWbrkbvGUGaKir
      pa6hEcMVTFR0DJHhIV+54HOcApCIiEjP0i23YTccTqJi44mKje+O3YuIiIjNddFK0CIiIiI9
      hwKQiIiI2I4CkIiIiNiOApCIiIjYjgKQiIiI2I4CkIiIiNiOApCIiIjYjgKQiIiI2I4CkIiI
      iNiOApCIiIjYjgKQiIiI2I4CkIiIiNiOApCIiIjYjgKQiIiI2I4CkIiIiNiOApCIiIjYjgKQ
      iIiI2I4CkIiIiNiOApCIiIjYjgKQiIiI2I4CkIiIiNiOApCIiIjYjgKQiIiI2I4CkIiIiNiO
      ApCIiIjYjgKQiIiI2I4CkIiIiNiOApCIiIjYjgKQiIiI2I4CkIiIiNiOq7sr0J0sM0BDfR0t
      rV4sDELCIomOCMUwjHZlaqoq8AY+9mLDSVx8HEEuZ9dWWkRERD432wag2tI9vPLa21Q1tR57
      xMLvN+k1cDSzZ0wgPKgt2Pg8FTz0h9/hSMrEfWp7mTuGedddQ2ZcWJfXXURERD4f2wag+po6
      BoyfQW5WBpHhIRiWSX1NOS8+9jBvRMYzb1I+AL66o/hj8rnrB98iQh2GIiIiXwm2vaRnDhzJ
      qPxsoiNCcRgGhsNJdHwqUycOZ8+efRzv8aovL8OZnES4bd8pERGRrx7bXtYNw+CUoT4AWFaA
      /QdKSE1L4fjInvKycpKTkjA6bEFERES+rGzbBXaCZeH3e6mpLKdg/Uo2V0Rww8XDTzx9tLwK
      I7yJwsJCwCA4NIyExERCgzq+dV6vF8uyOjzu9/sBME3zxP+LiIhI97F1AAo0FvO3vz1Fo99H
      bW0D2SOn8q1vTic69OTbEp/emwOFhbz7biGWZdHaXE+TL4jJF1/GmEG9cXyGpiGPx4PTqVlj
      IiIi3c2wTtdkYROW6aOutgGfr5WykgPs2LaVQ3Vurr3+GjJOM7vLsiz8Xg8Ht6/j8f+8z3W3
      f4+8lKhP3Y/P52PLli1kZ2cTGRnZGYciIiIin4GtA9DHWZbF9vee5/XtFt+77WpCzzBCyrJ8
      LHnsXmr7XMT8qfmfut3jASgnJ4eoqE8PTCIiItK5bDsI+nQMw6Df8NE4qoqoa/6Ecjhwuhzt
      FkwUERGRLw97BqBAC3v37sfj+/jyzhYluwrwRaYTEQJ4Knh/zVaaT10G2rKoLd3DR0WNDOqf
      3pW1FhERkS+IPQdBWyY71izhyUW1DBiYT3J8FIbl58iB3ewpa2XeDTcS7gKMUKr2rOaP7yxh
      wJDBJEaF0VxzhA8/2s7gKXMZmB7d3UciIiIi58C2Y4BMM0BjbQW7d+6hqr4Ry3CSkJbF4AH9
      CHY7T6z7Y5kB6quPsmPHLmoaPQSFRTN46DASY8JwnGUXmMYAiYiI9Cy2DUBdSQFIRESkZ7Hn
      GCARERGxNQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERER
      sR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSAR
      ERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0F
      IBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGx
      HQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBER
      EbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUg
      ERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEd
      BSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERER
      sR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSAR
      ERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0FIBEREbEdBSARERGxHQUgERERsR0F
      IBEREbEdV3dXoLv4PQ1s3rCOTVsKOFxeg4mDpMxsJk6ewuD+aRgnSlrUlhXxxuIl7D5YTnBk
      AhOmXcT5w7JxGp+wAxEREemxbBuA9mxYQUGxyYSLrqJ3ajwGfg7u3MQLC/9O3fzbuWBgGgAt
      VQd46B8LGTh1Lj+cn0fjkb089fST1DZfy+zxAzAUgkRERL50bBuABpw/iwEY7QJM3ogLuLLh
      CK+s28z5A9NwAB+89SpxQ7/GJROH4QAi+uZz43WtPLBoKWOG9iM5Iqi7DkFERETOkW3HABmG
      cdrWG5/fT3BwUFsXmNVIwc5SxowefsobZRCfmUtmSBOFpTVdVl8RERH54ti2BegEy8Lb2kzJ
      /n18uGY13ui+XDf7/LYAVHOYI/4UMlPC2r3EcIfTt1c0RYeOcn5O8onHW1tbMU2zwy4CgQAA
      fr8fn8/XmUcjIiIiZ8HWAShQv59f/upBGk0Tr89i2KRLmHfxRMKD294WK+DHDA4lxPnxVzoI
      Dw/D7/O3f9ThwPiEQUE+nw+Px/MFH4WIiIh8VrYOQM6oLP7vd7/D722l/Mghtm3eyL1/vp/L
      5t/AoN4JGA4neFvxWRDaLtdYeFo8OCLa9yC63e7T7ud4q09oaCiRkZGddDQiIiJytmw7Bugk
      A1dQCGm9c5hx6bXMn5HHqy8tpskPRMUQ46+mtulj3VqWl4qKBpISYrulxiIiIvL5KAB9TGr/
      PJwNpTR6AHcifdJg196SdmW8DdUUVfnJSlcAEhER+TKyZwDyN7Fhw2YaPD4syzrlP5Pd69dg
      JvQjOgzAyYSJ41n91hIqm46VNQOsX74YI3UwfRLVnSUiIvJlZM8xQIaDhuKt/O6Vl0jLzCIu
      OgwDk6rSQ9Q5Elmw4FpCj0XDXkOmMq34KR6471769e1Fc2UxR32x3PTtmYRoKWgREZEvJcOy
      LKu7K9FdWlvqKT5YTH1TC5bhJDohlazMZJwfm8llWSYVpQcpKavGHRZNdnZfQlxn33jm8/nY
      smULOTk5REVFfdGHISIiIp+RrQNQV1EAEhER6VnsOQZIREREbE0BSERERGxHAUhERERsRwFI
      REREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxH
      AUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIRERE
      bEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhE
      RERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcB
      SERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERs
      RwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERE
      RGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFI
      REREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGxH
      AUhERERsRwFIREREbEcBSERERGxHAUhERERsRwFIREREbEcBSERERGzHdbYF/X4/zc3NnVmX
      r6xAINDdVRAREZFTGJZlWWdTsL6+nj179nR2fb7SgoKCcDqd3V0NERER2zvrAGSaJqZpdnZ9
      vpJM06S8vLy7q9HjHW8pU0jsOSzLwu/343K5MAyju6sjp3H83OxynXWDvnQBfS49m2VZZx+A
      RDqbx+PBMAyCg4O7uypyjGmaeDweQkJCcDg0ZLAn8vl8+P1+QkNDu7sqcgp9Lj1bIBDQIGgR
      ERGxHwUgERERsR0FIBEREbEdBSARERGxHQUgERERsR3NApMe4/gyC5pt1HNYloVpmjgcDk2D
      76FM08SyLC0f0cPoc+nZNA1eREREbEk/tUVERMR2FIBERETEdhSARERExHYUgERERMR2FIBE
      RETEdhSARERExHZc3V0B6VksM0BNZRmVNY1YhkF0XDKJ8VE4u3ANGMsyqSgtxhmVRHzkud9J
      2TIDlJeWEBSTQmxExzvMW5ZJbWUZFdUNWIaD2MRUEmMj6Kmr3QR8rZSVHqahxYsrOIy0tDTC
      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
    </thumbnail>
    <thumbnail height='384' name='XPH Vol Trade' width='384'>
      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
      /j/rT98gqHiIngAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='576' name='XPH_StorePred' width='576'>
      iVBORw0KGgoAAAANSUhEUgAAAkAAAAJACAYAAABlmtk2AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdeYAcdZ338Xf1PT0zPWcmk0lmJvdBAgRycCO3gOKtoIi7onjhrq7ruurj
      7sOj67WoKx4sKArKISoKqJxyBQghB7nJnZlkZjL32Xd3dVU9f9RkwpBJmIRcTH9e/yTTXV1d
      lfR0fep3fH+G4zgOIiIiInnEc7wPQERERORYUwASERGRvKMAJCIiInlHAUhERETyjgKQiIiI
      5B0FIBEREck7CkAiIiKSdxSAREREJO8oAImIiEjeUQB6k2zbxrKs430YIiIicggUgN4ky7LI
      ZrPH+zBERETkECgAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUgERERyTsK
      QCIiIpJ3FIBEREQk7ygAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHd/xPoCj
      wrHJmjkcx9nvKX8giMdw/25bOcyctd82hseL3+/DONrHKSIiIsfFmAxAdqyFb3/np1j+0LAQ
      4/EH+Yd/+gZTy9yfG1/+Cz/50zIihaFhrx8/82w+fd0V+I/dIYuIiMgxNCYDUKyvB8bP5qYv
      XI/Pc+B2nLb2Ts6+6h+5+sK5x/DoRERE5Hgbk2OA+nq7KC2pwmMcvBOro6uTqvFVx+ioRERE
      5EQxJgNQf3cnkcqqg4/hcVJ0dyWoqiw/VoclIiIiJ4gx2AXm0NXRQcH4ufT29oBh4PP5CRcW
      4vN6hkKRk+mlM1qI1+mnpwcMw0MgFKKwIITxupYj27bJ5XIjvptt28P+FBERkRPfGAxAOULF
      VTSvfpI7VgM42A6ES8Zz6Tuu4qS6SgAcEyomhnn4rjvclzkOtuGhfvbpXHHp+ZSFA8P2eqCA
      4zgOtm2TSCSO4jmJiIjIkWQ4I80VH0McxyYZ62fLmhf4899f5YZ//TKTywL7bWfnTHq723jq
      od/RET6Fz3z0CoKj6CA0TRPTNAkGg0fh6EVERORoGIMtQMMZhofCSDkLzn8njZs28MqGBiaf
      P3u/7Tw+P5XVdVz1wQ/ww1vupb3/IurLRxdqDMPA6/Ue6UMXERGRo2RMDoIekeGhuKgQM2ce
      dDNfoJig38KyNKZHRERkrBpzASgT72fL9p1kc8MDTLK3iTXbupg5vR6A9qYdtHT2M6z/z7Fp
      WL8UMzyZcaXDiyOKiIjI2DHmusA8hsWaJX/lkccKOO30U6koLiDe28rSpSuoWXQlp9RGALCT
      3fz+/gcomzSDebOmEvQ6NG9bz8otbbz7I9dT7NdCGCIiImPVmBwEncumaGtqYN3GzQwkMgQL
      S5l76mlMr5+Af6gytEMy2se2zRvY3thK1oby6noWnn4qlaWFo14HzDRNcrkcBQUFR+t0RERE
      5AgbkwHoWFIAEhEReesZc2OARERERN6IApCIiIjkHQUgERERyTsKQCIiIpJ3FIBEREQk7ygA
      iYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUgERERyTsKQCIiIpJ3FIBEREQk
      7ygAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUgERERyTsKQCIiIpJ3FIBE
      REQk7ygAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUgERERyTsKQCIiIpJ3
      FIBEREQk7ygAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUgERERyTsKQCIi
      IpJ3FIBEREQk7ygAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUgERERyTsK
      QCIiIpJ3FIBEREQk7ygAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUgERER
      yTsKQCIiIpJ3FIBEREQk7ygAiYiISN5RABIREZG8owAkIiIieUcBSERERPKOApCIiIjkHQUg
      ERERyTsKQCIiIpJ3FIBEREQk7ygAiYiISN5RABIREZG84zveB3A0OLEWvvPfP2Ug42AYxtDj
      Hl+QT375m0wrc3+2c1lWPvtXnlq6hmgqR0XNVK563weYPamc17xMRERExpgxGYBifT1kymbw
      nS98Ap/3QEnGZvUT9/H3HfAPn/93JpaF2L76WX5z+618/J/+hRnjC4/pMYuIiMixMya7wPp7
      OyktGYfhOXAzjtnfzN+WNnD1tddQW1mMx+tn1qJLuWphFU88twLrGB6viIiIHFtjMgD1dXcR
      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
      owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIi
      IrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAk
      IiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIraj
      ACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIi
      tqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQi
      IiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMA
      JCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2
      owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIiIrajACQiIiK2owAkIiIitqMAJCIi
      Irbj6u8DuPQsQi1NHDt8kB2791DfFMLjT2DEmAmMGlaMz30681mWRe2JMt57fz01zRFyh4zm
      iqnjCHoH4Z9FREREOgy+EqBoM395+jFeensDiRmFjBs3juKcJN598Q888vSrhMzTi57c8x4/
      +9VjhAPZjB01ghPblvGzX/+RurZY/x2/iIiI9DrDsiyrvw/ikjKj1NQ1kpSSgsthdLwcaa3i
      Z9/7IXPv+SbTipMgXM/D/+/7lC79PFdNKMAArEgL//vLH+EefzO3zx/bo91FIhGi0Sh+v7+X
      TkhEREQutcFXAuRwkZaW2in8ALh86WQkO2hpCQFQVbaNY64i5o6Lhx8Awx3g6qvnsvP9tTTF
      BlcuFBERkdMGXwDqhhWLUrb5TQ605TFuaAYAx48eIX/ISLxn/QWS8objbT1CbWP09PqWhWma
      3f432ArQRERE7GDQtvZtqq3gZHU99dUn2L17LzVtLu7+7N2keePlPc1NjSSklHZZz+VOwOO1
      aGsLAW4gHoDa2to+cH+tra2X/BxERESkdwzaAHTiwDaWrd1DqLWJqvoWxk+fR4LPfXoBy8Lp
      7Hr6hmHgdDq7vOb1ervdTywWIxqNdvueiIiIXJ4GbQAaPnURw6YsxIxFaWluZNf65fz3f/2C
      zz70IAXJHlxuD23NLV3Wi8UihEKRTiGou1B0immaGIahRtAiIiIDyKBuA2QYBk6Xm8TkNKYt
      vImFIz0sW7UFgIysbCpOHOXsFjyhxnJCZgrJib6+P2ARERHpE4MuAFmmidlNw2TDMPB5vYQj
      EQAKho8ifGQ7h+rCZ67Nng3rSBw6jhSf0WUbIiIiMjgMugBUVbaJp559hd0Hj9AajgIWkVAL
      +7eu5vWNx5gxaTQA7pRirpmeyzNPPc/JumbMWJRD21bx5/ePce2iK+i+wktEREQGg0E3EGKk
      tZ41K95m6+79VNU0EInFcLo8pGfnc+VV1zFxeB6nhgiKhZtZ/spzrN68l7aISSA5i8VLb2Pq
      yFx6Wv6jgRBFREQGnkEXgODUuD0xYrH4OD3xtkAuHIYDwzh7WZNoJIrZ3ivM6XRgnL3QB1AA
      EhERGXgGZS+weK8tF+fouHXWsg7cHk/vH5SIiIhcNgZdGyARERGR81EAEhEREdtRABIRERHb
      UQASERER21EAEhEREdtRABIRERHbUQASERER21EAUDBlbwAAIABJREFUEhEREdtRABIRERHb
      UQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhER
      EdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQAS
      ERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtR
      ABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER
      21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIR
      ERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EA
      EhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHbUQASERER21EAEhEREdtRABIRERHb
      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
    </thumbnail>
  </thumbnails>
</workbook>
